/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

package framework

import (
	corev1 "github.com/olive-io/olive/apis/core/v1"
	extenderv1 "github.com/olive-io/olive/mon/scheduler/extender/v1"
)

// Extender is an interface for external processes to influence scheduling
// decisions made by olive. This is typically needed for resources not directly
// managed by olive.
type Extender interface {
	// Name returns a unique name that identifies the extender.
	Name() string

	// Filter based on extender-implemented predicate functions. The filtered list is
	// expected to be a subset of the supplied list.
	// The failedRunners and failedAndUnresolvableRunners optionally contains the list
	// of failed runners and failure reasons, except runners in the latter are
	// unresolvable.
	Filter(region *corev1.Region, runners []*RunnerInfo) (filteredRunners []*RunnerInfo, failedRunnersMap extenderv1.FailedRunnersMap, failedAndUnresolvable extenderv1.FailedRunnersMap, err error)

	// Prioritize based on extender-implemented priority functions. The returned scores & weight
	// are used to compute the weighted score for an extender. The weighted scores are added to
	// the scores computed by olive scheduler. The total scores are used to do the host selection.
	Prioritize(region *corev1.Region, runners []*RunnerInfo) (hostPriorities *extenderv1.HostPriorityList, weight int64, err error)

	// Bind delegates the action of binding a region to a runner to the extender.
	Bind(binding *corev1.Binding) error

	// IsBinder returns whether this extender is configured for the Bind method.
	IsBinder() bool

	// IsInterested returns true if at least one extended resource requested by
	// this region is managed by this extender.
	IsInterested(region *corev1.Region) bool

	// IsPrioritizer returns whether this extender is configured for the Prioritize method.
	IsPrioritizer() bool

	// IsFilter returns whether this extender is configured for the Filter method.
	IsFilter() bool

	// ProcessPreemption returns runners with their victim regions processed by extender based on
	// given:
	//   1. Region to schedule
	//   2. Candidate runners and victim regions (runnerNameToVictims) generated by previous scheduling process.
	// The possible changes made by extender may include:
	//   1. Subset of given candidate runners after preemption phase of extender.
	//   2. A different set of victim region for every given candidate runner after preemption phase of extender.
	ProcessPreemption(
		region *corev1.Region,
		runnerNameToVictims map[string]*extenderv1.Victims,
		runnerInfos RunnerInfoLister,
	) (map[string]*extenderv1.Victims, error)

	// SupportsPreemption returns if the scheduler extender support preemption or not.
	SupportsPreemption() bool

	// IsIgnorable returns true indicates scheduling should not fail when this extender
	// is unavailable. This gives scheduler ability to fail fast and tolerate non-critical extenders as well.
	// Both Filter and Bind actions are supported.
	IsIgnorable() bool
}
