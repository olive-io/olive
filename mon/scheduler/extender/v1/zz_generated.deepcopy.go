//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.      
For AGPL licensing, see below.                                              
                                                                            
AGPL licensing:                                                             
This program is free software: you can redistribute it and/or modify        
it under the terms of the GNU Affero General Public License as published by 
the Free Software Foundation, either version 3 of the License, or           
(at your option) any later version.                                         
                                                                            
This program is distributed in the hope that it will be useful,             
but WITHOUT ANY WARRANTY; without even the implied warranty of              
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               
GNU Affero General Public License for more details.                         
                                                                            
You should have received a copy of the GNU Affero General Public License    
along with this program.  If not, see <https://www.gnu.org/licenses/>.      
*/

// Code generated by deepcopy-gen. DO NOT EDIT.

package v1

import (
	corev1 "github.com/olive-io/olive/apis/core/v1"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtenderArgs) DeepCopyInto(out *ExtenderArgs) {
	*out = *in
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(corev1.Region)
		(*in).DeepCopyInto(*out)
	}
	if in.Runners != nil {
		in, out := &in.Runners, &out.Runners
		*out = new(corev1.RunnerList)
		(*in).DeepCopyInto(*out)
	}
	if in.Runners != nil {
		in, out := &in.RunnerNames, &out.RunnerNames
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtenderArgs.
func (in *ExtenderArgs) DeepCopy() *ExtenderArgs {
	if in == nil {
		return nil
	}
	out := new(ExtenderArgs)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtenderBindingArgs) DeepCopyInto(out *ExtenderBindingArgs) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtenderBindingArgs.
func (in *ExtenderBindingArgs) DeepCopy() *ExtenderBindingArgs {
	if in == nil {
		return nil
	}
	out := new(ExtenderBindingArgs)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtenderBindingResult) DeepCopyInto(out *ExtenderBindingResult) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtenderBindingResult.
func (in *ExtenderBindingResult) DeepCopy() *ExtenderBindingResult {
	if in == nil {
		return nil
	}
	out := new(ExtenderBindingResult)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtenderFilterResult) DeepCopyInto(out *ExtenderFilterResult) {
	*out = *in
	if in.Runners != nil {
		in, out := &in.Runners, &out.Runners
		*out = new(corev1.RunnerList)
		(*in).DeepCopyInto(*out)
	}
	if in.RunnerNames != nil {
		in, out := &in.RunnerNames, &out.RunnerNames
		*out = new([]string)
		if **in != nil {
			in, out := *in, *out
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
	}
	if in.FailedRunners != nil {
		in, out := &in.FailedRunners, &out.FailedRunners
		*out = make(FailedRunnersMap, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.FailedAndUnresolvableRunners != nil {
		in, out := &in.FailedAndUnresolvableRunners, &out.FailedAndUnresolvableRunners
		*out = make(FailedRunnersMap, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtenderFilterResult.
func (in *ExtenderFilterResult) DeepCopy() *ExtenderFilterResult {
	if in == nil {
		return nil
	}
	out := new(ExtenderFilterResult)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtenderPreemptionArgs) DeepCopyInto(out *ExtenderPreemptionArgs) {
	*out = *in
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(corev1.Region)
		(*in).DeepCopyInto(*out)
	}
	if in.RunnerNameToVictims != nil {
		in, out := &in.RunnerNameToVictims, &out.RunnerNameToVictims
		*out = make(map[string]*Victims, len(*in))
		for key, val := range *in {
			var outVal *Victims
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(Victims)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	if in.RunnerNameToMetaVictims != nil {
		in, out := &in.RunnerNameToMetaVictims, &out.RunnerNameToMetaVictims
		*out = make(map[string]*MetaVictims, len(*in))
		for key, val := range *in {
			var outVal *MetaVictims
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(MetaVictims)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtenderPreemptionArgs.
func (in *ExtenderPreemptionArgs) DeepCopy() *ExtenderPreemptionArgs {
	if in == nil {
		return nil
	}
	out := new(ExtenderPreemptionArgs)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtenderPreemptionResult) DeepCopyInto(out *ExtenderPreemptionResult) {
	*out = *in
	if in.RunnerNameToMetaVictims != nil {
		in, out := &in.RunnerNameToMetaVictims, &out.RunnerNameToMetaVictims
		*out = make(map[string]*MetaVictims, len(*in))
		for key, val := range *in {
			var outVal *MetaVictims
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(MetaVictims)
				(*in).DeepCopyInto(*out)
			}
			(*out)[key] = outVal
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtenderPreemptionResult.
func (in *ExtenderPreemptionResult) DeepCopy() *ExtenderPreemptionResult {
	if in == nil {
		return nil
	}
	out := new(ExtenderPreemptionResult)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in FailedRunnersMap) DeepCopyInto(out *FailedRunnersMap) {
	{
		in := &in
		*out = make(FailedRunnersMap, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
		return
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FailedRunnersMap.
func (in FailedRunnersMap) DeepCopy() FailedRunnersMap {
	if in == nil {
		return nil
	}
	out := new(FailedRunnersMap)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostPriority) DeepCopyInto(out *HostPriority) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostPriority.
func (in *HostPriority) DeepCopy() *HostPriority {
	if in == nil {
		return nil
	}
	out := new(HostPriority)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in HostPriorityList) DeepCopyInto(out *HostPriorityList) {
	{
		in := &in
		*out = make(HostPriorityList, len(*in))
		copy(*out, *in)
		return
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostPriorityList.
func (in HostPriorityList) DeepCopy() HostPriorityList {
	if in == nil {
		return nil
	}
	out := new(HostPriorityList)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MetaRegion) DeepCopyInto(out *MetaRegion) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MetaRegion.
func (in *MetaRegion) DeepCopy() *MetaRegion {
	if in == nil {
		return nil
	}
	out := new(MetaRegion)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MetaVictims) DeepCopyInto(out *MetaVictims) {
	*out = *in
	if in.Regions != nil {
		in, out := &in.Regions, &out.Regions
		*out = make([]*MetaRegion, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(MetaRegion)
				**out = **in
			}
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MetaVictims.
func (in *MetaVictims) DeepCopy() *MetaVictims {
	if in == nil {
		return nil
	}
	out := new(MetaVictims)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Victims) DeepCopyInto(out *Victims) {
	*out = *in
	if in.Regions != nil {
		in, out := &in.Regions, &out.Regions
		*out = make([]*corev1.Region, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(corev1.Region)
				(*in).DeepCopyInto(*out)
			}
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Victims.
func (in *Victims) DeepCopy() *Victims {
	if in == nil {
		return nil
	}
	out := new(Victims)
	in.DeepCopyInto(out)
	return out
}
