// Copyright 2023 The olive Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package olivepb;

option go_package = "github.com/olive-io/olive/api/olivepb;olivepb";
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;

import "gogoproto/gogo.proto";
import "github.com/olive-io/olive/api/olivepb/internal.proto";

// for grpc-gateway
import "google/api/annotations.proto";

service MetaRPC {
  rpc GetMeta(GetMetaRequest) returns (GetMetaResponse) {
    option (google.api.http) = {
      get: "/v1/meta/get"
    };
  };
}

message GetMetaRequest {}

message GetMetaResponse {
  olivepb.Meta meta = 1;
}

service BpmnRPC {
  rpc DeployDefinition(DeployDefinitionRequest) returns (DeployDefinitionResponse) {
    option (google.api.http) = {
      post: "/v1/definition/deploy"
      body: "*"
    };
  };
  rpc ListDefinition(ListDefinitionRequest) returns (ListDefinitionResponse) {
    option (google.api.http) = {
      get: "/v1/definitions"
    };
  };
  rpc GetDefinition(GetDefinitionRequest) returns (GetDefinitionResponse) {
    option (google.api.http) = {
      get: "/v1/definition/{id}"
    };
  };
  rpc RemoveDefinition(RemoveDefinitionRequest) returns (RemoveDefinitionResponse) {
    option (google.api.http) = {
      post: "/v1/definition/remove"
      body: "*"
    };
  };
  rpc ExecuteDefinition(ExecuteDefinitionRequest) returns (ExecuteDefinitionResponse) {
    option (google.api.http) = {
      post: "/v1/definition/execute"
      body: "*"
    };
  };
  rpc GetProcessInstance(GetMetaProcessInstanceRequest) returns (GetMetaProcessInstanceResponse) {
    option (google.api.http) = {
      post: "/v1/processInstance/get"
      body: "*"
    };
  };
}

message DeployDefinitionRequest {
  string id = 1;
  string name = 2;
  bytes content = 3;
}

message DeployDefinitionResponse {
  olivepb.ResponseHeader header = 1;
  uint64 version = 2;
  uint64 region = 3;
}

message ListDefinitionRequest {
  int64 limit = 1;
  string continue = 21;
}

message ListDefinitionResponse {
  olivepb.ResponseHeader header = 1;
  repeated olivepb.Definition definitions = 2;
  string continueToken = 3;
}

message GetDefinitionRequest {
  string id = 1;
  uint64 version = 2;
}

message GetDefinitionResponse {
  olivepb.ResponseHeader header = 1;
  olivepb.Definition definition = 2;
}

message RemoveDefinitionRequest {
  string id = 1;
}

message RemoveDefinitionResponse {
  olivepb.ResponseHeader header = 1;
}

message ExecuteDefinitionRequest {
  string definitionId = 1;
  uint64 definitionVersion = 2;
  string name = 3;
  map<string, string> header = 4;
  map<string, bytes> properties = 5;
}

message ExecuteDefinitionResponse {
  olivepb.ResponseHeader header = 1;
  olivepb.ProcessInstance instance = 2;
}

message GetMetaProcessInstanceRequest {
  string definitionId = 1;
  uint64 definitionVersion = 2;
  uint64 id = 3;
}

message GetMetaProcessInstanceResponse {
  olivepb.ProcessInstance instance = 1;
}

service RunnerRPC {
  rpc GetProcessInstance(GetProcessInstanceRequest) returns (GetProcessInstanceResponse) {
    option (google.api.http) = {
      post: "/v1/processInstance/get"
      body: "*"
    };
  };
}

message GetProcessInstanceRequest {
  string id = 1;
}

message GetProcessInstanceResponse {
  olivepb.ProcessInstance instance = 1;
}