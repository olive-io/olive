// Copyright 2023 The olive Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package olivepb;

option go_package = "github.com/olive-io/olive/api/olivepb;olivepb";
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;

import "gogoproto/gogo.proto";
import "github.com/olive-io/olive/api/olivepb/internal.proto";
import "github.com/olive-io/olive/api/discoverypb/discovery.proto";

// for grpc-gateway
import "google/api/annotations.proto";


service Cluster {
  // MemberAdd adds a member into the cluster.
  rpc MemberAdd(MemberAddRequest) returns (MemberAddResponse) {
    option (google.api.http) = {
      post: "/v3/cluster/member/add"
      body: "*"
    };
  }

  // MemberRemove removes an existing member from the cluster.
  rpc MemberRemove(MemberRemoveRequest) returns (MemberRemoveResponse) {
    option (google.api.http) = {
      post: "/v3/cluster/member/remove"
      body: "*"
    };
  }

  // MemberUpdate updates the member configuration.
  rpc MemberUpdate(MemberUpdateRequest) returns (MemberUpdateResponse) {
    option (google.api.http) = {
      post: "/v3/cluster/member/update"
      body: "*"
    };
  }

  // MemberList lists all the members in the cluster.
  rpc MemberList(MemberListRequest) returns (MemberListResponse) {
    option (google.api.http) = {
      post: "/v3/cluster/member/list"
      body: "*"
    };
  }

  // MemberPromote promotes a member from raft learner (non-voting) to raft voting member.
  rpc MemberPromote(MemberPromoteRequest) returns (MemberPromoteResponse) {
    option (google.api.http) = {
      post: "/v3/cluster/member/promote"
      body: "*"
    };
  }
}

message MemberAddRequest {
  // peerURLs is the list of URLs the added member will use to communicate with the cluster.
  repeated string peerURLs = 1;
  // isLearner indicates if the added member is raft learner.
  bool isLearner = 2;
}

message MemberAddResponse {
  ResponseHeader header = 1;
  // member is the member information for the added member.
  Member member = 2;
  // members is a list of all members after adding the new member.
  repeated Member members = 3;
}

message MemberRemoveRequest {
  // ID is the member ID of the member to remove.
  uint64 ID = 1;
}

message MemberRemoveResponse {
  ResponseHeader header = 1;
  // members is a list of all members after removing the member.
  repeated Member members = 2;
}

message MemberUpdateRequest {
  // ID is the member ID of the member to update.
  uint64 ID = 1;
  // peerURLs is the new list of URLs the member will use to communicate with the cluster.
  repeated string peerURLs = 2;
}

message MemberUpdateResponse{
  ResponseHeader header = 1;
  // members is a list of all members after updating the member.
  repeated Member members = 2;
}

message MemberListRequest {
  bool linearizable = 1;
}

message MemberListResponse {
  ResponseHeader header = 1;
  // members is a list of all members associated with the cluster.
  repeated Member members = 2;
}

message MemberPromoteRequest {
  // ID is the member ID of the member to promote.
  uint64 ID = 1;
}

message MemberPromoteResponse {
  ResponseHeader header = 1;
  // members is a list of all members after promoting the member.
  repeated Member members = 2;
}

service MetaRPC {
  rpc GetMeta(GetMetaRequest) returns (GetMetaResponse) {
    option (google.api.http) = {
      get: "/v1/meta/get"
    };
  };
  rpc ListRunner(ListRunnerRequest) returns (ListRunnerResponse) {
    option (google.api.http) = {
      get: "/v1/runners"
    };
  };
  rpc GetRunner(GetRunnerRequest) returns (GetRunnerResponse) {
    option (google.api.http) = {
      get: "/v1/runner/{id}"
    };
  };
  rpc ListRegion(ListRegionRequest) returns (ListRegionResponse) {
    option (google.api.http) = {
      get: "/v1/regions"
    };
  };
  rpc GetRegion(GetRegionRequest) returns (GetRegionResponse) {
    option (google.api.http) = {
      get: "/v1/region/{id}"
    };
  };
}

message GetMetaRequest {}

message GetMetaResponse {
  olivepb.Meta meta = 1;
}

message ListRunnerRequest {}

message ListRunnerResponse {
  repeated olivepb.Runner runners = 1;
}

message GetRunnerRequest {
  uint64 id = 1;
}

message GetRunnerResponse {
  olivepb.Runner runner = 1;
}

message ListRegionRequest {}

message ListRegionResponse {
  repeated olivepb.Region regions = 1;
}

message GetRegionRequest {
  uint64 id = 1;
}

message GetRegionResponse {
  olivepb.Region region = 1;
}

service BpmnRPC {
  rpc DeployDefinition(DeployDefinitionRequest) returns (DeployDefinitionResponse) {
    option (google.api.http) = {
      post: "/v1/definition/deploy"
      body: "*"
    };
  };
  rpc ListDefinition(ListDefinitionRequest) returns (ListDefinitionResponse) {
    option (google.api.http) = {
      get: "/v1/definitions"
    };
  };
  rpc GetDefinition(GetDefinitionRequest) returns (GetDefinitionResponse) {
    option (google.api.http) = {
      get: "/v1/definition/{id}"
    };
  };
  rpc RemoveDefinition(RemoveDefinitionRequest) returns (RemoveDefinitionResponse) {
    option (google.api.http) = {
      post: "/v1/definition/remove"
      body: "*"
    };
  };
  rpc ExecuteDefinition(ExecuteDefinitionRequest) returns (ExecuteDefinitionResponse) {
    option (google.api.http) = {
      post: "/v1/definition/execute"
      body: "*"
    };
  };
  rpc GetProcessInstance(GetProcessInstanceRequest) returns (GetProcessInstanceResponse) {
    option (google.api.http) = {
      post: "/v1/processInstance/get"
      body: "*"
    };
  };
}

message DeployDefinitionRequest {
  string id = 1;
  string name = 2;
  bytes content = 3;
}

message DeployDefinitionResponse {
  olivepb.ResponseHeader header = 1;
  uint64 version = 2;
  uint64 region = 3;
}

message ListDefinitionRequest {
  int64 limit = 1;
  string continue = 21;
}

message ListDefinitionResponse {
  olivepb.ResponseHeader header = 1;
  repeated olivepb.Definition definitions = 2;
  string continueToken = 3;
}

message GetDefinitionRequest {
  string id = 1;
  uint64 version = 2;
}

message GetDefinitionResponse {
  olivepb.ResponseHeader header = 1;
  olivepb.Definition definition = 2;
}

message RemoveDefinitionRequest {
  string id = 1;
}

message RemoveDefinitionResponse {
  olivepb.ResponseHeader header = 1;
}

message ExecuteDefinitionRequest {
  string definitionId = 1;
  uint64 definitionVersion = 2;
  string name = 3;
  map<string, string> header = 4;
  map<string, discoverypb.Box> properties = 5;
}

message ExecuteDefinitionResponse {
  olivepb.ResponseHeader header = 1;
  olivepb.ProcessInstance instance = 2;
}

service RunnerRPC {
  rpc GetProcessInstance(GetProcessInstanceRequest) returns (GetProcessInstanceResponse) {
    option (google.api.http) = {
      post: "/v1/processInstance/get"
      body: "*"
    };
  };
}

message GetProcessInstanceRequest {
  uint64 region = 1;
  string definitionId = 2;
  uint64 definitionVersion = 3;
  uint64 id = 4;
}

message GetProcessInstanceResponse {
  olivepb.ProcessInstance instance = 1;
}