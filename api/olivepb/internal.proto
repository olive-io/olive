/*
   Copyright 2023 The olive Authors

   This program is offered under a commercial and under the AGPL license.
   For AGPL licensing, see below.

   AGPL licensing:
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Affero General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Affero General Public License for more details.

   You should have received a copy of the GNU Affero General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

syntax = "proto3";

package olivepb;

option go_package = "github.com/olive-io/olive/api/olivepb;olivepb";

import "github.com/olive-io/olive/api/discoverypb/discovery.proto";

message ResponseHeader {
  // cluster_id is the ID of the cluster which sent the response.
  uint64 cluster_id = 1;
  // member_id is the ID of the member which sent the response.
  uint64 member_id = 2;
  // raft_term is the raft term when the request was applied.
  uint64 raft_term = 3;
}

message Member {
  // ID is the member ID for this member.
  uint64 ID = 1;
  // name is the human-readable name of the member. If the member is not started, the name will be an empty string.
  string name = 2;
  // peerURLs is the list of URLs the member exposes to the cluster for communication.
  repeated string peerURLs = 3;
  // clientURLs is the list of URLs the member exposes to clients for communication. If the member is not started, clientURLs will be empty.
  repeated string clientURLs = 4;
  // isLearner indicates if the member is raft learner.
  bool isLearner = 5;
}

message Runner {
  uint64 id = 1;
  string listenPeerURL = 2;
  string listenClientURL = 3;
  int64 heartbeatMs = 4;
  string hostname = 5;
  uint64 cpu = 6;
  uint64 memory = 7;
  string version = 8;
}

enum State {
  UnKnown = 0;
  Ready = 1;
  NotReady = 2;
  Alarm = 3;
}

message RunnerStat {
  uint64 id = 1;
  double cpuPer = 11;
  double memoryPer = 12;

  repeated uint64 regions = 21;
  repeated string leaders = 22;
  uint64 definitions = 23;
  uint64 bpmnProcesses = 24;
  uint64 bpmnEvents = 25;
  uint64 bpmnTasks = 26;

  State state = 101;
  string error = 102;
  int64 timestamp = 103;
}

message Region {
  uint64 id = 1;
  string name = 2;
  uint64 deploymentId = 3;

  repeated RegionReplica replicas = 5;

  uint64 electionRTT = 6;
  uint64 heartbeatRTT = 7;
  uint64 leader = 8;

  uint64 definitions = 11;
  uint64 definitionsLimit = 13;
  int64 rev = 12;

  State state = 21;
  string error = 22;
  int64 timestamp = 23;
}

message RegionReplica {
  uint64 id = 1;
  uint64 runner = 2;
  uint64 region = 3;
  string raftAddress = 4;
  bool isNonVoting = 5;
  bool isWitness = 6;
  bool isJoin = 7;
}

message RegionStat {
  uint64 id = 1;
  uint64 leader = 2;
  uint64 term = 3;
  int32 replicas = 4;

  uint64 definitions = 11;
  uint64 runningDefinitions = 12;
  uint64 bpmnProcesses = 13;
  uint64 bpmnEvents = 14;
  uint64 bpmnTasks = 15;

  State state = 101;
  string error = 102;
  int64 timestamp = 103;
}

message Definition {
  string id = 1;
  string name = 2;
  string content = 3;
  uint64 version = 4;

  // the id of olive region
  uint64 region = 101;
  // the version from etcd's storage
  int64 rev = 102;
}

message DefinitionMeta {
  string id = 1;
  uint64 version = 2;
  uint64 region = 3;
  int64 startRev = 4;
  int64 endRev = 5;
}

message ProcessInstance {
  enum Status {
    Unknown = 0;
    Waiting = 1;
    Prepare = 2;
    Running = 3;
    Ok = 4;
    Fail = 5;
  }

  string id = 1;
  string name = 2;
  string definitionsId = 3;
  uint64 definitionsVersion = 4;
  string definitionsProcess = 5;
  string definitionsContent = 6;
  map<string, string> headers = 7;
  map<string, discoverypb.Box> properties = 8;
  map<string, string> dataObjects = 9;

  ProcessRunningState runningState = 21;
  map<string, FlowNodeStat> flowNodes = 22;
  uint64 attempts = 23;
  int64 creationTime = 24;
  int64 startTime = 25;
  int64 endTime = 26;

  Status status = 27;
  string message = 28;

  // the id of olive region
  uint64 region = 101;
  // the version from etcd's storage
  int64 rev = 102;
}

message ProcessRunningState {
  map<string, string> properties = 1;
  map<string, string> dataObjects = 2;
  map<string, string> variables = 3;
}

message FlowNodeStat {
  string id = 1;
  string name = 2;
  map<string, string> headers = 3;
  map<string, string> properties = 4;
  map<string, string> dataObjects = 5;

  int64 startTime = 11;
  int64 endTime = 12;
}
