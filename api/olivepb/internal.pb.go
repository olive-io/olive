//
//Copyright 2023 The olive Authors
//
//This program is offered under a commercial and under the AGPL license.
//For AGPL licensing, see below.
//
//AGPL licensing:
//This program is free software: you can redistribute it and/or modify
//it under the terms of the GNU Affero General Public License as published by
//the Free Software Foundation, either version 3 of the License, or
//(at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU Affero General Public License for more details.
//
//You should have received a copy of the GNU Affero General Public License
//along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.28.3
// source: github.com/olive-io/olive/api/olivepb/internal.proto

package olivepb

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/olive-io/olive/api/discoverypb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type State int32

const (
	State_UnKnown  State = 0
	State_Ready    State = 1
	State_NotReady State = 2
	State_Alarm    State = 3
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0: "UnKnown",
		1: "Ready",
		2: "NotReady",
		3: "Alarm",
	}
	State_value = map[string]int32{
		"UnKnown":  0,
		"Ready":    1,
		"NotReady": 2,
		"Alarm":    3,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_enumTypes[0].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_github_com_olive_io_olive_api_olivepb_internal_proto_enumTypes[0]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP(), []int{0}
}

type FlowNodeType int32

const (
	FlowNodeType_FlowNodeUnknown   FlowNodeType = 0
	FlowNodeType_StartEvent        FlowNodeType = 1
	FlowNodeType_EndEvent          FlowNodeType = 2
	FlowNodeType_BoundaryEvent     FlowNodeType = 3
	FlowNodeType_Task              FlowNodeType = 100
	FlowNodeType_UserTask          FlowNodeType = 101
	FlowNodeType_ServiceTask       FlowNodeType = 102
	FlowNodeType_ScriptTask        FlowNodeType = 103
	FlowNodeType_SendTask          FlowNodeType = 104
	FlowNodeType_ReceiveTask       FlowNodeType = 105
	FlowNodeType_ManualTask        FlowNodeType = 106
	FlowNodeType_CallActivity      FlowNodeType = 107
	FlowNodeType_SubProcess        FlowNodeType = 108
	FlowNodeType_EventBasedGateway FlowNodeType = 200
	FlowNodeType_ParallelGateway   FlowNodeType = 201
	FlowNodeType_InclusiveGateway  FlowNodeType = 202
	FlowNodeType_ExclusiveGateway  FlowNodeType = 203
)

// Enum value maps for FlowNodeType.
var (
	FlowNodeType_name = map[int32]string{
		0:   "FlowNodeUnknown",
		1:   "StartEvent",
		2:   "EndEvent",
		3:   "BoundaryEvent",
		100: "Task",
		101: "UserTask",
		102: "ServiceTask",
		103: "ScriptTask",
		104: "SendTask",
		105: "ReceiveTask",
		106: "ManualTask",
		107: "CallActivity",
		108: "SubProcess",
		200: "EventBasedGateway",
		201: "ParallelGateway",
		202: "InclusiveGateway",
		203: "ExclusiveGateway",
	}
	FlowNodeType_value = map[string]int32{
		"FlowNodeUnknown":   0,
		"StartEvent":        1,
		"EndEvent":          2,
		"BoundaryEvent":     3,
		"Task":              100,
		"UserTask":          101,
		"ServiceTask":       102,
		"ScriptTask":        103,
		"SendTask":          104,
		"ReceiveTask":       105,
		"ManualTask":        106,
		"CallActivity":      107,
		"SubProcess":        108,
		"EventBasedGateway": 200,
		"ParallelGateway":   201,
		"InclusiveGateway":  202,
		"ExclusiveGateway":  203,
	}
)

func (x FlowNodeType) Enum() *FlowNodeType {
	p := new(FlowNodeType)
	*p = x
	return p
}

func (x FlowNodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowNodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_enumTypes[1].Descriptor()
}

func (FlowNodeType) Type() protoreflect.EnumType {
	return &file_github_com_olive_io_olive_api_olivepb_internal_proto_enumTypes[1]
}

func (x FlowNodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowNodeType.Descriptor instead.
func (FlowNodeType) EnumDescriptor() ([]byte, []int) {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP(), []int{1}
}

type ProcessStatus int32

const (
	ProcessStatus_ProcessUnknown ProcessStatus = 0
	ProcessStatus_Waiting        ProcessStatus = 1
	ProcessStatus_Prepare        ProcessStatus = 2
	ProcessStatus_Running        ProcessStatus = 3
	ProcessStatus_Ok             ProcessStatus = 4
	ProcessStatus_Fail           ProcessStatus = 5
)

// Enum value maps for ProcessStatus.
var (
	ProcessStatus_name = map[int32]string{
		0: "ProcessUnknown",
		1: "Waiting",
		2: "Prepare",
		3: "Running",
		4: "Ok",
		5: "Fail",
	}
	ProcessStatus_value = map[string]int32{
		"ProcessUnknown": 0,
		"Waiting":        1,
		"Prepare":        2,
		"Running":        3,
		"Ok":             4,
		"Fail":           5,
	}
)

func (x ProcessStatus) Enum() *ProcessStatus {
	p := new(ProcessStatus)
	*p = x
	return p
}

func (x ProcessStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_enumTypes[2].Descriptor()
}

func (ProcessStatus) Type() protoreflect.EnumType {
	return &file_github_com_olive_io_olive_api_olivepb_internal_proto_enumTypes[2]
}

func (x ProcessStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessStatus.Descriptor instead.
func (ProcessStatus) EnumDescriptor() ([]byte, []int) {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP(), []int{2}
}

type OliveHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Runner uint64 `protobuf:"varint,1,opt,name=runner,proto3" json:"runner,omitempty"`
	Rev    int64  `protobuf:"varint,2,opt,name=rev,proto3" json:"rev,omitempty"`
}

func (x *OliveHeader) Reset() {
	*x = OliveHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OliveHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OliveHeader) ProtoMessage() {}

func (x *OliveHeader) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OliveHeader.ProtoReflect.Descriptor instead.
func (*OliveHeader) Descriptor() ([]byte, []int) {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP(), []int{0}
}

func (x *OliveHeader) GetRunner() uint64 {
	if x != nil {
		return x.Runner
	}
	return 0
}

func (x *OliveHeader) GetRev() int64 {
	if x != nil {
		return x.Rev
	}
	return 0
}

type ResponseHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cluster_id is the ID of the cluster which sent the response.
	ClusterId uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// member_id is the ID of the member which sent the response.
	MemberId uint64 `protobuf:"varint,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	// raft_term is the raft term when the request was applied.
	RaftTerm uint64 `protobuf:"varint,3,opt,name=raft_term,json=raftTerm,proto3" json:"raft_term,omitempty"`
}

func (x *ResponseHeader) Reset() {
	*x = ResponseHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseHeader) ProtoMessage() {}

func (x *ResponseHeader) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseHeader.ProtoReflect.Descriptor instead.
func (*ResponseHeader) Descriptor() ([]byte, []int) {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP(), []int{1}
}

func (x *ResponseHeader) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ResponseHeader) GetMemberId() uint64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *ResponseHeader) GetRaftTerm() uint64 {
	if x != nil {
		return x.RaftTerm
	}
	return 0
}

type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the member ID for this member.
	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// name is the human-readable name of the member. If the member is not started, the name will be an empty string.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// peerURLs is the list of URLs the member exposes to the cluster for communication.
	PeerURLs []string `protobuf:"bytes,3,rep,name=peerURLs,proto3" json:"peerURLs,omitempty"`
	// clientURLs is the list of URLs the member exposes to clients for communication. If the member is not started, clientURLs will be empty.
	ClientURLs []string `protobuf:"bytes,4,rep,name=clientURLs,proto3" json:"clientURLs,omitempty"`
	// isLearner indicates if the member is raft learner.
	IsLearner bool `protobuf:"varint,5,opt,name=isLearner,proto3" json:"isLearner,omitempty"`
}

func (x *Member) Reset() {
	*x = Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP(), []int{2}
}

func (x *Member) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Member) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Member) GetPeerURLs() []string {
	if x != nil {
		return x.PeerURLs
	}
	return nil
}

func (x *Member) GetClientURLs() []string {
	if x != nil {
		return x.ClientURLs
	}
	return nil
}

func (x *Member) GetIsLearner() bool {
	if x != nil {
		return x.IsLearner
	}
	return false
}

type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId uint64        `protobuf:"varint,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Leader    uint64        `protobuf:"varint,2,opt,name=leader,proto3" json:"leader,omitempty"`
	Members   []*MetaMember `protobuf:"bytes,3,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP(), []int{3}
}

func (x *Meta) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *Meta) GetLeader() uint64 {
	if x != nil {
		return x.Leader
	}
	return 0
}

func (x *Meta) GetMembers() []*MetaMember {
	if x != nil {
		return x.Members
	}
	return nil
}

type MetaMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientURLs []string `protobuf:"bytes,2,rep,name=clientURLs,proto3" json:"clientURLs,omitempty"`
	PeerURLs   []string `protobuf:"bytes,3,rep,name=peerURLs,proto3" json:"peerURLs,omitempty"`
}

func (x *MetaMember) Reset() {
	*x = MetaMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaMember) ProtoMessage() {}

func (x *MetaMember) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaMember.ProtoReflect.Descriptor instead.
func (*MetaMember) Descriptor() ([]byte, []int) {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP(), []int{4}
}

func (x *MetaMember) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MetaMember) GetClientURLs() []string {
	if x != nil {
		return x.ClientURLs
	}
	return nil
}

func (x *MetaMember) GetPeerURLs() []string {
	if x != nil {
		return x.PeerURLs
	}
	return nil
}

type Runner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique name of the runner
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// listenURL is the URL the runner is listening on.
	ListenURL   string `protobuf:"bytes,2,opt,name=listenURL,proto3" json:"listenURL,omitempty"`
	Version     string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	HeartbeatMs int64  `protobuf:"varint,4,opt,name=heartbeatMs,proto3" json:"heartbeatMs,omitempty"`
	Hostname    string `protobuf:"bytes,5,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Cpu         uint64 `protobuf:"varint,21,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory      uint64 `protobuf:"varint,22,opt,name=memory,proto3" json:"memory,omitempty"`
	DiskSize    uint64 `protobuf:"varint,23,opt,name=diskSize,proto3" json:"diskSize,omitempty"`
}

func (x *Runner) Reset() {
	*x = Runner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Runner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Runner) ProtoMessage() {}

func (x *Runner) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Runner.ProtoReflect.Descriptor instead.
func (*Runner) Descriptor() ([]byte, []int) {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP(), []int{5}
}

func (x *Runner) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Runner) GetListenURL() string {
	if x != nil {
		return x.ListenURL
	}
	return ""
}

func (x *Runner) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Runner) GetHeartbeatMs() int64 {
	if x != nil {
		return x.HeartbeatMs
	}
	return 0
}

func (x *Runner) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Runner) GetCpu() uint64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *Runner) GetMemory() uint64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *Runner) GetDiskSize() uint64 {
	if x != nil {
		return x.DiskSize
	}
	return 0
}

type RunnerStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CpuUsed       float64 `protobuf:"fixed64,11,opt,name=cpuUsed,proto3" json:"cpuUsed,omitempty"`
	MemoryUsed    float64 `protobuf:"fixed64,12,opt,name=memoryUsed,proto3" json:"memoryUsed,omitempty"`
	BpmnProcesses uint64  `protobuf:"varint,21,opt,name=bpmnProcesses,proto3" json:"bpmnProcesses,omitempty"`
	BpmnEvents    uint64  `protobuf:"varint,22,opt,name=bpmnEvents,proto3" json:"bpmnEvents,omitempty"`
	BpmnTasks     uint64  `protobuf:"varint,23,opt,name=bpmnTasks,proto3" json:"bpmnTasks,omitempty"`
	State         State   `protobuf:"varint,101,opt,name=state,proto3,enum=olivepb.State" json:"state,omitempty"`
	Error         string  `protobuf:"bytes,102,opt,name=error,proto3" json:"error,omitempty"`
	Timestamp     int64   `protobuf:"varint,103,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *RunnerStatistics) Reset() {
	*x = RunnerStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerStatistics) ProtoMessage() {}

func (x *RunnerStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerStatistics.ProtoReflect.Descriptor instead.
func (*RunnerStatistics) Descriptor() ([]byte, []int) {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP(), []int{6}
}

func (x *RunnerStatistics) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RunnerStatistics) GetCpuUsed() float64 {
	if x != nil {
		return x.CpuUsed
	}
	return 0
}

func (x *RunnerStatistics) GetMemoryUsed() float64 {
	if x != nil {
		return x.MemoryUsed
	}
	return 0
}

func (x *RunnerStatistics) GetBpmnProcesses() uint64 {
	if x != nil {
		return x.BpmnProcesses
	}
	return 0
}

func (x *RunnerStatistics) GetBpmnEvents() uint64 {
	if x != nil {
		return x.BpmnEvents
	}
	return 0
}

func (x *RunnerStatistics) GetBpmnTasks() uint64 {
	if x != nil {
		return x.BpmnTasks
	}
	return 0
}

func (x *RunnerStatistics) GetState() State {
	if x != nil {
		return x.State
	}
	return State_UnKnown
}

func (x *RunnerStatistics) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RunnerStatistics) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Definition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *OliveHeader `protobuf:"bytes,100,opt,name=header,proto3" json:"header,omitempty"`
	Id      string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Content []byte       `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Version uint64       `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Definition) Reset() {
	*x = Definition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Definition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Definition) ProtoMessage() {}

func (x *Definition) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Definition.ProtoReflect.Descriptor instead.
func (*Definition) Descriptor() ([]byte, []int) {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP(), []int{7}
}

func (x *Definition) GetHeader() *OliveHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Definition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Definition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Definition) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Definition) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type BpmnArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Headers     map[string]string `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Properties  map[string][]byte `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DataObjects map[string][]byte `protobuf:"bytes,3,rep,name=dataObjects,proto3" json:"dataObjects,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BpmnArgs) Reset() {
	*x = BpmnArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BpmnArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BpmnArgs) ProtoMessage() {}

func (x *BpmnArgs) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BpmnArgs.ProtoReflect.Descriptor instead.
func (*BpmnArgs) Descriptor() ([]byte, []int) {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP(), []int{8}
}

func (x *BpmnArgs) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *BpmnArgs) GetProperties() map[string][]byte {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *BpmnArgs) GetDataObjects() map[string][]byte {
	if x != nil {
		return x.DataObjects
	}
	return nil
}

type ProcessContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Properties  map[string][]byte `protobuf:"bytes,1,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DataObjects map[string][]byte `protobuf:"bytes,2,rep,name=dataObjects,proto3" json:"dataObjects,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Variables   map[string][]byte `protobuf:"bytes,3,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ProcessContext) Reset() {
	*x = ProcessContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessContext) ProtoMessage() {}

func (x *ProcessContext) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessContext.ProtoReflect.Descriptor instead.
func (*ProcessContext) Descriptor() ([]byte, []int) {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP(), []int{9}
}

func (x *ProcessContext) GetProperties() map[string][]byte {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *ProcessContext) GetDataObjects() map[string][]byte {
	if x != nil {
		return x.DataObjects
	}
	return nil
}

func (x *ProcessContext) GetVariables() map[string][]byte {
	if x != nil {
		return x.Variables
	}
	return nil
}

type ProcessInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DefinitionsId      string                   `protobuf:"bytes,3,opt,name=definitionsId,proto3" json:"definitionsId,omitempty"`
	DefinitionsVersion uint64                   `protobuf:"varint,4,opt,name=definitionsVersion,proto3" json:"definitionsVersion,omitempty"`
	DefinitionsProcess string                   `protobuf:"bytes,5,opt,name=definitionsProcess,proto3" json:"definitionsProcess,omitempty"`
	DefinitionsContent []byte                   `protobuf:"bytes,6,opt,name=definitionsContent,proto3" json:"definitionsContent,omitempty"`
	Args               *BpmnArgs                `protobuf:"bytes,7,opt,name=args,proto3" json:"args,omitempty"`
	Context            *ProcessContext          `protobuf:"bytes,15,opt,name=context,proto3" json:"context,omitempty"`
	FlowNodes          []string                 `protobuf:"bytes,16,rep,name=flowNodes,proto3" json:"flowNodes,omitempty"`
	FlowNodeStatMap    map[string]*FlowNodeStat `protobuf:"bytes,17,rep,name=flowNodeStatMap,proto3" json:"flowNodeStatMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Attempts           int32                    `protobuf:"varint,18,opt,name=attempts,proto3" json:"attempts,omitempty"`
	StartTime          int64                    `protobuf:"varint,19,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime            int64                    `protobuf:"varint,20,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Status             ProcessStatus            `protobuf:"varint,21,opt,name=status,proto3,enum=olivepb.ProcessStatus" json:"status,omitempty"`
	Message            string                   `protobuf:"bytes,22,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ProcessInstance) Reset() {
	*x = ProcessInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInstance) ProtoMessage() {}

func (x *ProcessInstance) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInstance.ProtoReflect.Descriptor instead.
func (*ProcessInstance) Descriptor() ([]byte, []int) {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP(), []int{10}
}

func (x *ProcessInstance) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProcessInstance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcessInstance) GetDefinitionsId() string {
	if x != nil {
		return x.DefinitionsId
	}
	return ""
}

func (x *ProcessInstance) GetDefinitionsVersion() uint64 {
	if x != nil {
		return x.DefinitionsVersion
	}
	return 0
}

func (x *ProcessInstance) GetDefinitionsProcess() string {
	if x != nil {
		return x.DefinitionsProcess
	}
	return ""
}

func (x *ProcessInstance) GetDefinitionsContent() []byte {
	if x != nil {
		return x.DefinitionsContent
	}
	return nil
}

func (x *ProcessInstance) GetArgs() *BpmnArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ProcessInstance) GetContext() *ProcessContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ProcessInstance) GetFlowNodes() []string {
	if x != nil {
		return x.FlowNodes
	}
	return nil
}

func (x *ProcessInstance) GetFlowNodeStatMap() map[string]*FlowNodeStat {
	if x != nil {
		return x.FlowNodeStatMap
	}
	return nil
}

func (x *ProcessInstance) GetAttempts() int32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *ProcessInstance) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ProcessInstance) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ProcessInstance) GetStatus() ProcessStatus {
	if x != nil {
		return x.Status
	}
	return ProcessStatus_ProcessUnknown
}

func (x *ProcessInstance) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type FlowNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type FlowNodeType `protobuf:"varint,1,opt,name=type,proto3,enum=olivepb.FlowNodeType" json:"type,omitempty"`
	Id   string       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FlowNode) Reset() {
	*x = FlowNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowNode) ProtoMessage() {}

func (x *FlowNode) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowNode.ProtoReflect.Descriptor instead.
func (*FlowNode) Descriptor() ([]byte, []int) {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP(), []int{11}
}

func (x *FlowNode) GetType() FlowNodeType {
	if x != nil {
		return x.Type
	}
	return FlowNodeType_FlowNodeUnknown
}

func (x *FlowNode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type FlowNodeStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Context   *ProcessContext `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
	Retries   int32           `protobuf:"varint,4,opt,name=retries,proto3" json:"retries,omitempty"`
	Message   string          `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	StartTime int64           `protobuf:"varint,11,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   int64           `protobuf:"varint,12,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *FlowNodeStat) Reset() {
	*x = FlowNodeStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowNodeStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowNodeStat) ProtoMessage() {}

func (x *FlowNodeStat) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowNodeStat.ProtoReflect.Descriptor instead.
func (*FlowNodeStat) Descriptor() ([]byte, []int) {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP(), []int{12}
}

func (x *FlowNodeStat) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FlowNodeStat) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FlowNodeStat) GetContext() *ProcessContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *FlowNodeStat) GetRetries() int32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

func (x *FlowNodeStat) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FlowNodeStat) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *FlowNodeStat) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

var File_github_com_olive_io_olive_api_olivepb_internal_proto protoreflect.FileDescriptor

var file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDesc = []byte{
	0x0a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x6c, 0x69,
	0x76, 0x65, 0x2d, 0x69, 0x6f, 0x2f, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6f, 0x6c, 0x69, 0x76, 0x65, 0x70, 0x62, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x70, 0x62, 0x1a,
	0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x6c, 0x69, 0x76,
	0x65, 0x2d, 0x69, 0x6f, 0x2f, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x70, 0x62, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x37, 0x0a, 0x0b, 0x4f, 0x6c,
	0x69, 0x76, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x72, 0x65, 0x76, 0x22, 0x69, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x61, 0x66, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x22, 0x86,
	0x01, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x65, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x65, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x55, 0x52, 0x4c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x52, 0x4c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x22, 0x6b, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x70, 0x62,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x22, 0x58, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x61, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x52, 0x4c, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x52,
	0x4c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x73, 0x22, 0xd8,
	0x01, 0x0a, 0x06, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x55, 0x52, 0x4c, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x4d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x4d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x9a, 0x02, 0x0a, 0x10, 0x52, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x70, 0x75, 0x55, 0x73, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x63, 0x70, 0x75, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x55, 0x73, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x70, 0x6d, 0x6e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x62, 0x70, 0x6d, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x62, 0x70, 0x6d, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x62, 0x70, 0x6d, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x62, 0x70, 0x6d, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x24, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6f, 0x6c,
	0x69, 0x76, 0x65, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x92, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x70, 0x62, 0x2e,
	0x4f, 0x6c, 0x69, 0x76, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x03, 0x0a, 0x08,
	0x42, 0x70, 0x6d, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x6c, 0x69, 0x76,
	0x65, 0x70, 0x62, 0x2e, 0x42, 0x70, 0x6d, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x70, 0x62,
	0x2e, 0x42, 0x70, 0x6d, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x6c, 0x69,
	0x76, 0x65, 0x70, 0x62, 0x2e, 0x42, 0x70, 0x6d, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x64, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa8, 0x03, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6f, 0x6c, 0x69, 0x76, 0x65, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x70,
	0x62, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x44,
	0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xb5, 0x05, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x2e, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6f, 0x6c, 0x69, 0x76, 0x65, 0x70, 0x62, 0x2e, 0x42, 0x70, 0x6d, 0x6e, 0x41, 0x72, 0x67, 0x73,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x70,
	0x62, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6c, 0x6f,
	0x77, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6c,
	0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x0f, 0x66, 0x6c, 0x6f, 0x77, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0f, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x4d, 0x61, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x70, 0x62, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x59,
	0x0a, 0x14, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x70,
	0x62, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x45, 0x0a, 0x08, 0x46, 0x6c, 0x6f,
	0x77, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x70, 0x62, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xd1, 0x01, 0x0a, 0x0c, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x70, 0x62,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x2a, 0x38, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x10, 0x03, 0x2a, 0xba,
	0x02, 0x0a, 0x0c, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x13, 0x0a, 0x0f, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x10, 0x64, 0x12,
	0x0c, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x10, 0x65, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x10, 0x66, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x10, 0x67, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x10, 0x68, 0x12, 0x0f, 0x0a, 0x0b,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x10, 0x69, 0x12, 0x0e, 0x0a,
	0x0a, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x10, 0x6a, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x10, 0x6b, 0x12,
	0x0e, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x10, 0x6c, 0x12,
	0x16, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x64, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x10, 0xc8, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x10, 0xc9, 0x01, 0x12, 0x15, 0x0a,
	0x10, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x10, 0xca, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76,
	0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x10, 0xcb, 0x01, 0x2a, 0x5c, 0x0a, 0x0d, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x6b, 0x10, 0x04, 0x12,
	0x08, 0x0a, 0x04, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x05, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x6f,
	0x2f, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x6c, 0x69, 0x76, 0x65,
	0x70, 0x62, 0x3b, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescOnce sync.Once
	file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescData = file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDesc
)

func file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP() []byte {
	file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescOnce.Do(func() {
		file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescData)
	})
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescData
}

var file_github_com_olive_io_olive_api_olivepb_internal_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_github_com_olive_io_olive_api_olivepb_internal_proto_goTypes = []interface{}{
	(State)(0),               // 0: olivepb.State
	(FlowNodeType)(0),        // 1: olivepb.FlowNodeType
	(ProcessStatus)(0),       // 2: olivepb.ProcessStatus
	(*OliveHeader)(nil),      // 3: olivepb.OliveHeader
	(*ResponseHeader)(nil),   // 4: olivepb.ResponseHeader
	(*Member)(nil),           // 5: olivepb.Member
	(*Meta)(nil),             // 6: olivepb.Meta
	(*MetaMember)(nil),       // 7: olivepb.MetaMember
	(*Runner)(nil),           // 8: olivepb.Runner
	(*RunnerStatistics)(nil), // 9: olivepb.RunnerStatistics
	(*Definition)(nil),       // 10: olivepb.Definition
	(*BpmnArgs)(nil),         // 11: olivepb.BpmnArgs
	(*ProcessContext)(nil),   // 12: olivepb.ProcessContext
	(*ProcessInstance)(nil),  // 13: olivepb.ProcessInstance
	(*FlowNode)(nil),         // 14: olivepb.FlowNode
	(*FlowNodeStat)(nil),     // 15: olivepb.FlowNodeStat
	nil,                      // 16: olivepb.BpmnArgs.HeadersEntry
	nil,                      // 17: olivepb.BpmnArgs.PropertiesEntry
	nil,                      // 18: olivepb.BpmnArgs.DataObjectsEntry
	nil,                      // 19: olivepb.ProcessContext.PropertiesEntry
	nil,                      // 20: olivepb.ProcessContext.DataObjectsEntry
	nil,                      // 21: olivepb.ProcessContext.VariablesEntry
	nil,                      // 22: olivepb.ProcessInstance.FlowNodeStatMapEntry
}
var file_github_com_olive_io_olive_api_olivepb_internal_proto_depIdxs = []int32{
	7,  // 0: olivepb.Meta.members:type_name -> olivepb.MetaMember
	0,  // 1: olivepb.RunnerStatistics.state:type_name -> olivepb.State
	3,  // 2: olivepb.Definition.header:type_name -> olivepb.OliveHeader
	16, // 3: olivepb.BpmnArgs.headers:type_name -> olivepb.BpmnArgs.HeadersEntry
	17, // 4: olivepb.BpmnArgs.properties:type_name -> olivepb.BpmnArgs.PropertiesEntry
	18, // 5: olivepb.BpmnArgs.dataObjects:type_name -> olivepb.BpmnArgs.DataObjectsEntry
	19, // 6: olivepb.ProcessContext.properties:type_name -> olivepb.ProcessContext.PropertiesEntry
	20, // 7: olivepb.ProcessContext.dataObjects:type_name -> olivepb.ProcessContext.DataObjectsEntry
	21, // 8: olivepb.ProcessContext.variables:type_name -> olivepb.ProcessContext.VariablesEntry
	11, // 9: olivepb.ProcessInstance.args:type_name -> olivepb.BpmnArgs
	12, // 10: olivepb.ProcessInstance.context:type_name -> olivepb.ProcessContext
	22, // 11: olivepb.ProcessInstance.flowNodeStatMap:type_name -> olivepb.ProcessInstance.FlowNodeStatMapEntry
	2,  // 12: olivepb.ProcessInstance.status:type_name -> olivepb.ProcessStatus
	1,  // 13: olivepb.FlowNode.type:type_name -> olivepb.FlowNodeType
	12, // 14: olivepb.FlowNodeStat.context:type_name -> olivepb.ProcessContext
	15, // 15: olivepb.ProcessInstance.FlowNodeStatMapEntry.value:type_name -> olivepb.FlowNodeStat
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_github_com_olive_io_olive_api_olivepb_internal_proto_init() }
func file_github_com_olive_io_olive_api_olivepb_internal_proto_init() {
	if File_github_com_olive_io_olive_api_olivepb_internal_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OliveHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Runner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Definition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BpmnArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowNodeStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_olive_io_olive_api_olivepb_internal_proto_goTypes,
		DependencyIndexes: file_github_com_olive_io_olive_api_olivepb_internal_proto_depIdxs,
		EnumInfos:         file_github_com_olive_io_olive_api_olivepb_internal_proto_enumTypes,
		MessageInfos:      file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes,
	}.Build()
	File_github_com_olive_io_olive_api_olivepb_internal_proto = out.File
	file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDesc = nil
	file_github_com_olive_io_olive_api_olivepb_internal_proto_goTypes = nil
	file_github_com_olive_io_olive_api_olivepb_internal_proto_depIdxs = nil
}
