//
//Copyright 2023 The olive Authors
//
//This program is offered under a commercial and under the AGPL license.
//For AGPL licensing, see below.
//
//AGPL licensing:
//This program is free software: you can redistribute it and/or modify
//it under the terms of the GNU Affero General Public License as published by
//the Free Software Foundation, either version 3 of the License, or
//(at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU Affero General Public License for more details.
//
//You should have received a copy of the GNU Affero General Public License
//along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.3
// source: github.com/olive-io/olive/api/olivepb/internal.proto

package olivepb

import (
	reflect "reflect"
	sync "sync"

	discoverypb "github.com/olive-io/olive/api/discoverypb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type State int32

const (
	State_UnKnown  State = 0
	State_Ready    State = 1
	State_NotReady State = 2
	State_Alarm    State = 3
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0: "UnKnown",
		1: "Ready",
		2: "NotReady",
		3: "Alarm",
	}
	State_value = map[string]int32{
		"UnKnown":  0,
		"Ready":    1,
		"NotReady": 2,
		"Alarm":    3,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_enumTypes[0].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_github_com_olive_io_olive_api_olivepb_internal_proto_enumTypes[0]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP(), []int{0}
}

type ProcessInstance_Status int32

const (
	ProcessInstance_Unknown ProcessInstance_Status = 0
	ProcessInstance_Waiting ProcessInstance_Status = 1
	ProcessInstance_Prepare ProcessInstance_Status = 2
	ProcessInstance_Running ProcessInstance_Status = 3
	ProcessInstance_Ok      ProcessInstance_Status = 4
	ProcessInstance_Fail    ProcessInstance_Status = 5
)

// Enum value maps for ProcessInstance_Status.
var (
	ProcessInstance_Status_name = map[int32]string{
		0: "Unknown",
		1: "Waiting",
		2: "Prepare",
		3: "Running",
		4: "Ok",
		5: "Fail",
	}
	ProcessInstance_Status_value = map[string]int32{
		"Unknown": 0,
		"Waiting": 1,
		"Prepare": 2,
		"Running": 3,
		"Ok":      4,
		"Fail":    5,
	}
)

func (x ProcessInstance_Status) Enum() *ProcessInstance_Status {
	p := new(ProcessInstance_Status)
	*p = x
	return p
}

func (x ProcessInstance_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessInstance_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_enumTypes[1].Descriptor()
}

func (ProcessInstance_Status) Type() protoreflect.EnumType {
	return &file_github_com_olive_io_olive_api_olivepb_internal_proto_enumTypes[1]
}

func (x ProcessInstance_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessInstance_Status.Descriptor instead.
func (ProcessInstance_Status) EnumDescriptor() ([]byte, []int) {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP(), []int{9, 0}
}

type ResponseHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cluster_id is the ID of the cluster which sent the response.
	ClusterId uint64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// member_id is the ID of the member which sent the response.
	MemberId uint64 `protobuf:"varint,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	// raft_term is the raft term when the request was applied.
	RaftTerm uint64 `protobuf:"varint,3,opt,name=raft_term,json=raftTerm,proto3" json:"raft_term,omitempty"`
}

func (x *ResponseHeader) Reset() {
	*x = ResponseHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseHeader) ProtoMessage() {}

func (x *ResponseHeader) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseHeader.ProtoReflect.Descriptor instead.
func (*ResponseHeader) Descriptor() ([]byte, []int) {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP(), []int{0}
}

func (x *ResponseHeader) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ResponseHeader) GetMemberId() uint64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *ResponseHeader) GetRaftTerm() uint64 {
	if x != nil {
		return x.RaftTerm
	}
	return 0
}

type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the member ID for this member.
	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// name is the human-readable name of the member. If the member is not started, the name will be an empty string.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// peerURLs is the list of URLs the member exposes to the cluster for communication.
	PeerURLs []string `protobuf:"bytes,3,rep,name=peerURLs,proto3" json:"peerURLs,omitempty"`
	// clientURLs is the list of URLs the member exposes to clients for communication. If the member is not started, clientURLs will be empty.
	ClientURLs []string `protobuf:"bytes,4,rep,name=clientURLs,proto3" json:"clientURLs,omitempty"`
	// isLearner indicates if the member is raft learner.
	IsLearner bool `protobuf:"varint,5,opt,name=isLearner,proto3" json:"isLearner,omitempty"`
}

func (x *Member) Reset() {
	*x = Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP(), []int{1}
}

func (x *Member) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Member) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Member) GetPeerURLs() []string {
	if x != nil {
		return x.PeerURLs
	}
	return nil
}

func (x *Member) GetClientURLs() []string {
	if x != nil {
		return x.ClientURLs
	}
	return nil
}

func (x *Member) GetIsLearner() bool {
	if x != nil {
		return x.IsLearner
	}
	return false
}

type Runner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ListenPeerURL   string `protobuf:"bytes,2,opt,name=listenPeerURL,proto3" json:"listenPeerURL,omitempty"`
	ListenClientURL string `protobuf:"bytes,3,opt,name=listenClientURL,proto3" json:"listenClientURL,omitempty"`
	HeartbeatMs     int64  `protobuf:"varint,4,opt,name=heartbeatMs,proto3" json:"heartbeatMs,omitempty"`
	Hostname        string `protobuf:"bytes,5,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Cpu             uint64 `protobuf:"varint,6,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory          uint64 `protobuf:"varint,7,opt,name=memory,proto3" json:"memory,omitempty"`
	Version         string `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Runner) Reset() {
	*x = Runner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Runner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Runner) ProtoMessage() {}

func (x *Runner) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Runner.ProtoReflect.Descriptor instead.
func (*Runner) Descriptor() ([]byte, []int) {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP(), []int{2}
}

func (x *Runner) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Runner) GetListenPeerURL() string {
	if x != nil {
		return x.ListenPeerURL
	}
	return ""
}

func (x *Runner) GetListenClientURL() string {
	if x != nil {
		return x.ListenClientURL
	}
	return ""
}

func (x *Runner) GetHeartbeatMs() int64 {
	if x != nil {
		return x.HeartbeatMs
	}
	return 0
}

func (x *Runner) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Runner) GetCpu() uint64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *Runner) GetMemory() uint64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *Runner) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type RunnerStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CpuPer        float64  `protobuf:"fixed64,11,opt,name=cpuPer,proto3" json:"cpuPer,omitempty"`
	MemoryPer     float64  `protobuf:"fixed64,12,opt,name=memoryPer,proto3" json:"memoryPer,omitempty"`
	Regions       []uint64 `protobuf:"varint,21,rep,packed,name=regions,proto3" json:"regions,omitempty"`
	Leaders       []string `protobuf:"bytes,22,rep,name=leaders,proto3" json:"leaders,omitempty"`
	Definitions   uint64   `protobuf:"varint,23,opt,name=definitions,proto3" json:"definitions,omitempty"`
	BpmnProcesses uint64   `protobuf:"varint,24,opt,name=bpmnProcesses,proto3" json:"bpmnProcesses,omitempty"`
	BpmnEvents    uint64   `protobuf:"varint,25,opt,name=bpmnEvents,proto3" json:"bpmnEvents,omitempty"`
	BpmnTasks     uint64   `protobuf:"varint,26,opt,name=bpmnTasks,proto3" json:"bpmnTasks,omitempty"`
	State         State    `protobuf:"varint,101,opt,name=state,proto3,enum=olivepb.State" json:"state,omitempty"`
	Error         string   `protobuf:"bytes,102,opt,name=error,proto3" json:"error,omitempty"`
	Timestamp     int64    `protobuf:"varint,103,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *RunnerStat) Reset() {
	*x = RunnerStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerStat) ProtoMessage() {}

func (x *RunnerStat) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerStat.ProtoReflect.Descriptor instead.
func (*RunnerStat) Descriptor() ([]byte, []int) {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP(), []int{3}
}

func (x *RunnerStat) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RunnerStat) GetCpuPer() float64 {
	if x != nil {
		return x.CpuPer
	}
	return 0
}

func (x *RunnerStat) GetMemoryPer() float64 {
	if x != nil {
		return x.MemoryPer
	}
	return 0
}

func (x *RunnerStat) GetRegions() []uint64 {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *RunnerStat) GetLeaders() []string {
	if x != nil {
		return x.Leaders
	}
	return nil
}

func (x *RunnerStat) GetDefinitions() uint64 {
	if x != nil {
		return x.Definitions
	}
	return 0
}

func (x *RunnerStat) GetBpmnProcesses() uint64 {
	if x != nil {
		return x.BpmnProcesses
	}
	return 0
}

func (x *RunnerStat) GetBpmnEvents() uint64 {
	if x != nil {
		return x.BpmnEvents
	}
	return 0
}

func (x *RunnerStat) GetBpmnTasks() uint64 {
	if x != nil {
		return x.BpmnTasks
	}
	return 0
}

func (x *RunnerStat) GetState() State {
	if x != nil {
		return x.State
	}
	return State_UnKnown
}

func (x *RunnerStat) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RunnerStat) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Region struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DeploymentId     uint64           `protobuf:"varint,3,opt,name=deploymentId,proto3" json:"deploymentId,omitempty"`
	Replicas         []*RegionReplica `protobuf:"bytes,5,rep,name=replicas,proto3" json:"replicas,omitempty"`
	ElectionRTT      uint64           `protobuf:"varint,6,opt,name=electionRTT,proto3" json:"electionRTT,omitempty"`
	HeartbeatRTT     uint64           `protobuf:"varint,7,opt,name=heartbeatRTT,proto3" json:"heartbeatRTT,omitempty"`
	Leader           uint64           `protobuf:"varint,8,opt,name=leader,proto3" json:"leader,omitempty"`
	Definitions      uint64           `protobuf:"varint,11,opt,name=definitions,proto3" json:"definitions,omitempty"`
	DefinitionsLimit uint64           `protobuf:"varint,13,opt,name=definitionsLimit,proto3" json:"definitionsLimit,omitempty"`
	Rev              int64            `protobuf:"varint,12,opt,name=rev,proto3" json:"rev,omitempty"`
	State            State            `protobuf:"varint,21,opt,name=state,proto3,enum=olivepb.State" json:"state,omitempty"`
	Error            string           `protobuf:"bytes,22,opt,name=error,proto3" json:"error,omitempty"`
	Timestamp        int64            `protobuf:"varint,23,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Region) Reset() {
	*x = Region{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Region) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Region) ProtoMessage() {}

func (x *Region) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Region.ProtoReflect.Descriptor instead.
func (*Region) Descriptor() ([]byte, []int) {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP(), []int{4}
}

func (x *Region) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Region) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Region) GetDeploymentId() uint64 {
	if x != nil {
		return x.DeploymentId
	}
	return 0
}

func (x *Region) GetReplicas() []*RegionReplica {
	if x != nil {
		return x.Replicas
	}
	return nil
}

func (x *Region) GetElectionRTT() uint64 {
	if x != nil {
		return x.ElectionRTT
	}
	return 0
}

func (x *Region) GetHeartbeatRTT() uint64 {
	if x != nil {
		return x.HeartbeatRTT
	}
	return 0
}

func (x *Region) GetLeader() uint64 {
	if x != nil {
		return x.Leader
	}
	return 0
}

func (x *Region) GetDefinitions() uint64 {
	if x != nil {
		return x.Definitions
	}
	return 0
}

func (x *Region) GetDefinitionsLimit() uint64 {
	if x != nil {
		return x.DefinitionsLimit
	}
	return 0
}

func (x *Region) GetRev() int64 {
	if x != nil {
		return x.Rev
	}
	return 0
}

func (x *Region) GetState() State {
	if x != nil {
		return x.State
	}
	return State_UnKnown
}

func (x *Region) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Region) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type RegionReplica struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Runner      uint64 `protobuf:"varint,2,opt,name=runner,proto3" json:"runner,omitempty"`
	Region      uint64 `protobuf:"varint,3,opt,name=region,proto3" json:"region,omitempty"`
	RaftAddress string `protobuf:"bytes,4,opt,name=raftAddress,proto3" json:"raftAddress,omitempty"`
	IsNonVoting bool   `protobuf:"varint,5,opt,name=isNonVoting,proto3" json:"isNonVoting,omitempty"`
	IsWitness   bool   `protobuf:"varint,6,opt,name=isWitness,proto3" json:"isWitness,omitempty"`
	IsJoin      bool   `protobuf:"varint,7,opt,name=isJoin,proto3" json:"isJoin,omitempty"`
}

func (x *RegionReplica) Reset() {
	*x = RegionReplica{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionReplica) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionReplica) ProtoMessage() {}

func (x *RegionReplica) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionReplica.ProtoReflect.Descriptor instead.
func (*RegionReplica) Descriptor() ([]byte, []int) {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP(), []int{5}
}

func (x *RegionReplica) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RegionReplica) GetRunner() uint64 {
	if x != nil {
		return x.Runner
	}
	return 0
}

func (x *RegionReplica) GetRegion() uint64 {
	if x != nil {
		return x.Region
	}
	return 0
}

func (x *RegionReplica) GetRaftAddress() string {
	if x != nil {
		return x.RaftAddress
	}
	return ""
}

func (x *RegionReplica) GetIsNonVoting() bool {
	if x != nil {
		return x.IsNonVoting
	}
	return false
}

func (x *RegionReplica) GetIsWitness() bool {
	if x != nil {
		return x.IsWitness
	}
	return false
}

func (x *RegionReplica) GetIsJoin() bool {
	if x != nil {
		return x.IsJoin
	}
	return false
}

type RegionStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Leader             uint64 `protobuf:"varint,2,opt,name=leader,proto3" json:"leader,omitempty"`
	Term               uint64 `protobuf:"varint,3,opt,name=term,proto3" json:"term,omitempty"`
	Replicas           int32  `protobuf:"varint,4,opt,name=replicas,proto3" json:"replicas,omitempty"`
	Definitions        uint64 `protobuf:"varint,11,opt,name=definitions,proto3" json:"definitions,omitempty"`
	RunningDefinitions uint64 `protobuf:"varint,12,opt,name=runningDefinitions,proto3" json:"runningDefinitions,omitempty"`
	BpmnProcesses      uint64 `protobuf:"varint,13,opt,name=bpmnProcesses,proto3" json:"bpmnProcesses,omitempty"`
	BpmnEvents         uint64 `protobuf:"varint,14,opt,name=bpmnEvents,proto3" json:"bpmnEvents,omitempty"`
	BpmnTasks          uint64 `protobuf:"varint,15,opt,name=bpmnTasks,proto3" json:"bpmnTasks,omitempty"`
	State              State  `protobuf:"varint,101,opt,name=state,proto3,enum=olivepb.State" json:"state,omitempty"`
	Error              string `protobuf:"bytes,102,opt,name=error,proto3" json:"error,omitempty"`
	Timestamp          int64  `protobuf:"varint,103,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *RegionStat) Reset() {
	*x = RegionStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionStat) ProtoMessage() {}

func (x *RegionStat) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionStat.ProtoReflect.Descriptor instead.
func (*RegionStat) Descriptor() ([]byte, []int) {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP(), []int{6}
}

func (x *RegionStat) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RegionStat) GetLeader() uint64 {
	if x != nil {
		return x.Leader
	}
	return 0
}

func (x *RegionStat) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *RegionStat) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *RegionStat) GetDefinitions() uint64 {
	if x != nil {
		return x.Definitions
	}
	return 0
}

func (x *RegionStat) GetRunningDefinitions() uint64 {
	if x != nil {
		return x.RunningDefinitions
	}
	return 0
}

func (x *RegionStat) GetBpmnProcesses() uint64 {
	if x != nil {
		return x.BpmnProcesses
	}
	return 0
}

func (x *RegionStat) GetBpmnEvents() uint64 {
	if x != nil {
		return x.BpmnEvents
	}
	return 0
}

func (x *RegionStat) GetBpmnTasks() uint64 {
	if x != nil {
		return x.BpmnTasks
	}
	return 0
}

func (x *RegionStat) GetState() State {
	if x != nil {
		return x.State
	}
	return State_UnKnown
}

func (x *RegionStat) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RegionStat) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Definition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Version uint64 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	// the id of olive region
	Region uint64 `protobuf:"varint,101,opt,name=region,proto3" json:"region,omitempty"`
	// the version from etcd's storage
	Rev int64 `protobuf:"varint,102,opt,name=rev,proto3" json:"rev,omitempty"`
}

func (x *Definition) Reset() {
	*x = Definition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Definition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Definition) ProtoMessage() {}

func (x *Definition) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Definition.ProtoReflect.Descriptor instead.
func (*Definition) Descriptor() ([]byte, []int) {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP(), []int{7}
}

func (x *Definition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Definition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Definition) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Definition) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Definition) GetRegion() uint64 {
	if x != nil {
		return x.Region
	}
	return 0
}

func (x *Definition) GetRev() int64 {
	if x != nil {
		return x.Rev
	}
	return 0
}

type DefinitionMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version  uint64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Region   uint64 `protobuf:"varint,3,opt,name=region,proto3" json:"region,omitempty"`
	StartRev int64  `protobuf:"varint,4,opt,name=startRev,proto3" json:"startRev,omitempty"`
	EndRev   int64  `protobuf:"varint,5,opt,name=endRev,proto3" json:"endRev,omitempty"`
}

func (x *DefinitionMeta) Reset() {
	*x = DefinitionMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefinitionMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefinitionMeta) ProtoMessage() {}

func (x *DefinitionMeta) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefinitionMeta.ProtoReflect.Descriptor instead.
func (*DefinitionMeta) Descriptor() ([]byte, []int) {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP(), []int{8}
}

func (x *DefinitionMeta) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DefinitionMeta) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DefinitionMeta) GetRegion() uint64 {
	if x != nil {
		return x.Region
	}
	return 0
}

func (x *DefinitionMeta) GetStartRev() int64 {
	if x != nil {
		return x.StartRev
	}
	return 0
}

func (x *DefinitionMeta) GetEndRev() int64 {
	if x != nil {
		return x.EndRev
	}
	return 0
}

type ProcessInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DefinitionsId      string                      `protobuf:"bytes,3,opt,name=definitionsId,proto3" json:"definitionsId,omitempty"`
	DefinitionsVersion uint64                      `protobuf:"varint,4,opt,name=definitionsVersion,proto3" json:"definitionsVersion,omitempty"`
	DefinitionsProcess string                      `protobuf:"bytes,5,opt,name=definitionsProcess,proto3" json:"definitionsProcess,omitempty"`
	DefinitionsContent string                      `protobuf:"bytes,6,opt,name=definitionsContent,proto3" json:"definitionsContent,omitempty"`
	Headers            map[string]string           `protobuf:"bytes,7,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Properties         map[string]*discoverypb.Box `protobuf:"bytes,8,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DataObjects        map[string]string           `protobuf:"bytes,9,rep,name=dataObjects,proto3" json:"dataObjects,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RunningState       *ProcessRunningState        `protobuf:"bytes,21,opt,name=runningState,proto3" json:"runningState,omitempty"`
	FlowNodes          map[string]*FlowNodeStat    `protobuf:"bytes,22,rep,name=flowNodes,proto3" json:"flowNodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Attempts           uint64                      `protobuf:"varint,23,opt,name=attempts,proto3" json:"attempts,omitempty"`
	CreationTime       int64                       `protobuf:"varint,24,opt,name=creationTime,proto3" json:"creationTime,omitempty"`
	StartTime          int64                       `protobuf:"varint,25,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime            int64                       `protobuf:"varint,26,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Status             ProcessInstance_Status      `protobuf:"varint,27,opt,name=status,proto3,enum=olivepb.ProcessInstance_Status" json:"status,omitempty"`
	Message            string                      `protobuf:"bytes,28,opt,name=message,proto3" json:"message,omitempty"`
	// the id of olive region
	Region uint64 `protobuf:"varint,101,opt,name=region,proto3" json:"region,omitempty"`
	// the version from etcd's storage
	Rev int64 `protobuf:"varint,102,opt,name=rev,proto3" json:"rev,omitempty"`
}

func (x *ProcessInstance) Reset() {
	*x = ProcessInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInstance) ProtoMessage() {}

func (x *ProcessInstance) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInstance.ProtoReflect.Descriptor instead.
func (*ProcessInstance) Descriptor() ([]byte, []int) {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP(), []int{9}
}

func (x *ProcessInstance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProcessInstance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcessInstance) GetDefinitionsId() string {
	if x != nil {
		return x.DefinitionsId
	}
	return ""
}

func (x *ProcessInstance) GetDefinitionsVersion() uint64 {
	if x != nil {
		return x.DefinitionsVersion
	}
	return 0
}

func (x *ProcessInstance) GetDefinitionsProcess() string {
	if x != nil {
		return x.DefinitionsProcess
	}
	return ""
}

func (x *ProcessInstance) GetDefinitionsContent() string {
	if x != nil {
		return x.DefinitionsContent
	}
	return ""
}

func (x *ProcessInstance) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *ProcessInstance) GetProperties() map[string]*discoverypb.Box {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *ProcessInstance) GetDataObjects() map[string]string {
	if x != nil {
		return x.DataObjects
	}
	return nil
}

func (x *ProcessInstance) GetRunningState() *ProcessRunningState {
	if x != nil {
		return x.RunningState
	}
	return nil
}

func (x *ProcessInstance) GetFlowNodes() map[string]*FlowNodeStat {
	if x != nil {
		return x.FlowNodes
	}
	return nil
}

func (x *ProcessInstance) GetAttempts() uint64 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *ProcessInstance) GetCreationTime() int64 {
	if x != nil {
		return x.CreationTime
	}
	return 0
}

func (x *ProcessInstance) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ProcessInstance) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ProcessInstance) GetStatus() ProcessInstance_Status {
	if x != nil {
		return x.Status
	}
	return ProcessInstance_Unknown
}

func (x *ProcessInstance) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ProcessInstance) GetRegion() uint64 {
	if x != nil {
		return x.Region
	}
	return 0
}

func (x *ProcessInstance) GetRev() int64 {
	if x != nil {
		return x.Rev
	}
	return 0
}

type ProcessRunningState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Properties  map[string]string `protobuf:"bytes,1,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DataObjects map[string]string `protobuf:"bytes,2,rep,name=dataObjects,proto3" json:"dataObjects,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Variables   map[string]string `protobuf:"bytes,3,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ProcessRunningState) Reset() {
	*x = ProcessRunningState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessRunningState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessRunningState) ProtoMessage() {}

func (x *ProcessRunningState) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessRunningState.ProtoReflect.Descriptor instead.
func (*ProcessRunningState) Descriptor() ([]byte, []int) {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP(), []int{10}
}

func (x *ProcessRunningState) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *ProcessRunningState) GetDataObjects() map[string]string {
	if x != nil {
		return x.DataObjects
	}
	return nil
}

func (x *ProcessRunningState) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

type FlowNodeStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Headers     map[string]string `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Properties  map[string]string `protobuf:"bytes,4,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DataObjects map[string]string `protobuf:"bytes,5,rep,name=dataObjects,proto3" json:"dataObjects,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StartTime   int64             `protobuf:"varint,11,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime     int64             `protobuf:"varint,12,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *FlowNodeStat) Reset() {
	*x = FlowNodeStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowNodeStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowNodeStat) ProtoMessage() {}

func (x *FlowNodeStat) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowNodeStat.ProtoReflect.Descriptor instead.
func (*FlowNodeStat) Descriptor() ([]byte, []int) {
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP(), []int{11}
}

func (x *FlowNodeStat) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FlowNodeStat) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FlowNodeStat) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *FlowNodeStat) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *FlowNodeStat) GetDataObjects() map[string]string {
	if x != nil {
		return x.DataObjects
	}
	return nil
}

func (x *FlowNodeStat) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *FlowNodeStat) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

var File_github_com_olive_io_olive_api_olivepb_internal_proto protoreflect.FileDescriptor

var file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDesc = []byte{
	0x0a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x6c, 0x69,
	0x76, 0x65, 0x2d, 0x69, 0x6f, 0x2f, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6f, 0x6c, 0x69, 0x76, 0x65, 0x70, 0x62, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x70, 0x62, 0x1a,
	0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x6c, 0x69, 0x76,
	0x65, 0x2d, 0x69, 0x6f, 0x2f, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x70, 0x62, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x69, 0x0a, 0x0e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x66, 0x74,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x61, 0x66,
	0x74, 0x54, 0x65, 0x72, 0x6d, 0x22, 0x86, 0x01, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x52, 0x4c, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x52, 0x4c, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x22, 0xea,
	0x01, 0x0a, 0x06, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x12,
	0x28, 0x0a, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55,
	0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x52, 0x4c, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x4d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x4d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe6, 0x02, 0x0a, 0x0a,
	0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x70,
	0x75, 0x50, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x63, 0x70, 0x75, 0x50,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x65, 0x72, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x62,
	0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x70, 0x6d, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x62, 0x70, 0x6d, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x70, 0x6d, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x62, 0x70, 0x6d, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6f, 0x6c, 0x69, 0x76,
	0x65, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0x9c, 0x03, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x6c, 0x69, 0x76,
	0x65, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x54, 0x54, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x54, 0x54, 0x12, 0x22, 0x0a,
	0x0c, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x54, 0x54, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x54,
	0x54, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x76, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x72, 0x65, 0x76, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6f, 0x6c, 0x69, 0x76, 0x65,
	0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0xc9, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x61, 0x66, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x61, 0x66, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x4e, 0x6f, 0x6e,
	0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x4e, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x57,
	0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4a, 0x6f, 0x69,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x22,
	0xf4, 0x02, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x70, 0x6d, 0x6e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x62, 0x70, 0x6d, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x62, 0x70, 0x6d, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x62, 0x70, 0x6d, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x62, 0x70, 0x6d, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x24, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6f, 0x6c,
	0x69, 0x76, 0x65, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x8e, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x76, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x72, 0x65, 0x76, 0x22, 0x86, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x76, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x76,
	0x22, 0xb3, 0x09, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x12, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x12, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2e,
	0x0a, 0x12, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3f,
	0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x48, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x70, 0x62, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0b, 0x64, 0x61, 0x74,
	0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f,
	0x6c, 0x69, 0x76, 0x65, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x6c,
	0x69, 0x76, 0x65, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x70,
	0x62, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x76, 0x18, 0x66, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x72, 0x65, 0x76, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x4f, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x70, 0x62, 0x2e, 0x42, 0x6f, 0x78, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x53, 0x0a, 0x0e, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x70, 0x62, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4e, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x6b, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x61, 0x69, 0x6c, 0x10, 0x05, 0x22, 0xbc, 0x03, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4c,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0b,
	0x64, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x49, 0x0a,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf4, 0x03, 0x0a, 0x0c, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x6c,
	0x69, 0x76, 0x65, 0x70, 0x62, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f,
	0x6c, 0x69, 0x76, 0x65, 0x70, 0x62, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x48, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x70, 0x62, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10,
	0x44, 0x61, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x38, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x10, 0x03, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x2d, 0x69, 0x6f, 0x2f, 0x6f, 0x6c,
	0x69, 0x76, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x6c, 0x69, 0x76, 0x65, 0x70, 0x62, 0x3b,
	0x6f, 0x6c, 0x69, 0x76, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescOnce sync.Once
	file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescData = file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDesc
)

func file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescGZIP() []byte {
	file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescOnce.Do(func() {
		file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescData)
	})
	return file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDescData
}

var file_github_com_olive_io_olive_api_olivepb_internal_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_github_com_olive_io_olive_api_olivepb_internal_proto_goTypes = []interface{}{
	(State)(0),                  // 0: olivepb.State
	(ProcessInstance_Status)(0), // 1: olivepb.ProcessInstance.Status
	(*ResponseHeader)(nil),      // 2: olivepb.ResponseHeader
	(*Member)(nil),              // 3: olivepb.Member
	(*Runner)(nil),              // 4: olivepb.Runner
	(*RunnerStat)(nil),          // 5: olivepb.RunnerStat
	(*Region)(nil),              // 6: olivepb.Region
	(*RegionReplica)(nil),       // 7: olivepb.RegionReplica
	(*RegionStat)(nil),          // 8: olivepb.RegionStat
	(*Definition)(nil),          // 9: olivepb.Definition
	(*DefinitionMeta)(nil),      // 10: olivepb.DefinitionMeta
	(*ProcessInstance)(nil),     // 11: olivepb.ProcessInstance
	(*ProcessRunningState)(nil), // 12: olivepb.ProcessRunningState
	(*FlowNodeStat)(nil),        // 13: olivepb.FlowNodeStat
	nil,                         // 14: olivepb.ProcessInstance.HeadersEntry
	nil,                         // 15: olivepb.ProcessInstance.PropertiesEntry
	nil,                         // 16: olivepb.ProcessInstance.DataObjectsEntry
	nil,                         // 17: olivepb.ProcessInstance.FlowNodesEntry
	nil,                         // 18: olivepb.ProcessRunningState.PropertiesEntry
	nil,                         // 19: olivepb.ProcessRunningState.DataObjectsEntry
	nil,                         // 20: olivepb.ProcessRunningState.VariablesEntry
	nil,                         // 21: olivepb.FlowNodeStat.HeadersEntry
	nil,                         // 22: olivepb.FlowNodeStat.PropertiesEntry
	nil,                         // 23: olivepb.FlowNodeStat.DataObjectsEntry
	(*discoverypb.Box)(nil),     // 24: discoverypb.Box
}
var file_github_com_olive_io_olive_api_olivepb_internal_proto_depIdxs = []int32{
	0,  // 0: olivepb.RunnerStat.state:type_name -> olivepb.State
	7,  // 1: olivepb.Region.replicas:type_name -> olivepb.RegionReplica
	0,  // 2: olivepb.Region.state:type_name -> olivepb.State
	0,  // 3: olivepb.RegionStat.state:type_name -> olivepb.State
	14, // 4: olivepb.ProcessInstance.headers:type_name -> olivepb.ProcessInstance.HeadersEntry
	15, // 5: olivepb.ProcessInstance.properties:type_name -> olivepb.ProcessInstance.PropertiesEntry
	16, // 6: olivepb.ProcessInstance.dataObjects:type_name -> olivepb.ProcessInstance.DataObjectsEntry
	12, // 7: olivepb.ProcessInstance.runningState:type_name -> olivepb.ProcessRunningState
	17, // 8: olivepb.ProcessInstance.flowNodes:type_name -> olivepb.ProcessInstance.FlowNodesEntry
	1,  // 9: olivepb.ProcessInstance.status:type_name -> olivepb.ProcessInstance.Status
	18, // 10: olivepb.ProcessRunningState.properties:type_name -> olivepb.ProcessRunningState.PropertiesEntry
	19, // 11: olivepb.ProcessRunningState.dataObjects:type_name -> olivepb.ProcessRunningState.DataObjectsEntry
	20, // 12: olivepb.ProcessRunningState.variables:type_name -> olivepb.ProcessRunningState.VariablesEntry
	21, // 13: olivepb.FlowNodeStat.headers:type_name -> olivepb.FlowNodeStat.HeadersEntry
	22, // 14: olivepb.FlowNodeStat.properties:type_name -> olivepb.FlowNodeStat.PropertiesEntry
	23, // 15: olivepb.FlowNodeStat.dataObjects:type_name -> olivepb.FlowNodeStat.DataObjectsEntry
	24, // 16: olivepb.ProcessInstance.PropertiesEntry.value:type_name -> discoverypb.Box
	13, // 17: olivepb.ProcessInstance.FlowNodesEntry.value:type_name -> olivepb.FlowNodeStat
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_github_com_olive_io_olive_api_olivepb_internal_proto_init() }
func file_github_com_olive_io_olive_api_olivepb_internal_proto_init() {
	if File_github_com_olive_io_olive_api_olivepb_internal_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Runner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Region); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionReplica); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Definition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefinitionMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessRunningState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowNodeStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_olive_io_olive_api_olivepb_internal_proto_goTypes,
		DependencyIndexes: file_github_com_olive_io_olive_api_olivepb_internal_proto_depIdxs,
		EnumInfos:         file_github_com_olive_io_olive_api_olivepb_internal_proto_enumTypes,
		MessageInfos:      file_github_com_olive_io_olive_api_olivepb_internal_proto_msgTypes,
	}.Build()
	File_github_com_olive_io_olive_api_olivepb_internal_proto = out.File
	file_github_com_olive_io_olive_api_olivepb_internal_proto_rawDesc = nil
	file_github_com_olive_io_olive_api_olivepb_internal_proto_goTypes = nil
	file_github_com_olive_io_olive_api_olivepb_internal_proto_depIdxs = nil
}
