// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: github.com/olive-io/olive/api/olivepb/rpc.proto

package olivepb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetaClusterRPCClient is the client API for MetaClusterRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaClusterRPCClient interface {
	// MemberAdd adds a member into the cluster.
	MemberAdd(ctx context.Context, in *MemberAddRequest, opts ...grpc.CallOption) (*MemberAddResponse, error)
	// MemberRemove removes an existing member from the cluster.
	MemberRemove(ctx context.Context, in *MemberRemoveRequest, opts ...grpc.CallOption) (*MemberRemoveResponse, error)
	// MemberUpdate updates the member configuration.
	MemberUpdate(ctx context.Context, in *MemberUpdateRequest, opts ...grpc.CallOption) (*MemberUpdateResponse, error)
	// MemberList lists all the members in the cluster.
	MemberList(ctx context.Context, in *MemberListRequest, opts ...grpc.CallOption) (*MemberListResponse, error)
	// MemberPromote promotes a member from raft learner (non-voting) to raft voting member.
	MemberPromote(ctx context.Context, in *MemberPromoteRequest, opts ...grpc.CallOption) (*MemberPromoteResponse, error)
}

type metaClusterRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaClusterRPCClient(cc grpc.ClientConnInterface) MetaClusterRPCClient {
	return &metaClusterRPCClient{cc}
}

func (c *metaClusterRPCClient) MemberAdd(ctx context.Context, in *MemberAddRequest, opts ...grpc.CallOption) (*MemberAddResponse, error) {
	out := new(MemberAddResponse)
	err := c.cc.Invoke(ctx, "/olivepb.MetaClusterRPC/MemberAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaClusterRPCClient) MemberRemove(ctx context.Context, in *MemberRemoveRequest, opts ...grpc.CallOption) (*MemberRemoveResponse, error) {
	out := new(MemberRemoveResponse)
	err := c.cc.Invoke(ctx, "/olivepb.MetaClusterRPC/MemberRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaClusterRPCClient) MemberUpdate(ctx context.Context, in *MemberUpdateRequest, opts ...grpc.CallOption) (*MemberUpdateResponse, error) {
	out := new(MemberUpdateResponse)
	err := c.cc.Invoke(ctx, "/olivepb.MetaClusterRPC/MemberUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaClusterRPCClient) MemberList(ctx context.Context, in *MemberListRequest, opts ...grpc.CallOption) (*MemberListResponse, error) {
	out := new(MemberListResponse)
	err := c.cc.Invoke(ctx, "/olivepb.MetaClusterRPC/MemberList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaClusterRPCClient) MemberPromote(ctx context.Context, in *MemberPromoteRequest, opts ...grpc.CallOption) (*MemberPromoteResponse, error) {
	out := new(MemberPromoteResponse)
	err := c.cc.Invoke(ctx, "/olivepb.MetaClusterRPC/MemberPromote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaClusterRPCServer is the server API for MetaClusterRPC service.
// All implementations must embed UnimplementedMetaClusterRPCServer
// for forward compatibility
type MetaClusterRPCServer interface {
	// MemberAdd adds a member into the cluster.
	MemberAdd(context.Context, *MemberAddRequest) (*MemberAddResponse, error)
	// MemberRemove removes an existing member from the cluster.
	MemberRemove(context.Context, *MemberRemoveRequest) (*MemberRemoveResponse, error)
	// MemberUpdate updates the member configuration.
	MemberUpdate(context.Context, *MemberUpdateRequest) (*MemberUpdateResponse, error)
	// MemberList lists all the members in the cluster.
	MemberList(context.Context, *MemberListRequest) (*MemberListResponse, error)
	// MemberPromote promotes a member from raft learner (non-voting) to raft voting member.
	MemberPromote(context.Context, *MemberPromoteRequest) (*MemberPromoteResponse, error)
	mustEmbedUnimplementedMetaClusterRPCServer()
}

// UnimplementedMetaClusterRPCServer must be embedded to have forward compatible implementations.
type UnimplementedMetaClusterRPCServer struct {
}

func (UnimplementedMetaClusterRPCServer) MemberAdd(context.Context, *MemberAddRequest) (*MemberAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberAdd not implemented")
}
func (UnimplementedMetaClusterRPCServer) MemberRemove(context.Context, *MemberRemoveRequest) (*MemberRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberRemove not implemented")
}
func (UnimplementedMetaClusterRPCServer) MemberUpdate(context.Context, *MemberUpdateRequest) (*MemberUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberUpdate not implemented")
}
func (UnimplementedMetaClusterRPCServer) MemberList(context.Context, *MemberListRequest) (*MemberListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberList not implemented")
}
func (UnimplementedMetaClusterRPCServer) MemberPromote(context.Context, *MemberPromoteRequest) (*MemberPromoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberPromote not implemented")
}
func (UnimplementedMetaClusterRPCServer) mustEmbedUnimplementedMetaClusterRPCServer() {}

// UnsafeMetaClusterRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaClusterRPCServer will
// result in compilation errors.
type UnsafeMetaClusterRPCServer interface {
	mustEmbedUnimplementedMetaClusterRPCServer()
}

func RegisterMetaClusterRPCServer(s grpc.ServiceRegistrar, srv MetaClusterRPCServer) {
	s.RegisterService(&MetaClusterRPC_ServiceDesc, srv)
}

func _MetaClusterRPC_MemberAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaClusterRPCServer).MemberAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.MetaClusterRPC/MemberAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaClusterRPCServer).MemberAdd(ctx, req.(*MemberAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaClusterRPC_MemberRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaClusterRPCServer).MemberRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.MetaClusterRPC/MemberRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaClusterRPCServer).MemberRemove(ctx, req.(*MemberRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaClusterRPC_MemberUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaClusterRPCServer).MemberUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.MetaClusterRPC/MemberUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaClusterRPCServer).MemberUpdate(ctx, req.(*MemberUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaClusterRPC_MemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaClusterRPCServer).MemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.MetaClusterRPC/MemberList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaClusterRPCServer).MemberList(ctx, req.(*MemberListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaClusterRPC_MemberPromote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberPromoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaClusterRPCServer).MemberPromote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.MetaClusterRPC/MemberPromote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaClusterRPCServer).MemberPromote(ctx, req.(*MemberPromoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetaClusterRPC_ServiceDesc is the grpc.ServiceDesc for MetaClusterRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaClusterRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "olivepb.MetaClusterRPC",
	HandlerType: (*MetaClusterRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MemberAdd",
			Handler:    _MetaClusterRPC_MemberAdd_Handler,
		},
		{
			MethodName: "MemberRemove",
			Handler:    _MetaClusterRPC_MemberRemove_Handler,
		},
		{
			MethodName: "MemberUpdate",
			Handler:    _MetaClusterRPC_MemberUpdate_Handler,
		},
		{
			MethodName: "MemberList",
			Handler:    _MetaClusterRPC_MemberList_Handler,
		},
		{
			MethodName: "MemberPromote",
			Handler:    _MetaClusterRPC_MemberPromote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/olive-io/olive/api/olivepb/rpc.proto",
}

// MetaRunnerRPCClient is the client API for MetaRunnerRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaRunnerRPCClient interface {
	ListRunner(ctx context.Context, in *ListRunnerRequest, opts ...grpc.CallOption) (*ListRunnerResponse, error)
	GetRunner(ctx context.Context, in *GetRunnerRequest, opts ...grpc.CallOption) (*GetRunnerResponse, error)
}

type metaRunnerRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaRunnerRPCClient(cc grpc.ClientConnInterface) MetaRunnerRPCClient {
	return &metaRunnerRPCClient{cc}
}

func (c *metaRunnerRPCClient) ListRunner(ctx context.Context, in *ListRunnerRequest, opts ...grpc.CallOption) (*ListRunnerResponse, error) {
	out := new(ListRunnerResponse)
	err := c.cc.Invoke(ctx, "/olivepb.MetaRunnerRPC/ListRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaRunnerRPCClient) GetRunner(ctx context.Context, in *GetRunnerRequest, opts ...grpc.CallOption) (*GetRunnerResponse, error) {
	out := new(GetRunnerResponse)
	err := c.cc.Invoke(ctx, "/olivepb.MetaRunnerRPC/GetRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaRunnerRPCServer is the server API for MetaRunnerRPC service.
// All implementations must embed UnimplementedMetaRunnerRPCServer
// for forward compatibility
type MetaRunnerRPCServer interface {
	ListRunner(context.Context, *ListRunnerRequest) (*ListRunnerResponse, error)
	GetRunner(context.Context, *GetRunnerRequest) (*GetRunnerResponse, error)
	mustEmbedUnimplementedMetaRunnerRPCServer()
}

// UnimplementedMetaRunnerRPCServer must be embedded to have forward compatible implementations.
type UnimplementedMetaRunnerRPCServer struct {
}

func (UnimplementedMetaRunnerRPCServer) ListRunner(context.Context, *ListRunnerRequest) (*ListRunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRunner not implemented")
}
func (UnimplementedMetaRunnerRPCServer) GetRunner(context.Context, *GetRunnerRequest) (*GetRunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunner not implemented")
}
func (UnimplementedMetaRunnerRPCServer) mustEmbedUnimplementedMetaRunnerRPCServer() {}

// UnsafeMetaRunnerRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaRunnerRPCServer will
// result in compilation errors.
type UnsafeMetaRunnerRPCServer interface {
	mustEmbedUnimplementedMetaRunnerRPCServer()
}

func RegisterMetaRunnerRPCServer(s grpc.ServiceRegistrar, srv MetaRunnerRPCServer) {
	s.RegisterService(&MetaRunnerRPC_ServiceDesc, srv)
}

func _MetaRunnerRPC_ListRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaRunnerRPCServer).ListRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.MetaRunnerRPC/ListRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaRunnerRPCServer).ListRunner(ctx, req.(*ListRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaRunnerRPC_GetRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaRunnerRPCServer).GetRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.MetaRunnerRPC/GetRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaRunnerRPCServer).GetRunner(ctx, req.(*GetRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetaRunnerRPC_ServiceDesc is the grpc.ServiceDesc for MetaRunnerRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaRunnerRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "olivepb.MetaRunnerRPC",
	HandlerType: (*MetaRunnerRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRunner",
			Handler:    _MetaRunnerRPC_ListRunner_Handler,
		},
		{
			MethodName: "GetRunner",
			Handler:    _MetaRunnerRPC_GetRunner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/olive-io/olive/api/olivepb/rpc.proto",
}

// MetaRegionRPCClient is the client API for MetaRegionRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaRegionRPCClient interface {
	ListRegion(ctx context.Context, in *ListRegionRequest, opts ...grpc.CallOption) (*ListRegionResponse, error)
	GetRegion(ctx context.Context, in *GetRegionRequest, opts ...grpc.CallOption) (*GetRegionResponse, error)
}

type metaRegionRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaRegionRPCClient(cc grpc.ClientConnInterface) MetaRegionRPCClient {
	return &metaRegionRPCClient{cc}
}

func (c *metaRegionRPCClient) ListRegion(ctx context.Context, in *ListRegionRequest, opts ...grpc.CallOption) (*ListRegionResponse, error) {
	out := new(ListRegionResponse)
	err := c.cc.Invoke(ctx, "/olivepb.MetaRegionRPC/ListRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaRegionRPCClient) GetRegion(ctx context.Context, in *GetRegionRequest, opts ...grpc.CallOption) (*GetRegionResponse, error) {
	out := new(GetRegionResponse)
	err := c.cc.Invoke(ctx, "/olivepb.MetaRegionRPC/GetRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaRegionRPCServer is the server API for MetaRegionRPC service.
// All implementations must embed UnimplementedMetaRegionRPCServer
// for forward compatibility
type MetaRegionRPCServer interface {
	ListRegion(context.Context, *ListRegionRequest) (*ListRegionResponse, error)
	GetRegion(context.Context, *GetRegionRequest) (*GetRegionResponse, error)
	mustEmbedUnimplementedMetaRegionRPCServer()
}

// UnimplementedMetaRegionRPCServer must be embedded to have forward compatible implementations.
type UnimplementedMetaRegionRPCServer struct {
}

func (UnimplementedMetaRegionRPCServer) ListRegion(context.Context, *ListRegionRequest) (*ListRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegion not implemented")
}
func (UnimplementedMetaRegionRPCServer) GetRegion(context.Context, *GetRegionRequest) (*GetRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegion not implemented")
}
func (UnimplementedMetaRegionRPCServer) mustEmbedUnimplementedMetaRegionRPCServer() {}

// UnsafeMetaRegionRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaRegionRPCServer will
// result in compilation errors.
type UnsafeMetaRegionRPCServer interface {
	mustEmbedUnimplementedMetaRegionRPCServer()
}

func RegisterMetaRegionRPCServer(s grpc.ServiceRegistrar, srv MetaRegionRPCServer) {
	s.RegisterService(&MetaRegionRPC_ServiceDesc, srv)
}

func _MetaRegionRPC_ListRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaRegionRPCServer).ListRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.MetaRegionRPC/ListRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaRegionRPCServer).ListRegion(ctx, req.(*ListRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaRegionRPC_GetRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaRegionRPCServer).GetRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.MetaRegionRPC/GetRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaRegionRPCServer).GetRegion(ctx, req.(*GetRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetaRegionRPC_ServiceDesc is the grpc.ServiceDesc for MetaRegionRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaRegionRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "olivepb.MetaRegionRPC",
	HandlerType: (*MetaRegionRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRegion",
			Handler:    _MetaRegionRPC_ListRegion_Handler,
		},
		{
			MethodName: "GetRegion",
			Handler:    _MetaRegionRPC_GetRegion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/olive-io/olive/api/olivepb/rpc.proto",
}

// AuthRPCClient is the client API for AuthRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthRPCClient interface {
	ListRole(ctx context.Context, in *ListRoleRequest, opts ...grpc.CallOption) (*ListRoleResponse, error)
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error)
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error)
	RemoveRole(ctx context.Context, in *RemoveRoleRequest, opts ...grpc.CallOption) (*RemoveRoleResponse, error)
	ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	RemoveUser(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*RemoveUserResponse, error)
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
}

type authRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthRPCClient(cc grpc.ClientConnInterface) AuthRPCClient {
	return &authRPCClient{cc}
}

func (c *authRPCClient) ListRole(ctx context.Context, in *ListRoleRequest, opts ...grpc.CallOption) (*ListRoleResponse, error) {
	out := new(ListRoleResponse)
	err := c.cc.Invoke(ctx, "/olivepb.AuthRPC/ListRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRPCClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error) {
	out := new(GetRoleResponse)
	err := c.cc.Invoke(ctx, "/olivepb.AuthRPC/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRPCClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error) {
	out := new(CreateRoleResponse)
	err := c.cc.Invoke(ctx, "/olivepb.AuthRPC/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRPCClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error) {
	out := new(UpdateRoleResponse)
	err := c.cc.Invoke(ctx, "/olivepb.AuthRPC/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRPCClient) RemoveRole(ctx context.Context, in *RemoveRoleRequest, opts ...grpc.CallOption) (*RemoveRoleResponse, error) {
	out := new(RemoveRoleResponse)
	err := c.cc.Invoke(ctx, "/olivepb.AuthRPC/RemoveRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRPCClient) ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error) {
	out := new(ListUserResponse)
	err := c.cc.Invoke(ctx, "/olivepb.AuthRPC/ListUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRPCClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/olivepb.AuthRPC/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRPCClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/olivepb.AuthRPC/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRPCClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/olivepb.AuthRPC/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRPCClient) RemoveUser(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*RemoveUserResponse, error) {
	out := new(RemoveUserResponse)
	err := c.cc.Invoke(ctx, "/olivepb.AuthRPC/RemoveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRPCClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := c.cc.Invoke(ctx, "/olivepb.AuthRPC/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthRPCServer is the server API for AuthRPC service.
// All implementations must embed UnimplementedAuthRPCServer
// for forward compatibility
type AuthRPCServer interface {
	ListRole(context.Context, *ListRoleRequest) (*ListRoleResponse, error)
	GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error)
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error)
	RemoveRole(context.Context, *RemoveRoleRequest) (*RemoveRoleResponse, error)
	ListUser(context.Context, *ListUserRequest) (*ListUserResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	RemoveUser(context.Context, *RemoveUserRequest) (*RemoveUserResponse, error)
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
	mustEmbedUnimplementedAuthRPCServer()
}

// UnimplementedAuthRPCServer must be embedded to have forward compatible implementations.
type UnimplementedAuthRPCServer struct {
}

func (UnimplementedAuthRPCServer) ListRole(context.Context, *ListRoleRequest) (*ListRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRole not implemented")
}
func (UnimplementedAuthRPCServer) GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedAuthRPCServer) CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedAuthRPCServer) UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedAuthRPCServer) RemoveRole(context.Context, *RemoveRoleRequest) (*RemoveRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRole not implemented")
}
func (UnimplementedAuthRPCServer) ListUser(context.Context, *ListUserRequest) (*ListUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedAuthRPCServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAuthRPCServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAuthRPCServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedAuthRPCServer) RemoveUser(context.Context, *RemoveUserRequest) (*RemoveUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (UnimplementedAuthRPCServer) Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedAuthRPCServer) mustEmbedUnimplementedAuthRPCServer() {}

// UnsafeAuthRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthRPCServer will
// result in compilation errors.
type UnsafeAuthRPCServer interface {
	mustEmbedUnimplementedAuthRPCServer()
}

func RegisterAuthRPCServer(s grpc.ServiceRegistrar, srv AuthRPCServer) {
	s.RegisterService(&AuthRPC_ServiceDesc, srv)
}

func _AuthRPC_ListRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRPCServer).ListRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.AuthRPC/ListRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRPCServer).ListRole(ctx, req.(*ListRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRPC_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRPCServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.AuthRPC/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRPCServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRPC_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRPCServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.AuthRPC/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRPCServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRPC_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRPCServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.AuthRPC/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRPCServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRPC_RemoveRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRPCServer).RemoveRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.AuthRPC/RemoveRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRPCServer).RemoveRole(ctx, req.(*RemoveRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRPC_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRPCServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.AuthRPC/ListUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRPCServer).ListUser(ctx, req.(*ListUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRPC_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRPCServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.AuthRPC/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRPCServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRPC_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRPCServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.AuthRPC/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRPCServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRPC_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRPCServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.AuthRPC/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRPCServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRPC_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRPCServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.AuthRPC/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRPCServer).RemoveUser(ctx, req.(*RemoveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRPC_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRPCServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.AuthRPC/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRPCServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthRPC_ServiceDesc is the grpc.ServiceDesc for AuthRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "olivepb.AuthRPC",
	HandlerType: (*AuthRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRole",
			Handler:    _AuthRPC_ListRole_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _AuthRPC_GetRole_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _AuthRPC_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _AuthRPC_UpdateRole_Handler,
		},
		{
			MethodName: "RemoveRole",
			Handler:    _AuthRPC_RemoveRole_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _AuthRPC_ListUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _AuthRPC_GetUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _AuthRPC_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _AuthRPC_UpdateUser_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _AuthRPC_RemoveUser_Handler,
		},
		{
			MethodName: "Authenticate",
			Handler:    _AuthRPC_Authenticate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/olive-io/olive/api/olivepb/rpc.proto",
}

// RbacRPCClient is the client API for RbacRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RbacRPCClient interface {
	ListPolicy(ctx context.Context, in *ListPolicyRequest, opts ...grpc.CallOption) (*ListPolicyResponse, error)
	AddPolicy(ctx context.Context, in *AddPolicyRequest, opts ...grpc.CallOption) (*AddPolicyResponse, error)
	RemovePolicy(ctx context.Context, in *RemovePolicyRequest, opts ...grpc.CallOption) (*RemovePolicyResponse, error)
	AddGroupPolicy(ctx context.Context, in *AddGroupPolicyRequest, opts ...grpc.CallOption) (*AddGroupPolicyResponse, error)
	RemoveGroupPolicy(ctx context.Context, in *RemoveGroupPolicyRequest, opts ...grpc.CallOption) (*RemoveGroupPolicyResponse, error)
	Admit(ctx context.Context, in *AdmitRequest, opts ...grpc.CallOption) (*AdmitResponse, error)
}

type rbacRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRbacRPCClient(cc grpc.ClientConnInterface) RbacRPCClient {
	return &rbacRPCClient{cc}
}

func (c *rbacRPCClient) ListPolicy(ctx context.Context, in *ListPolicyRequest, opts ...grpc.CallOption) (*ListPolicyResponse, error) {
	out := new(ListPolicyResponse)
	err := c.cc.Invoke(ctx, "/olivepb.RbacRPC/ListPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacRPCClient) AddPolicy(ctx context.Context, in *AddPolicyRequest, opts ...grpc.CallOption) (*AddPolicyResponse, error) {
	out := new(AddPolicyResponse)
	err := c.cc.Invoke(ctx, "/olivepb.RbacRPC/AddPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacRPCClient) RemovePolicy(ctx context.Context, in *RemovePolicyRequest, opts ...grpc.CallOption) (*RemovePolicyResponse, error) {
	out := new(RemovePolicyResponse)
	err := c.cc.Invoke(ctx, "/olivepb.RbacRPC/RemovePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacRPCClient) AddGroupPolicy(ctx context.Context, in *AddGroupPolicyRequest, opts ...grpc.CallOption) (*AddGroupPolicyResponse, error) {
	out := new(AddGroupPolicyResponse)
	err := c.cc.Invoke(ctx, "/olivepb.RbacRPC/AddGroupPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacRPCClient) RemoveGroupPolicy(ctx context.Context, in *RemoveGroupPolicyRequest, opts ...grpc.CallOption) (*RemoveGroupPolicyResponse, error) {
	out := new(RemoveGroupPolicyResponse)
	err := c.cc.Invoke(ctx, "/olivepb.RbacRPC/RemoveGroupPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacRPCClient) Admit(ctx context.Context, in *AdmitRequest, opts ...grpc.CallOption) (*AdmitResponse, error) {
	out := new(AdmitResponse)
	err := c.cc.Invoke(ctx, "/olivepb.RbacRPC/Admit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RbacRPCServer is the server API for RbacRPC service.
// All implementations must embed UnimplementedRbacRPCServer
// for forward compatibility
type RbacRPCServer interface {
	ListPolicy(context.Context, *ListPolicyRequest) (*ListPolicyResponse, error)
	AddPolicy(context.Context, *AddPolicyRequest) (*AddPolicyResponse, error)
	RemovePolicy(context.Context, *RemovePolicyRequest) (*RemovePolicyResponse, error)
	AddGroupPolicy(context.Context, *AddGroupPolicyRequest) (*AddGroupPolicyResponse, error)
	RemoveGroupPolicy(context.Context, *RemoveGroupPolicyRequest) (*RemoveGroupPolicyResponse, error)
	Admit(context.Context, *AdmitRequest) (*AdmitResponse, error)
	mustEmbedUnimplementedRbacRPCServer()
}

// UnimplementedRbacRPCServer must be embedded to have forward compatible implementations.
type UnimplementedRbacRPCServer struct {
}

func (UnimplementedRbacRPCServer) ListPolicy(context.Context, *ListPolicyRequest) (*ListPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicy not implemented")
}
func (UnimplementedRbacRPCServer) AddPolicy(context.Context, *AddPolicyRequest) (*AddPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPolicy not implemented")
}
func (UnimplementedRbacRPCServer) RemovePolicy(context.Context, *RemovePolicyRequest) (*RemovePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePolicy not implemented")
}
func (UnimplementedRbacRPCServer) AddGroupPolicy(context.Context, *AddGroupPolicyRequest) (*AddGroupPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroupPolicy not implemented")
}
func (UnimplementedRbacRPCServer) RemoveGroupPolicy(context.Context, *RemoveGroupPolicyRequest) (*RemoveGroupPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGroupPolicy not implemented")
}
func (UnimplementedRbacRPCServer) Admit(context.Context, *AdmitRequest) (*AdmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Admit not implemented")
}
func (UnimplementedRbacRPCServer) mustEmbedUnimplementedRbacRPCServer() {}

// UnsafeRbacRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RbacRPCServer will
// result in compilation errors.
type UnsafeRbacRPCServer interface {
	mustEmbedUnimplementedRbacRPCServer()
}

func RegisterRbacRPCServer(s grpc.ServiceRegistrar, srv RbacRPCServer) {
	s.RegisterService(&RbacRPC_ServiceDesc, srv)
}

func _RbacRPC_ListPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacRPCServer).ListPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.RbacRPC/ListPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacRPCServer).ListPolicy(ctx, req.(*ListPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacRPC_AddPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacRPCServer).AddPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.RbacRPC/AddPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacRPCServer).AddPolicy(ctx, req.(*AddPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacRPC_RemovePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacRPCServer).RemovePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.RbacRPC/RemovePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacRPCServer).RemovePolicy(ctx, req.(*RemovePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacRPC_AddGroupPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacRPCServer).AddGroupPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.RbacRPC/AddGroupPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacRPCServer).AddGroupPolicy(ctx, req.(*AddGroupPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacRPC_RemoveGroupPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGroupPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacRPCServer).RemoveGroupPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.RbacRPC/RemoveGroupPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacRPCServer).RemoveGroupPolicy(ctx, req.(*RemoveGroupPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RbacRPC_Admit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacRPCServer).Admit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.RbacRPC/Admit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacRPCServer).Admit(ctx, req.(*AdmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RbacRPC_ServiceDesc is the grpc.ServiceDesc for RbacRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RbacRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "olivepb.RbacRPC",
	HandlerType: (*RbacRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPolicy",
			Handler:    _RbacRPC_ListPolicy_Handler,
		},
		{
			MethodName: "AddPolicy",
			Handler:    _RbacRPC_AddPolicy_Handler,
		},
		{
			MethodName: "RemovePolicy",
			Handler:    _RbacRPC_RemovePolicy_Handler,
		},
		{
			MethodName: "AddGroupPolicy",
			Handler:    _RbacRPC_AddGroupPolicy_Handler,
		},
		{
			MethodName: "RemoveGroupPolicy",
			Handler:    _RbacRPC_RemoveGroupPolicy_Handler,
		},
		{
			MethodName: "Admit",
			Handler:    _RbacRPC_Admit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/olive-io/olive/api/olivepb/rpc.proto",
}

// BpmnRPCClient is the client API for BpmnRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BpmnRPCClient interface {
	ListDefinition(ctx context.Context, in *ListDefinitionRequest, opts ...grpc.CallOption) (*ListDefinitionResponse, error)
	DeployDefinition(ctx context.Context, in *DeployDefinitionRequest, opts ...grpc.CallOption) (*DeployDefinitionResponse, error)
	GetDefinition(ctx context.Context, in *GetDefinitionRequest, opts ...grpc.CallOption) (*GetDefinitionResponse, error)
	RemoveDefinition(ctx context.Context, in *RemoveDefinitionRequest, opts ...grpc.CallOption) (*RemoveDefinitionResponse, error)
	ExecuteDefinition(ctx context.Context, in *ExecuteDefinitionRequest, opts ...grpc.CallOption) (*ExecuteDefinitionResponse, error)
	ListProcessInstances(ctx context.Context, in *ListProcessInstancesRequest, opts ...grpc.CallOption) (*ListProcessInstancesResponse, error)
	GetProcessInstance(ctx context.Context, in *GetProcessInstanceRequest, opts ...grpc.CallOption) (*GetProcessInstanceResponse, error)
}

type bpmnRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewBpmnRPCClient(cc grpc.ClientConnInterface) BpmnRPCClient {
	return &bpmnRPCClient{cc}
}

func (c *bpmnRPCClient) ListDefinition(ctx context.Context, in *ListDefinitionRequest, opts ...grpc.CallOption) (*ListDefinitionResponse, error) {
	out := new(ListDefinitionResponse)
	err := c.cc.Invoke(ctx, "/olivepb.BpmnRPC/ListDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bpmnRPCClient) DeployDefinition(ctx context.Context, in *DeployDefinitionRequest, opts ...grpc.CallOption) (*DeployDefinitionResponse, error) {
	out := new(DeployDefinitionResponse)
	err := c.cc.Invoke(ctx, "/olivepb.BpmnRPC/DeployDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bpmnRPCClient) GetDefinition(ctx context.Context, in *GetDefinitionRequest, opts ...grpc.CallOption) (*GetDefinitionResponse, error) {
	out := new(GetDefinitionResponse)
	err := c.cc.Invoke(ctx, "/olivepb.BpmnRPC/GetDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bpmnRPCClient) RemoveDefinition(ctx context.Context, in *RemoveDefinitionRequest, opts ...grpc.CallOption) (*RemoveDefinitionResponse, error) {
	out := new(RemoveDefinitionResponse)
	err := c.cc.Invoke(ctx, "/olivepb.BpmnRPC/RemoveDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bpmnRPCClient) ExecuteDefinition(ctx context.Context, in *ExecuteDefinitionRequest, opts ...grpc.CallOption) (*ExecuteDefinitionResponse, error) {
	out := new(ExecuteDefinitionResponse)
	err := c.cc.Invoke(ctx, "/olivepb.BpmnRPC/ExecuteDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bpmnRPCClient) ListProcessInstances(ctx context.Context, in *ListProcessInstancesRequest, opts ...grpc.CallOption) (*ListProcessInstancesResponse, error) {
	out := new(ListProcessInstancesResponse)
	err := c.cc.Invoke(ctx, "/olivepb.BpmnRPC/ListProcessInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bpmnRPCClient) GetProcessInstance(ctx context.Context, in *GetProcessInstanceRequest, opts ...grpc.CallOption) (*GetProcessInstanceResponse, error) {
	out := new(GetProcessInstanceResponse)
	err := c.cc.Invoke(ctx, "/olivepb.BpmnRPC/GetProcessInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BpmnRPCServer is the server API for BpmnRPC service.
// All implementations must embed UnimplementedBpmnRPCServer
// for forward compatibility
type BpmnRPCServer interface {
	ListDefinition(context.Context, *ListDefinitionRequest) (*ListDefinitionResponse, error)
	DeployDefinition(context.Context, *DeployDefinitionRequest) (*DeployDefinitionResponse, error)
	GetDefinition(context.Context, *GetDefinitionRequest) (*GetDefinitionResponse, error)
	RemoveDefinition(context.Context, *RemoveDefinitionRequest) (*RemoveDefinitionResponse, error)
	ExecuteDefinition(context.Context, *ExecuteDefinitionRequest) (*ExecuteDefinitionResponse, error)
	ListProcessInstances(context.Context, *ListProcessInstancesRequest) (*ListProcessInstancesResponse, error)
	GetProcessInstance(context.Context, *GetProcessInstanceRequest) (*GetProcessInstanceResponse, error)
	mustEmbedUnimplementedBpmnRPCServer()
}

// UnimplementedBpmnRPCServer must be embedded to have forward compatible implementations.
type UnimplementedBpmnRPCServer struct {
}

func (UnimplementedBpmnRPCServer) ListDefinition(context.Context, *ListDefinitionRequest) (*ListDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDefinition not implemented")
}
func (UnimplementedBpmnRPCServer) DeployDefinition(context.Context, *DeployDefinitionRequest) (*DeployDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployDefinition not implemented")
}
func (UnimplementedBpmnRPCServer) GetDefinition(context.Context, *GetDefinitionRequest) (*GetDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefinition not implemented")
}
func (UnimplementedBpmnRPCServer) RemoveDefinition(context.Context, *RemoveDefinitionRequest) (*RemoveDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDefinition not implemented")
}
func (UnimplementedBpmnRPCServer) ExecuteDefinition(context.Context, *ExecuteDefinitionRequest) (*ExecuteDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteDefinition not implemented")
}
func (UnimplementedBpmnRPCServer) ListProcessInstances(context.Context, *ListProcessInstancesRequest) (*ListProcessInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProcessInstances not implemented")
}
func (UnimplementedBpmnRPCServer) GetProcessInstance(context.Context, *GetProcessInstanceRequest) (*GetProcessInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessInstance not implemented")
}
func (UnimplementedBpmnRPCServer) mustEmbedUnimplementedBpmnRPCServer() {}

// UnsafeBpmnRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BpmnRPCServer will
// result in compilation errors.
type UnsafeBpmnRPCServer interface {
	mustEmbedUnimplementedBpmnRPCServer()
}

func RegisterBpmnRPCServer(s grpc.ServiceRegistrar, srv BpmnRPCServer) {
	s.RegisterService(&BpmnRPC_ServiceDesc, srv)
}

func _BpmnRPC_ListDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BpmnRPCServer).ListDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.BpmnRPC/ListDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BpmnRPCServer).ListDefinition(ctx, req.(*ListDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BpmnRPC_DeployDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BpmnRPCServer).DeployDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.BpmnRPC/DeployDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BpmnRPCServer).DeployDefinition(ctx, req.(*DeployDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BpmnRPC_GetDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BpmnRPCServer).GetDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.BpmnRPC/GetDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BpmnRPCServer).GetDefinition(ctx, req.(*GetDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BpmnRPC_RemoveDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BpmnRPCServer).RemoveDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.BpmnRPC/RemoveDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BpmnRPCServer).RemoveDefinition(ctx, req.(*RemoveDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BpmnRPC_ExecuteDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BpmnRPCServer).ExecuteDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.BpmnRPC/ExecuteDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BpmnRPCServer).ExecuteDefinition(ctx, req.(*ExecuteDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BpmnRPC_ListProcessInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProcessInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BpmnRPCServer).ListProcessInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.BpmnRPC/ListProcessInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BpmnRPCServer).ListProcessInstances(ctx, req.(*ListProcessInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BpmnRPC_GetProcessInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BpmnRPCServer).GetProcessInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.BpmnRPC/GetProcessInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BpmnRPCServer).GetProcessInstance(ctx, req.(*GetProcessInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BpmnRPC_ServiceDesc is the grpc.ServiceDesc for BpmnRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BpmnRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "olivepb.BpmnRPC",
	HandlerType: (*BpmnRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDefinition",
			Handler:    _BpmnRPC_ListDefinition_Handler,
		},
		{
			MethodName: "DeployDefinition",
			Handler:    _BpmnRPC_DeployDefinition_Handler,
		},
		{
			MethodName: "GetDefinition",
			Handler:    _BpmnRPC_GetDefinition_Handler,
		},
		{
			MethodName: "RemoveDefinition",
			Handler:    _BpmnRPC_RemoveDefinition_Handler,
		},
		{
			MethodName: "ExecuteDefinition",
			Handler:    _BpmnRPC_ExecuteDefinition_Handler,
		},
		{
			MethodName: "ListProcessInstances",
			Handler:    _BpmnRPC_ListProcessInstances_Handler,
		},
		{
			MethodName: "GetProcessInstance",
			Handler:    _BpmnRPC_GetProcessInstance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/olive-io/olive/api/olivepb/rpc.proto",
}

// RunnerRPCClient is the client API for RunnerRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunnerRPCClient interface {
	GetProcessInstance(ctx context.Context, in *GetProcessInstanceRequest, opts ...grpc.CallOption) (*GetProcessInstanceResponse, error)
}

type runnerRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRunnerRPCClient(cc grpc.ClientConnInterface) RunnerRPCClient {
	return &runnerRPCClient{cc}
}

func (c *runnerRPCClient) GetProcessInstance(ctx context.Context, in *GetProcessInstanceRequest, opts ...grpc.CallOption) (*GetProcessInstanceResponse, error) {
	out := new(GetProcessInstanceResponse)
	err := c.cc.Invoke(ctx, "/olivepb.RunnerRPC/GetProcessInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunnerRPCServer is the server API for RunnerRPC service.
// All implementations must embed UnimplementedRunnerRPCServer
// for forward compatibility
type RunnerRPCServer interface {
	GetProcessInstance(context.Context, *GetProcessInstanceRequest) (*GetProcessInstanceResponse, error)
	mustEmbedUnimplementedRunnerRPCServer()
}

// UnimplementedRunnerRPCServer must be embedded to have forward compatible implementations.
type UnimplementedRunnerRPCServer struct {
}

func (UnimplementedRunnerRPCServer) GetProcessInstance(context.Context, *GetProcessInstanceRequest) (*GetProcessInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessInstance not implemented")
}
func (UnimplementedRunnerRPCServer) mustEmbedUnimplementedRunnerRPCServer() {}

// UnsafeRunnerRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunnerRPCServer will
// result in compilation errors.
type UnsafeRunnerRPCServer interface {
	mustEmbedUnimplementedRunnerRPCServer()
}

func RegisterRunnerRPCServer(s grpc.ServiceRegistrar, srv RunnerRPCServer) {
	s.RegisterService(&RunnerRPC_ServiceDesc, srv)
}

func _RunnerRPC_GetProcessInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerRPCServer).GetProcessInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.RunnerRPC/GetProcessInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerRPCServer).GetProcessInstance(ctx, req.(*GetProcessInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RunnerRPC_ServiceDesc is the grpc.ServiceDesc for RunnerRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RunnerRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "olivepb.RunnerRPC",
	HandlerType: (*RunnerRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProcessInstance",
			Handler:    _RunnerRPC_GetProcessInstance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/olive-io/olive/api/olivepb/rpc.proto",
}
