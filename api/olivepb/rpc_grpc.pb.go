// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: github.com/olive-io/olive/api/olivepb/rpc.proto

package olivepb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClusterClient is the client API for Cluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterClient interface {
	// MemberAdd adds a member into the cluster.
	MemberAdd(ctx context.Context, in *MemberAddRequest, opts ...grpc.CallOption) (*MemberAddResponse, error)
	// MemberRemove removes an existing member from the cluster.
	MemberRemove(ctx context.Context, in *MemberRemoveRequest, opts ...grpc.CallOption) (*MemberRemoveResponse, error)
	// MemberUpdate updates the member configuration.
	MemberUpdate(ctx context.Context, in *MemberUpdateRequest, opts ...grpc.CallOption) (*MemberUpdateResponse, error)
	// MemberList lists all the members in the cluster.
	MemberList(ctx context.Context, in *MemberListRequest, opts ...grpc.CallOption) (*MemberListResponse, error)
	// MemberPromote promotes a member from raft learner (non-voting) to raft voting member.
	MemberPromote(ctx context.Context, in *MemberPromoteRequest, opts ...grpc.CallOption) (*MemberPromoteResponse, error)
}

type clusterClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterClient(cc grpc.ClientConnInterface) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) MemberAdd(ctx context.Context, in *MemberAddRequest, opts ...grpc.CallOption) (*MemberAddResponse, error) {
	out := new(MemberAddResponse)
	err := c.cc.Invoke(ctx, "/olivepb.Cluster/MemberAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) MemberRemove(ctx context.Context, in *MemberRemoveRequest, opts ...grpc.CallOption) (*MemberRemoveResponse, error) {
	out := new(MemberRemoveResponse)
	err := c.cc.Invoke(ctx, "/olivepb.Cluster/MemberRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) MemberUpdate(ctx context.Context, in *MemberUpdateRequest, opts ...grpc.CallOption) (*MemberUpdateResponse, error) {
	out := new(MemberUpdateResponse)
	err := c.cc.Invoke(ctx, "/olivepb.Cluster/MemberUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) MemberList(ctx context.Context, in *MemberListRequest, opts ...grpc.CallOption) (*MemberListResponse, error) {
	out := new(MemberListResponse)
	err := c.cc.Invoke(ctx, "/olivepb.Cluster/MemberList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) MemberPromote(ctx context.Context, in *MemberPromoteRequest, opts ...grpc.CallOption) (*MemberPromoteResponse, error) {
	out := new(MemberPromoteResponse)
	err := c.cc.Invoke(ctx, "/olivepb.Cluster/MemberPromote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterServer is the server API for Cluster service.
// All implementations must embed UnimplementedClusterServer
// for forward compatibility
type ClusterServer interface {
	// MemberAdd adds a member into the cluster.
	MemberAdd(context.Context, *MemberAddRequest) (*MemberAddResponse, error)
	// MemberRemove removes an existing member from the cluster.
	MemberRemove(context.Context, *MemberRemoveRequest) (*MemberRemoveResponse, error)
	// MemberUpdate updates the member configuration.
	MemberUpdate(context.Context, *MemberUpdateRequest) (*MemberUpdateResponse, error)
	// MemberList lists all the members in the cluster.
	MemberList(context.Context, *MemberListRequest) (*MemberListResponse, error)
	// MemberPromote promotes a member from raft learner (non-voting) to raft voting member.
	MemberPromote(context.Context, *MemberPromoteRequest) (*MemberPromoteResponse, error)
	mustEmbedUnimplementedClusterServer()
}

// UnimplementedClusterServer must be embedded to have forward compatible implementations.
type UnimplementedClusterServer struct {
}

func (UnimplementedClusterServer) MemberAdd(context.Context, *MemberAddRequest) (*MemberAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberAdd not implemented")
}
func (UnimplementedClusterServer) MemberRemove(context.Context, *MemberRemoveRequest) (*MemberRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberRemove not implemented")
}
func (UnimplementedClusterServer) MemberUpdate(context.Context, *MemberUpdateRequest) (*MemberUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberUpdate not implemented")
}
func (UnimplementedClusterServer) MemberList(context.Context, *MemberListRequest) (*MemberListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberList not implemented")
}
func (UnimplementedClusterServer) MemberPromote(context.Context, *MemberPromoteRequest) (*MemberPromoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberPromote not implemented")
}
func (UnimplementedClusterServer) mustEmbedUnimplementedClusterServer() {}

// UnsafeClusterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterServer will
// result in compilation errors.
type UnsafeClusterServer interface {
	mustEmbedUnimplementedClusterServer()
}

func RegisterClusterServer(s grpc.ServiceRegistrar, srv ClusterServer) {
	s.RegisterService(&Cluster_ServiceDesc, srv)
}

func _Cluster_MemberAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).MemberAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.Cluster/MemberAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).MemberAdd(ctx, req.(*MemberAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_MemberRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).MemberRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.Cluster/MemberRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).MemberRemove(ctx, req.(*MemberRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_MemberUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).MemberUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.Cluster/MemberUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).MemberUpdate(ctx, req.(*MemberUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_MemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).MemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.Cluster/MemberList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).MemberList(ctx, req.(*MemberListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_MemberPromote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberPromoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).MemberPromote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.Cluster/MemberPromote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).MemberPromote(ctx, req.(*MemberPromoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cluster_ServiceDesc is the grpc.ServiceDesc for Cluster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cluster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "olivepb.Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MemberAdd",
			Handler:    _Cluster_MemberAdd_Handler,
		},
		{
			MethodName: "MemberRemove",
			Handler:    _Cluster_MemberRemove_Handler,
		},
		{
			MethodName: "MemberUpdate",
			Handler:    _Cluster_MemberUpdate_Handler,
		},
		{
			MethodName: "MemberList",
			Handler:    _Cluster_MemberList_Handler,
		},
		{
			MethodName: "MemberPromote",
			Handler:    _Cluster_MemberPromote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/olive-io/olive/api/olivepb/rpc.proto",
}

// MetaRunnerRPCClient is the client API for MetaRunnerRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaRunnerRPCClient interface {
	ListRunner(ctx context.Context, in *ListRunnerRequest, opts ...grpc.CallOption) (*ListRunnerResponse, error)
	GetRunner(ctx context.Context, in *GetRunnerRequest, opts ...grpc.CallOption) (*GetRunnerResponse, error)
}

type metaRunnerRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaRunnerRPCClient(cc grpc.ClientConnInterface) MetaRunnerRPCClient {
	return &metaRunnerRPCClient{cc}
}

func (c *metaRunnerRPCClient) ListRunner(ctx context.Context, in *ListRunnerRequest, opts ...grpc.CallOption) (*ListRunnerResponse, error) {
	out := new(ListRunnerResponse)
	err := c.cc.Invoke(ctx, "/olivepb.MetaRunnerRPC/ListRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaRunnerRPCClient) GetRunner(ctx context.Context, in *GetRunnerRequest, opts ...grpc.CallOption) (*GetRunnerResponse, error) {
	out := new(GetRunnerResponse)
	err := c.cc.Invoke(ctx, "/olivepb.MetaRunnerRPC/GetRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaRunnerRPCServer is the server API for MetaRunnerRPC service.
// All implementations must embed UnimplementedMetaRunnerRPCServer
// for forward compatibility
type MetaRunnerRPCServer interface {
	ListRunner(context.Context, *ListRunnerRequest) (*ListRunnerResponse, error)
	GetRunner(context.Context, *GetRunnerRequest) (*GetRunnerResponse, error)
	mustEmbedUnimplementedMetaRunnerRPCServer()
}

// UnimplementedMetaRunnerRPCServer must be embedded to have forward compatible implementations.
type UnimplementedMetaRunnerRPCServer struct {
}

func (UnimplementedMetaRunnerRPCServer) ListRunner(context.Context, *ListRunnerRequest) (*ListRunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRunner not implemented")
}
func (UnimplementedMetaRunnerRPCServer) GetRunner(context.Context, *GetRunnerRequest) (*GetRunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunner not implemented")
}
func (UnimplementedMetaRunnerRPCServer) mustEmbedUnimplementedMetaRunnerRPCServer() {}

// UnsafeMetaRunnerRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaRunnerRPCServer will
// result in compilation errors.
type UnsafeMetaRunnerRPCServer interface {
	mustEmbedUnimplementedMetaRunnerRPCServer()
}

func RegisterMetaRunnerRPCServer(s grpc.ServiceRegistrar, srv MetaRunnerRPCServer) {
	s.RegisterService(&MetaRunnerRPC_ServiceDesc, srv)
}

func _MetaRunnerRPC_ListRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaRunnerRPCServer).ListRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.MetaRunnerRPC/ListRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaRunnerRPCServer).ListRunner(ctx, req.(*ListRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaRunnerRPC_GetRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaRunnerRPCServer).GetRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.MetaRunnerRPC/GetRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaRunnerRPCServer).GetRunner(ctx, req.(*GetRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetaRunnerRPC_ServiceDesc is the grpc.ServiceDesc for MetaRunnerRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaRunnerRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "olivepb.MetaRunnerRPC",
	HandlerType: (*MetaRunnerRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRunner",
			Handler:    _MetaRunnerRPC_ListRunner_Handler,
		},
		{
			MethodName: "GetRunner",
			Handler:    _MetaRunnerRPC_GetRunner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/olive-io/olive/api/olivepb/rpc.proto",
}

// MetaRegionRPCClient is the client API for MetaRegionRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaRegionRPCClient interface {
	ListRegion(ctx context.Context, in *ListRegionRequest, opts ...grpc.CallOption) (*ListRegionResponse, error)
	GetRegion(ctx context.Context, in *GetRegionRequest, opts ...grpc.CallOption) (*GetRegionResponse, error)
}

type metaRegionRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaRegionRPCClient(cc grpc.ClientConnInterface) MetaRegionRPCClient {
	return &metaRegionRPCClient{cc}
}

func (c *metaRegionRPCClient) ListRegion(ctx context.Context, in *ListRegionRequest, opts ...grpc.CallOption) (*ListRegionResponse, error) {
	out := new(ListRegionResponse)
	err := c.cc.Invoke(ctx, "/olivepb.MetaRegionRPC/ListRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaRegionRPCClient) GetRegion(ctx context.Context, in *GetRegionRequest, opts ...grpc.CallOption) (*GetRegionResponse, error) {
	out := new(GetRegionResponse)
	err := c.cc.Invoke(ctx, "/olivepb.MetaRegionRPC/GetRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaRegionRPCServer is the server API for MetaRegionRPC service.
// All implementations must embed UnimplementedMetaRegionRPCServer
// for forward compatibility
type MetaRegionRPCServer interface {
	ListRegion(context.Context, *ListRegionRequest) (*ListRegionResponse, error)
	GetRegion(context.Context, *GetRegionRequest) (*GetRegionResponse, error)
	mustEmbedUnimplementedMetaRegionRPCServer()
}

// UnimplementedMetaRegionRPCServer must be embedded to have forward compatible implementations.
type UnimplementedMetaRegionRPCServer struct {
}

func (UnimplementedMetaRegionRPCServer) ListRegion(context.Context, *ListRegionRequest) (*ListRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegion not implemented")
}
func (UnimplementedMetaRegionRPCServer) GetRegion(context.Context, *GetRegionRequest) (*GetRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegion not implemented")
}
func (UnimplementedMetaRegionRPCServer) mustEmbedUnimplementedMetaRegionRPCServer() {}

// UnsafeMetaRegionRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaRegionRPCServer will
// result in compilation errors.
type UnsafeMetaRegionRPCServer interface {
	mustEmbedUnimplementedMetaRegionRPCServer()
}

func RegisterMetaRegionRPCServer(s grpc.ServiceRegistrar, srv MetaRegionRPCServer) {
	s.RegisterService(&MetaRegionRPC_ServiceDesc, srv)
}

func _MetaRegionRPC_ListRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaRegionRPCServer).ListRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.MetaRegionRPC/ListRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaRegionRPCServer).ListRegion(ctx, req.(*ListRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaRegionRPC_GetRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaRegionRPCServer).GetRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.MetaRegionRPC/GetRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaRegionRPCServer).GetRegion(ctx, req.(*GetRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetaRegionRPC_ServiceDesc is the grpc.ServiceDesc for MetaRegionRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaRegionRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "olivepb.MetaRegionRPC",
	HandlerType: (*MetaRegionRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRegion",
			Handler:    _MetaRegionRPC_ListRegion_Handler,
		},
		{
			MethodName: "GetRegion",
			Handler:    _MetaRegionRPC_GetRegion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/olive-io/olive/api/olivepb/rpc.proto",
}

// BpmnRPCClient is the client API for BpmnRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BpmnRPCClient interface {
	ListDefinition(ctx context.Context, in *ListDefinitionRequest, opts ...grpc.CallOption) (*ListDefinitionResponse, error)
	DeployDefinition(ctx context.Context, in *DeployDefinitionRequest, opts ...grpc.CallOption) (*DeployDefinitionResponse, error)
	GetDefinition(ctx context.Context, in *GetDefinitionRequest, opts ...grpc.CallOption) (*GetDefinitionResponse, error)
	RemoveDefinition(ctx context.Context, in *RemoveDefinitionRequest, opts ...grpc.CallOption) (*RemoveDefinitionResponse, error)
	ExecuteDefinition(ctx context.Context, in *ExecuteDefinitionRequest, opts ...grpc.CallOption) (*ExecuteDefinitionResponse, error)
	ListProcessInstances(ctx context.Context, in *ListProcessInstancesRequest, opts ...grpc.CallOption) (*ListProcessInstancesResponse, error)
	GetProcessInstance(ctx context.Context, in *GetProcessInstanceRequest, opts ...grpc.CallOption) (*GetProcessInstanceResponse, error)
}

type bpmnRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewBpmnRPCClient(cc grpc.ClientConnInterface) BpmnRPCClient {
	return &bpmnRPCClient{cc}
}

func (c *bpmnRPCClient) ListDefinition(ctx context.Context, in *ListDefinitionRequest, opts ...grpc.CallOption) (*ListDefinitionResponse, error) {
	out := new(ListDefinitionResponse)
	err := c.cc.Invoke(ctx, "/olivepb.BpmnRPC/ListDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bpmnRPCClient) DeployDefinition(ctx context.Context, in *DeployDefinitionRequest, opts ...grpc.CallOption) (*DeployDefinitionResponse, error) {
	out := new(DeployDefinitionResponse)
	err := c.cc.Invoke(ctx, "/olivepb.BpmnRPC/DeployDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bpmnRPCClient) GetDefinition(ctx context.Context, in *GetDefinitionRequest, opts ...grpc.CallOption) (*GetDefinitionResponse, error) {
	out := new(GetDefinitionResponse)
	err := c.cc.Invoke(ctx, "/olivepb.BpmnRPC/GetDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bpmnRPCClient) RemoveDefinition(ctx context.Context, in *RemoveDefinitionRequest, opts ...grpc.CallOption) (*RemoveDefinitionResponse, error) {
	out := new(RemoveDefinitionResponse)
	err := c.cc.Invoke(ctx, "/olivepb.BpmnRPC/RemoveDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bpmnRPCClient) ExecuteDefinition(ctx context.Context, in *ExecuteDefinitionRequest, opts ...grpc.CallOption) (*ExecuteDefinitionResponse, error) {
	out := new(ExecuteDefinitionResponse)
	err := c.cc.Invoke(ctx, "/olivepb.BpmnRPC/ExecuteDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bpmnRPCClient) ListProcessInstances(ctx context.Context, in *ListProcessInstancesRequest, opts ...grpc.CallOption) (*ListProcessInstancesResponse, error) {
	out := new(ListProcessInstancesResponse)
	err := c.cc.Invoke(ctx, "/olivepb.BpmnRPC/ListProcessInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bpmnRPCClient) GetProcessInstance(ctx context.Context, in *GetProcessInstanceRequest, opts ...grpc.CallOption) (*GetProcessInstanceResponse, error) {
	out := new(GetProcessInstanceResponse)
	err := c.cc.Invoke(ctx, "/olivepb.BpmnRPC/GetProcessInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BpmnRPCServer is the server API for BpmnRPC service.
// All implementations must embed UnimplementedBpmnRPCServer
// for forward compatibility
type BpmnRPCServer interface {
	ListDefinition(context.Context, *ListDefinitionRequest) (*ListDefinitionResponse, error)
	DeployDefinition(context.Context, *DeployDefinitionRequest) (*DeployDefinitionResponse, error)
	GetDefinition(context.Context, *GetDefinitionRequest) (*GetDefinitionResponse, error)
	RemoveDefinition(context.Context, *RemoveDefinitionRequest) (*RemoveDefinitionResponse, error)
	ExecuteDefinition(context.Context, *ExecuteDefinitionRequest) (*ExecuteDefinitionResponse, error)
	ListProcessInstances(context.Context, *ListProcessInstancesRequest) (*ListProcessInstancesResponse, error)
	GetProcessInstance(context.Context, *GetProcessInstanceRequest) (*GetProcessInstanceResponse, error)
	mustEmbedUnimplementedBpmnRPCServer()
}

// UnimplementedBpmnRPCServer must be embedded to have forward compatible implementations.
type UnimplementedBpmnRPCServer struct {
}

func (UnimplementedBpmnRPCServer) ListDefinition(context.Context, *ListDefinitionRequest) (*ListDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDefinition not implemented")
}
func (UnimplementedBpmnRPCServer) DeployDefinition(context.Context, *DeployDefinitionRequest) (*DeployDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployDefinition not implemented")
}
func (UnimplementedBpmnRPCServer) GetDefinition(context.Context, *GetDefinitionRequest) (*GetDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefinition not implemented")
}
func (UnimplementedBpmnRPCServer) RemoveDefinition(context.Context, *RemoveDefinitionRequest) (*RemoveDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDefinition not implemented")
}
func (UnimplementedBpmnRPCServer) ExecuteDefinition(context.Context, *ExecuteDefinitionRequest) (*ExecuteDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteDefinition not implemented")
}
func (UnimplementedBpmnRPCServer) ListProcessInstances(context.Context, *ListProcessInstancesRequest) (*ListProcessInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProcessInstances not implemented")
}
func (UnimplementedBpmnRPCServer) GetProcessInstance(context.Context, *GetProcessInstanceRequest) (*GetProcessInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessInstance not implemented")
}
func (UnimplementedBpmnRPCServer) mustEmbedUnimplementedBpmnRPCServer() {}

// UnsafeBpmnRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BpmnRPCServer will
// result in compilation errors.
type UnsafeBpmnRPCServer interface {
	mustEmbedUnimplementedBpmnRPCServer()
}

func RegisterBpmnRPCServer(s grpc.ServiceRegistrar, srv BpmnRPCServer) {
	s.RegisterService(&BpmnRPC_ServiceDesc, srv)
}

func _BpmnRPC_ListDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BpmnRPCServer).ListDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.BpmnRPC/ListDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BpmnRPCServer).ListDefinition(ctx, req.(*ListDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BpmnRPC_DeployDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BpmnRPCServer).DeployDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.BpmnRPC/DeployDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BpmnRPCServer).DeployDefinition(ctx, req.(*DeployDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BpmnRPC_GetDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BpmnRPCServer).GetDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.BpmnRPC/GetDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BpmnRPCServer).GetDefinition(ctx, req.(*GetDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BpmnRPC_RemoveDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BpmnRPCServer).RemoveDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.BpmnRPC/RemoveDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BpmnRPCServer).RemoveDefinition(ctx, req.(*RemoveDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BpmnRPC_ExecuteDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BpmnRPCServer).ExecuteDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.BpmnRPC/ExecuteDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BpmnRPCServer).ExecuteDefinition(ctx, req.(*ExecuteDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BpmnRPC_ListProcessInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProcessInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BpmnRPCServer).ListProcessInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.BpmnRPC/ListProcessInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BpmnRPCServer).ListProcessInstances(ctx, req.(*ListProcessInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BpmnRPC_GetProcessInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BpmnRPCServer).GetProcessInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.BpmnRPC/GetProcessInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BpmnRPCServer).GetProcessInstance(ctx, req.(*GetProcessInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BpmnRPC_ServiceDesc is the grpc.ServiceDesc for BpmnRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BpmnRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "olivepb.BpmnRPC",
	HandlerType: (*BpmnRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDefinition",
			Handler:    _BpmnRPC_ListDefinition_Handler,
		},
		{
			MethodName: "DeployDefinition",
			Handler:    _BpmnRPC_DeployDefinition_Handler,
		},
		{
			MethodName: "GetDefinition",
			Handler:    _BpmnRPC_GetDefinition_Handler,
		},
		{
			MethodName: "RemoveDefinition",
			Handler:    _BpmnRPC_RemoveDefinition_Handler,
		},
		{
			MethodName: "ExecuteDefinition",
			Handler:    _BpmnRPC_ExecuteDefinition_Handler,
		},
		{
			MethodName: "ListProcessInstances",
			Handler:    _BpmnRPC_ListProcessInstances_Handler,
		},
		{
			MethodName: "GetProcessInstance",
			Handler:    _BpmnRPC_GetProcessInstance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/olive-io/olive/api/olivepb/rpc.proto",
}

// RunnerRPCClient is the client API for RunnerRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunnerRPCClient interface {
	GetProcessInstance(ctx context.Context, in *GetProcessInstanceRequest, opts ...grpc.CallOption) (*GetProcessInstanceResponse, error)
}

type runnerRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRunnerRPCClient(cc grpc.ClientConnInterface) RunnerRPCClient {
	return &runnerRPCClient{cc}
}

func (c *runnerRPCClient) GetProcessInstance(ctx context.Context, in *GetProcessInstanceRequest, opts ...grpc.CallOption) (*GetProcessInstanceResponse, error) {
	out := new(GetProcessInstanceResponse)
	err := c.cc.Invoke(ctx, "/olivepb.RunnerRPC/GetProcessInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunnerRPCServer is the server API for RunnerRPC service.
// All implementations must embed UnimplementedRunnerRPCServer
// for forward compatibility
type RunnerRPCServer interface {
	GetProcessInstance(context.Context, *GetProcessInstanceRequest) (*GetProcessInstanceResponse, error)
	mustEmbedUnimplementedRunnerRPCServer()
}

// UnimplementedRunnerRPCServer must be embedded to have forward compatible implementations.
type UnimplementedRunnerRPCServer struct {
}

func (UnimplementedRunnerRPCServer) GetProcessInstance(context.Context, *GetProcessInstanceRequest) (*GetProcessInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessInstance not implemented")
}
func (UnimplementedRunnerRPCServer) mustEmbedUnimplementedRunnerRPCServer() {}

// UnsafeRunnerRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunnerRPCServer will
// result in compilation errors.
type UnsafeRunnerRPCServer interface {
	mustEmbedUnimplementedRunnerRPCServer()
}

func RegisterRunnerRPCServer(s grpc.ServiceRegistrar, srv RunnerRPCServer) {
	s.RegisterService(&RunnerRPC_ServiceDesc, srv)
}

func _RunnerRPC_GetProcessInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerRPCServer).GetProcessInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/olivepb.RunnerRPC/GetProcessInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerRPCServer).GetProcessInstance(ctx, req.(*GetProcessInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RunnerRPC_ServiceDesc is the grpc.ServiceDesc for RunnerRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RunnerRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "olivepb.RunnerRPC",
	HandlerType: (*RunnerRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProcessInstance",
			Handler:    _RunnerRPC_GetProcessInstance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/olive-io/olive/api/olivepb/rpc.proto",
}
