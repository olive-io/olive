// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rpc/monpb/rpc.proto

package monpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MemberAddRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MemberAddRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberAddRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberAddRequestMultiError, or nil if none found.
func (m *MemberAddRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberAddRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsLearner

	if len(errors) > 0 {
		return MemberAddRequestMultiError(errors)
	}

	return nil
}

// MemberAddRequestMultiError is an error wrapping multiple validation errors
// returned by MemberAddRequest.ValidateAll() if the designated constraints
// aren't met.
type MemberAddRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberAddRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberAddRequestMultiError) AllErrors() []error { return m }

// MemberAddRequestValidationError is the validation error returned by
// MemberAddRequest.Validate if the designated constraints aren't met.
type MemberAddRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberAddRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberAddRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberAddRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberAddRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberAddRequestValidationError) ErrorName() string { return "MemberAddRequestValidationError" }

// Error satisfies the builtin error interface
func (e MemberAddRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberAddRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberAddRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberAddRequestValidationError{}

// Validate checks the field values on MemberAddResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MemberAddResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberAddResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberAddResponseMultiError, or nil if none found.
func (m *MemberAddResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberAddResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberAddResponseValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberAddResponseValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberAddResponseValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberAddResponseValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberAddResponseValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberAddResponseValidationError{
				field:  "Member",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MemberAddResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MemberAddResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MemberAddResponseValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MemberAddResponseMultiError(errors)
	}

	return nil
}

// MemberAddResponseMultiError is an error wrapping multiple validation errors
// returned by MemberAddResponse.ValidateAll() if the designated constraints
// aren't met.
type MemberAddResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberAddResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberAddResponseMultiError) AllErrors() []error { return m }

// MemberAddResponseValidationError is the validation error returned by
// MemberAddResponse.Validate if the designated constraints aren't met.
type MemberAddResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberAddResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberAddResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberAddResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberAddResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberAddResponseValidationError) ErrorName() string {
	return "MemberAddResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MemberAddResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberAddResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberAddResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberAddResponseValidationError{}

// Validate checks the field values on MemberRemoveRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MemberRemoveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberRemoveRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberRemoveRequestMultiError, or nil if none found.
func (m *MemberRemoveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberRemoveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	if len(errors) > 0 {
		return MemberRemoveRequestMultiError(errors)
	}

	return nil
}

// MemberRemoveRequestMultiError is an error wrapping multiple validation
// errors returned by MemberRemoveRequest.ValidateAll() if the designated
// constraints aren't met.
type MemberRemoveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberRemoveRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberRemoveRequestMultiError) AllErrors() []error { return m }

// MemberRemoveRequestValidationError is the validation error returned by
// MemberRemoveRequest.Validate if the designated constraints aren't met.
type MemberRemoveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberRemoveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberRemoveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberRemoveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberRemoveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberRemoveRequestValidationError) ErrorName() string {
	return "MemberRemoveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MemberRemoveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberRemoveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberRemoveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberRemoveRequestValidationError{}

// Validate checks the field values on MemberRemoveResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MemberRemoveResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberRemoveResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberRemoveResponseMultiError, or nil if none found.
func (m *MemberRemoveResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberRemoveResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberRemoveResponseValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberRemoveResponseValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberRemoveResponseValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MemberRemoveResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MemberRemoveResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MemberRemoveResponseValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MemberRemoveResponseMultiError(errors)
	}

	return nil
}

// MemberRemoveResponseMultiError is an error wrapping multiple validation
// errors returned by MemberRemoveResponse.ValidateAll() if the designated
// constraints aren't met.
type MemberRemoveResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberRemoveResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberRemoveResponseMultiError) AllErrors() []error { return m }

// MemberRemoveResponseValidationError is the validation error returned by
// MemberRemoveResponse.Validate if the designated constraints aren't met.
type MemberRemoveResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberRemoveResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberRemoveResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberRemoveResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberRemoveResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberRemoveResponseValidationError) ErrorName() string {
	return "MemberRemoveResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MemberRemoveResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberRemoveResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberRemoveResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberRemoveResponseValidationError{}

// Validate checks the field values on MemberUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MemberUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberUpdateRequestMultiError, or nil if none found.
func (m *MemberUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	if len(errors) > 0 {
		return MemberUpdateRequestMultiError(errors)
	}

	return nil
}

// MemberUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by MemberUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type MemberUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberUpdateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberUpdateRequestMultiError) AllErrors() []error { return m }

// MemberUpdateRequestValidationError is the validation error returned by
// MemberUpdateRequest.Validate if the designated constraints aren't met.
type MemberUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberUpdateRequestValidationError) ErrorName() string {
	return "MemberUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MemberUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberUpdateRequestValidationError{}

// Validate checks the field values on MemberUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MemberUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberUpdateResponseMultiError, or nil if none found.
func (m *MemberUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberUpdateResponseValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberUpdateResponseValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberUpdateResponseValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MemberUpdateResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MemberUpdateResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MemberUpdateResponseValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MemberUpdateResponseMultiError(errors)
	}

	return nil
}

// MemberUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by MemberUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type MemberUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberUpdateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberUpdateResponseMultiError) AllErrors() []error { return m }

// MemberUpdateResponseValidationError is the validation error returned by
// MemberUpdateResponse.Validate if the designated constraints aren't met.
type MemberUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberUpdateResponseValidationError) ErrorName() string {
	return "MemberUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MemberUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberUpdateResponseValidationError{}

// Validate checks the field values on MemberListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MemberListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberListRequestMultiError, or nil if none found.
func (m *MemberListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Linearizable

	if len(errors) > 0 {
		return MemberListRequestMultiError(errors)
	}

	return nil
}

// MemberListRequestMultiError is an error wrapping multiple validation errors
// returned by MemberListRequest.ValidateAll() if the designated constraints
// aren't met.
type MemberListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberListRequestMultiError) AllErrors() []error { return m }

// MemberListRequestValidationError is the validation error returned by
// MemberListRequest.Validate if the designated constraints aren't met.
type MemberListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberListRequestValidationError) ErrorName() string {
	return "MemberListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MemberListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberListRequestValidationError{}

// Validate checks the field values on MemberListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MemberListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberListResponseMultiError, or nil if none found.
func (m *MemberListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberListResponseValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberListResponseValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberListResponseValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MemberListResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MemberListResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MemberListResponseValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MemberListResponseMultiError(errors)
	}

	return nil
}

// MemberListResponseMultiError is an error wrapping multiple validation errors
// returned by MemberListResponse.ValidateAll() if the designated constraints
// aren't met.
type MemberListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberListResponseMultiError) AllErrors() []error { return m }

// MemberListResponseValidationError is the validation error returned by
// MemberListResponse.Validate if the designated constraints aren't met.
type MemberListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberListResponseValidationError) ErrorName() string {
	return "MemberListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MemberListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberListResponseValidationError{}

// Validate checks the field values on MemberPromoteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MemberPromoteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberPromoteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberPromoteRequestMultiError, or nil if none found.
func (m *MemberPromoteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberPromoteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	if len(errors) > 0 {
		return MemberPromoteRequestMultiError(errors)
	}

	return nil
}

// MemberPromoteRequestMultiError is an error wrapping multiple validation
// errors returned by MemberPromoteRequest.ValidateAll() if the designated
// constraints aren't met.
type MemberPromoteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberPromoteRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberPromoteRequestMultiError) AllErrors() []error { return m }

// MemberPromoteRequestValidationError is the validation error returned by
// MemberPromoteRequest.Validate if the designated constraints aren't met.
type MemberPromoteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberPromoteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberPromoteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberPromoteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberPromoteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberPromoteRequestValidationError) ErrorName() string {
	return "MemberPromoteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MemberPromoteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberPromoteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberPromoteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberPromoteRequestValidationError{}

// Validate checks the field values on MemberPromoteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MemberPromoteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberPromoteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MemberPromoteResponseMultiError, or nil if none found.
func (m *MemberPromoteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberPromoteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberPromoteResponseValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberPromoteResponseValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberPromoteResponseValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MemberPromoteResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MemberPromoteResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MemberPromoteResponseValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MemberPromoteResponseMultiError(errors)
	}

	return nil
}

// MemberPromoteResponseMultiError is an error wrapping multiple validation
// errors returned by MemberPromoteResponse.ValidateAll() if the designated
// constraints aren't met.
type MemberPromoteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberPromoteResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberPromoteResponseMultiError) AllErrors() []error { return m }

// MemberPromoteResponseValidationError is the validation error returned by
// MemberPromoteResponse.Validate if the designated constraints aren't met.
type MemberPromoteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberPromoteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberPromoteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberPromoteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberPromoteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberPromoteResponseValidationError) ErrorName() string {
	return "MemberPromoteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MemberPromoteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberPromoteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberPromoteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberPromoteResponseValidationError{}

// Validate checks the field values on PingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingRequestMultiError, or
// nil if none found.
func (m *PingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PingRequestMultiError(errors)
	}

	return nil
}

// PingRequestMultiError is an error wrapping multiple validation errors
// returned by PingRequest.ValidateAll() if the designated constraints aren't met.
type PingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingRequestMultiError) AllErrors() []error { return m }

// PingRequestValidationError is the validation error returned by
// PingRequest.Validate if the designated constraints aren't met.
type PingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingRequestValidationError) ErrorName() string { return "PingRequestValidationError" }

// Error satisfies the builtin error interface
func (e PingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingRequestValidationError{}

// Validate checks the field values on PingResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingResponseMultiError, or
// nil if none found.
func (m *PingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PingResponseMultiError(errors)
	}

	return nil
}

// PingResponseMultiError is an error wrapping multiple validation errors
// returned by PingResponse.ValidateAll() if the designated constraints aren't met.
type PingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingResponseMultiError) AllErrors() []error { return m }

// PingResponseValidationError is the validation error returned by
// PingResponse.Validate if the designated constraints aren't met.
type PingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingResponseValidationError) ErrorName() string { return "PingResponseValidationError" }

// Error satisfies the builtin error interface
func (e PingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingResponseValidationError{}

// Validate checks the field values on GetClusterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClusterRequestMultiError, or nil if none found.
func (m *GetClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetClusterRequestMultiError(errors)
	}

	return nil
}

// GetClusterRequestMultiError is an error wrapping multiple validation errors
// returned by GetClusterRequest.ValidateAll() if the designated constraints
// aren't met.
type GetClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterRequestMultiError) AllErrors() []error { return m }

// GetClusterRequestValidationError is the validation error returned by
// GetClusterRequest.Validate if the designated constraints aren't met.
type GetClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterRequestValidationError) ErrorName() string {
	return "GetClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterRequestValidationError{}

// Validate checks the field values on GetClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClusterResponseMultiError, or nil if none found.
func (m *GetClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetClusterResponseValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetClusterResponseValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClusterResponseValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMonitor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetClusterResponseValidationError{
					field:  "Monitor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetClusterResponseValidationError{
					field:  "Monitor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMonitor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClusterResponseValidationError{
				field:  "Monitor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetClusterResponseMultiError(errors)
	}

	return nil
}

// GetClusterResponseMultiError is an error wrapping multiple validation errors
// returned by GetClusterResponse.ValidateAll() if the designated constraints
// aren't met.
type GetClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterResponseMultiError) AllErrors() []error { return m }

// GetClusterResponseValidationError is the validation error returned by
// GetClusterResponse.Validate if the designated constraints aren't met.
type GetClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterResponseValidationError) ErrorName() string {
	return "GetClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterResponseValidationError{}

// Validate checks the field values on RegisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequestMultiError, or nil if none found.
func (m *RegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRunner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterRequestValidationError{
					field:  "Runner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterRequestValidationError{
					field:  "Runner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRunner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterRequestValidationError{
				field:  "Runner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterRequestMultiError(errors)
	}

	return nil
}

// RegisterRequestMultiError is an error wrapping multiple validation errors
// returned by RegisterRequest.ValidateAll() if the designated constraints
// aren't met.
type RegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequestMultiError) AllErrors() []error { return m }

// RegisterRequestValidationError is the validation error returned by
// RegisterRequest.Validate if the designated constraints aren't met.
type RegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestValidationError) ErrorName() string { return "RegisterRequestValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestValidationError{}

// Validate checks the field values on RegisterResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterResponseMultiError, or nil if none found.
func (m *RegisterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRunner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterResponseValidationError{
					field:  "Runner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterResponseValidationError{
					field:  "Runner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRunner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterResponseValidationError{
				field:  "Runner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterResponseMultiError(errors)
	}

	return nil
}

// RegisterResponseMultiError is an error wrapping multiple validation errors
// returned by RegisterResponse.ValidateAll() if the designated constraints
// aren't met.
type RegisterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterResponseMultiError) AllErrors() []error { return m }

// RegisterResponseValidationError is the validation error returned by
// RegisterResponse.Validate if the designated constraints aren't met.
type RegisterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterResponseValidationError) ErrorName() string { return "RegisterResponseValidationError" }

// Error satisfies the builtin error interface
func (e RegisterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterResponseValidationError{}

// Validate checks the field values on DisregisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisregisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisregisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisregisterRequestMultiError, or nil if none found.
func (m *DisregisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisregisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRunner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DisregisterRequestValidationError{
					field:  "Runner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DisregisterRequestValidationError{
					field:  "Runner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRunner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DisregisterRequestValidationError{
				field:  "Runner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DisregisterRequestMultiError(errors)
	}

	return nil
}

// DisregisterRequestMultiError is an error wrapping multiple validation errors
// returned by DisregisterRequest.ValidateAll() if the designated constraints
// aren't met.
type DisregisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisregisterRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisregisterRequestMultiError) AllErrors() []error { return m }

// DisregisterRequestValidationError is the validation error returned by
// DisregisterRequest.Validate if the designated constraints aren't met.
type DisregisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisregisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisregisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisregisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisregisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisregisterRequestValidationError) ErrorName() string {
	return "DisregisterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisregisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisregisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisregisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisregisterRequestValidationError{}

// Validate checks the field values on DisregisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisregisterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisregisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisregisterResponseMultiError, or nil if none found.
func (m *DisregisterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DisregisterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRunner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DisregisterResponseValidationError{
					field:  "Runner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DisregisterResponseValidationError{
					field:  "Runner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRunner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DisregisterResponseValidationError{
				field:  "Runner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DisregisterResponseMultiError(errors)
	}

	return nil
}

// DisregisterResponseMultiError is an error wrapping multiple validation
// errors returned by DisregisterResponse.ValidateAll() if the designated
// constraints aren't met.
type DisregisterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisregisterResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisregisterResponseMultiError) AllErrors() []error { return m }

// DisregisterResponseValidationError is the validation error returned by
// DisregisterResponse.Validate if the designated constraints aren't met.
type DisregisterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisregisterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisregisterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisregisterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisregisterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisregisterResponseValidationError) ErrorName() string {
	return "DisregisterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DisregisterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisregisterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisregisterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisregisterResponseValidationError{}

// Validate checks the field values on HeartbeatRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HeartbeatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HeartbeatRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HeartbeatRequestMultiError, or nil if none found.
func (m *HeartbeatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HeartbeatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HeartbeatRequestValidationError{
					field:  "Stat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HeartbeatRequestValidationError{
					field:  "Stat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HeartbeatRequestValidationError{
				field:  "Stat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HeartbeatRequestMultiError(errors)
	}

	return nil
}

// HeartbeatRequestMultiError is an error wrapping multiple validation errors
// returned by HeartbeatRequest.ValidateAll() if the designated constraints
// aren't met.
type HeartbeatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HeartbeatRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HeartbeatRequestMultiError) AllErrors() []error { return m }

// HeartbeatRequestValidationError is the validation error returned by
// HeartbeatRequest.Validate if the designated constraints aren't met.
type HeartbeatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeartbeatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeartbeatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeartbeatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeartbeatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeartbeatRequestValidationError) ErrorName() string { return "HeartbeatRequestValidationError" }

// Error satisfies the builtin error interface
func (e HeartbeatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeartbeatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeartbeatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeartbeatRequestValidationError{}

// Validate checks the field values on HeartbeatResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HeartbeatResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HeartbeatResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HeartbeatResponseMultiError, or nil if none found.
func (m *HeartbeatResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HeartbeatResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HeartbeatResponseValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HeartbeatResponseValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HeartbeatResponseValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HeartbeatResponseMultiError(errors)
	}

	return nil
}

// HeartbeatResponseMultiError is an error wrapping multiple validation errors
// returned by HeartbeatResponse.ValidateAll() if the designated constraints
// aren't met.
type HeartbeatResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HeartbeatResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HeartbeatResponseMultiError) AllErrors() []error { return m }

// HeartbeatResponseValidationError is the validation error returned by
// HeartbeatResponse.Validate if the designated constraints aren't met.
type HeartbeatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeartbeatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeartbeatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeartbeatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeartbeatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeartbeatResponseValidationError) ErrorName() string {
	return "HeartbeatResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HeartbeatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeartbeatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeartbeatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeartbeatResponseValidationError{}

// Validate checks the field values on ListRunnersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRunnersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRunnersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRunnersRequestMultiError, or nil if none found.
func (m *ListRunnersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRunnersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListRunnersRequestMultiError(errors)
	}

	return nil
}

// ListRunnersRequestMultiError is an error wrapping multiple validation errors
// returned by ListRunnersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRunnersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRunnersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRunnersRequestMultiError) AllErrors() []error { return m }

// ListRunnersRequestValidationError is the validation error returned by
// ListRunnersRequest.Validate if the designated constraints aren't met.
type ListRunnersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRunnersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRunnersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRunnersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRunnersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRunnersRequestValidationError) ErrorName() string {
	return "ListRunnersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRunnersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRunnersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRunnersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRunnersRequestValidationError{}

// Validate checks the field values on ListRunnersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRunnersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRunnersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRunnersResponseMultiError, or nil if none found.
func (m *ListRunnersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRunnersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRunners() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRunnersResponseValidationError{
						field:  fmt.Sprintf("Runners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRunnersResponseValidationError{
						field:  fmt.Sprintf("Runners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRunnersResponseValidationError{
					field:  fmt.Sprintf("Runners[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRunnersResponseMultiError(errors)
	}

	return nil
}

// ListRunnersResponseMultiError is an error wrapping multiple validation
// errors returned by ListRunnersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListRunnersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRunnersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRunnersResponseMultiError) AllErrors() []error { return m }

// ListRunnersResponseValidationError is the validation error returned by
// ListRunnersResponse.Validate if the designated constraints aren't met.
type ListRunnersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRunnersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRunnersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRunnersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRunnersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRunnersResponseValidationError) ErrorName() string {
	return "ListRunnersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRunnersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRunnersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRunnersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRunnersResponseValidationError{}

// Validate checks the field values on GetRunnerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRunnerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRunnerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRunnerRequestMultiError, or nil if none found.
func (m *GetRunnerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRunnerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetRunnerRequestMultiError(errors)
	}

	return nil
}

// GetRunnerRequestMultiError is an error wrapping multiple validation errors
// returned by GetRunnerRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRunnerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRunnerRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRunnerRequestMultiError) AllErrors() []error { return m }

// GetRunnerRequestValidationError is the validation error returned by
// GetRunnerRequest.Validate if the designated constraints aren't met.
type GetRunnerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRunnerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRunnerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRunnerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRunnerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRunnerRequestValidationError) ErrorName() string { return "GetRunnerRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRunnerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRunnerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRunnerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRunnerRequestValidationError{}

// Validate checks the field values on GetRunnerResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRunnerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRunnerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRunnerResponseMultiError, or nil if none found.
func (m *GetRunnerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRunnerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRunner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRunnerResponseValidationError{
					field:  "Runner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRunnerResponseValidationError{
					field:  "Runner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRunner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRunnerResponseValidationError{
				field:  "Runner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRunnerResponseValidationError{
					field:  "Stat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRunnerResponseValidationError{
					field:  "Stat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRunnerResponseValidationError{
				field:  "Stat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRunnerResponseMultiError(errors)
	}

	return nil
}

// GetRunnerResponseMultiError is an error wrapping multiple validation errors
// returned by GetRunnerResponse.ValidateAll() if the designated constraints
// aren't met.
type GetRunnerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRunnerResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRunnerResponseMultiError) AllErrors() []error { return m }

// GetRunnerResponseValidationError is the validation error returned by
// GetRunnerResponse.Validate if the designated constraints aren't met.
type GetRunnerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRunnerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRunnerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRunnerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRunnerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRunnerResponseValidationError) ErrorName() string {
	return "GetRunnerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRunnerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRunnerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRunnerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRunnerResponseValidationError{}

// Validate checks the field values on DeployDefinitionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeployDefinitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeployDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeployDefinitionRequestMultiError, or nil if none found.
func (m *DeployDefinitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeployDefinitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeployDefinitionRequestValidationError{
					field:  "Definition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeployDefinitionRequestValidationError{
					field:  "Definition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeployDefinitionRequestValidationError{
				field:  "Definition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeployDefinitionRequestMultiError(errors)
	}

	return nil
}

// DeployDefinitionRequestMultiError is an error wrapping multiple validation
// errors returned by DeployDefinitionRequest.ValidateAll() if the designated
// constraints aren't met.
type DeployDefinitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeployDefinitionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeployDefinitionRequestMultiError) AllErrors() []error { return m }

// DeployDefinitionRequestValidationError is the validation error returned by
// DeployDefinitionRequest.Validate if the designated constraints aren't met.
type DeployDefinitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeployDefinitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeployDefinitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeployDefinitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeployDefinitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeployDefinitionRequestValidationError) ErrorName() string {
	return "DeployDefinitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeployDefinitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeployDefinitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeployDefinitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeployDefinitionRequestValidationError{}

// Validate checks the field values on DeployDefinitionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeployDefinitionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeployDefinitionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeployDefinitionResponseMultiError, or nil if none found.
func (m *DeployDefinitionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeployDefinitionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeployDefinitionResponseValidationError{
					field:  "Definition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeployDefinitionResponseValidationError{
					field:  "Definition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeployDefinitionResponseValidationError{
				field:  "Definition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeployDefinitionResponseMultiError(errors)
	}

	return nil
}

// DeployDefinitionResponseMultiError is an error wrapping multiple validation
// errors returned by DeployDefinitionResponse.ValidateAll() if the designated
// constraints aren't met.
type DeployDefinitionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeployDefinitionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeployDefinitionResponseMultiError) AllErrors() []error { return m }

// DeployDefinitionResponseValidationError is the validation error returned by
// DeployDefinitionResponse.Validate if the designated constraints aren't met.
type DeployDefinitionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeployDefinitionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeployDefinitionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeployDefinitionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeployDefinitionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeployDefinitionResponseValidationError) ErrorName() string {
	return "DeployDefinitionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeployDefinitionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeployDefinitionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeployDefinitionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeployDefinitionResponseValidationError{}

// Validate checks the field values on ListDefinitionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDefinitionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDefinitionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDefinitionsRequestMultiError, or nil if none found.
func (m *ListDefinitionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDefinitionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListDefinitionsRequestMultiError(errors)
	}

	return nil
}

// ListDefinitionsRequestMultiError is an error wrapping multiple validation
// errors returned by ListDefinitionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDefinitionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDefinitionsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDefinitionsRequestMultiError) AllErrors() []error { return m }

// ListDefinitionsRequestValidationError is the validation error returned by
// ListDefinitionsRequest.Validate if the designated constraints aren't met.
type ListDefinitionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDefinitionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDefinitionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDefinitionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDefinitionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDefinitionsRequestValidationError) ErrorName() string {
	return "ListDefinitionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDefinitionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDefinitionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDefinitionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDefinitionsRequestValidationError{}

// Validate checks the field values on ListDefinitionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDefinitionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDefinitionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDefinitionsResponseMultiError, or nil if none found.
func (m *ListDefinitionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDefinitionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDefinitions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDefinitionsResponseValidationError{
						field:  fmt.Sprintf("Definitions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDefinitionsResponseValidationError{
						field:  fmt.Sprintf("Definitions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDefinitionsResponseValidationError{
					field:  fmt.Sprintf("Definitions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDefinitionsResponseMultiError(errors)
	}

	return nil
}

// ListDefinitionsResponseMultiError is an error wrapping multiple validation
// errors returned by ListDefinitionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDefinitionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDefinitionsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDefinitionsResponseMultiError) AllErrors() []error { return m }

// ListDefinitionsResponseValidationError is the validation error returned by
// ListDefinitionsResponse.Validate if the designated constraints aren't met.
type ListDefinitionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDefinitionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDefinitionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDefinitionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDefinitionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDefinitionsResponseValidationError) ErrorName() string {
	return "ListDefinitionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDefinitionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDefinitionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDefinitionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDefinitionsResponseValidationError{}

// Validate checks the field values on GetDefinitionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDefinitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDefinitionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDefinitionRequestMultiError, or nil if none found.
func (m *GetDefinitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDefinitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Version

	if len(errors) > 0 {
		return GetDefinitionRequestMultiError(errors)
	}

	return nil
}

// GetDefinitionRequestMultiError is an error wrapping multiple validation
// errors returned by GetDefinitionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDefinitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDefinitionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDefinitionRequestMultiError) AllErrors() []error { return m }

// GetDefinitionRequestValidationError is the validation error returned by
// GetDefinitionRequest.Validate if the designated constraints aren't met.
type GetDefinitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefinitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefinitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefinitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefinitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefinitionRequestValidationError) ErrorName() string {
	return "GetDefinitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefinitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefinitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefinitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefinitionRequestValidationError{}

// Validate checks the field values on GetDefinitionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDefinitionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDefinitionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDefinitionResponseMultiError, or nil if none found.
func (m *GetDefinitionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDefinitionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDefinitionResponseValidationError{
					field:  "Definition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDefinitionResponseValidationError{
					field:  "Definition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefinitionResponseValidationError{
				field:  "Definition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDefinitionResponseMultiError(errors)
	}

	return nil
}

// GetDefinitionResponseMultiError is an error wrapping multiple validation
// errors returned by GetDefinitionResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDefinitionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDefinitionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDefinitionResponseMultiError) AllErrors() []error { return m }

// GetDefinitionResponseValidationError is the validation error returned by
// GetDefinitionResponse.Validate if the designated constraints aren't met.
type GetDefinitionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefinitionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefinitionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefinitionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefinitionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefinitionResponseValidationError) ErrorName() string {
	return "GetDefinitionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefinitionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefinitionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefinitionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefinitionResponseValidationError{}

// Validate checks the field values on RemoveDefinitionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveDefinitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveDefinitionRequestMultiError, or nil if none found.
func (m *RemoveDefinitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveDefinitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Version

	if len(errors) > 0 {
		return RemoveDefinitionRequestMultiError(errors)
	}

	return nil
}

// RemoveDefinitionRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveDefinitionRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveDefinitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveDefinitionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveDefinitionRequestMultiError) AllErrors() []error { return m }

// RemoveDefinitionRequestValidationError is the validation error returned by
// RemoveDefinitionRequest.Validate if the designated constraints aren't met.
type RemoveDefinitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDefinitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDefinitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDefinitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDefinitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDefinitionRequestValidationError) ErrorName() string {
	return "RemoveDefinitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveDefinitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDefinitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDefinitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDefinitionRequestValidationError{}

// Validate checks the field values on RemoveDefinitionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveDefinitionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveDefinitionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveDefinitionResponseMultiError, or nil if none found.
func (m *RemoveDefinitionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveDefinitionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveDefinitionResponseValidationError{
					field:  "Definition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveDefinitionResponseValidationError{
					field:  "Definition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveDefinitionResponseValidationError{
				field:  "Definition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RemoveDefinitionResponseMultiError(errors)
	}

	return nil
}

// RemoveDefinitionResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveDefinitionResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveDefinitionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveDefinitionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveDefinitionResponseMultiError) AllErrors() []error { return m }

// RemoveDefinitionResponseValidationError is the validation error returned by
// RemoveDefinitionResponse.Validate if the designated constraints aren't met.
type RemoveDefinitionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDefinitionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDefinitionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDefinitionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDefinitionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDefinitionResponseValidationError) ErrorName() string {
	return "RemoveDefinitionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveDefinitionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDefinitionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDefinitionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDefinitionResponseValidationError{}

// Validate checks the field values on ExecuteDefinitionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExecuteDefinitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecuteDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExecuteDefinitionRequestMultiError, or nil if none found.
func (m *ExecuteDefinitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecuteDefinitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for DefinitionId

	// no validation rules for DefinitionVersion

	// no validation rules for Header

	// no validation rules for Properties

	// no validation rules for DataObjects

	if len(errors) > 0 {
		return ExecuteDefinitionRequestMultiError(errors)
	}

	return nil
}

// ExecuteDefinitionRequestMultiError is an error wrapping multiple validation
// errors returned by ExecuteDefinitionRequest.ValidateAll() if the designated
// constraints aren't met.
type ExecuteDefinitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecuteDefinitionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecuteDefinitionRequestMultiError) AllErrors() []error { return m }

// ExecuteDefinitionRequestValidationError is the validation error returned by
// ExecuteDefinitionRequest.Validate if the designated constraints aren't met.
type ExecuteDefinitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecuteDefinitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecuteDefinitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecuteDefinitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecuteDefinitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecuteDefinitionRequestValidationError) ErrorName() string {
	return "ExecuteDefinitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExecuteDefinitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecuteDefinitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecuteDefinitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecuteDefinitionRequestValidationError{}

// Validate checks the field values on ExecuteDefinitionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExecuteDefinitionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecuteDefinitionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExecuteDefinitionResponseMultiError, or nil if none found.
func (m *ExecuteDefinitionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecuteDefinitionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProcess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExecuteDefinitionResponseValidationError{
					field:  "Process",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExecuteDefinitionResponseValidationError{
					field:  "Process",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProcess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExecuteDefinitionResponseValidationError{
				field:  "Process",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExecuteDefinitionResponseMultiError(errors)
	}

	return nil
}

// ExecuteDefinitionResponseMultiError is an error wrapping multiple validation
// errors returned by ExecuteDefinitionResponse.ValidateAll() if the
// designated constraints aren't met.
type ExecuteDefinitionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecuteDefinitionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecuteDefinitionResponseMultiError) AllErrors() []error { return m }

// ExecuteDefinitionResponseValidationError is the validation error returned by
// ExecuteDefinitionResponse.Validate if the designated constraints aren't met.
type ExecuteDefinitionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecuteDefinitionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecuteDefinitionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecuteDefinitionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecuteDefinitionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecuteDefinitionResponseValidationError) ErrorName() string {
	return "ExecuteDefinitionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExecuteDefinitionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecuteDefinitionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecuteDefinitionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecuteDefinitionResponseValidationError{}

// Validate checks the field values on ListProcessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProcessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProcessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProcessRequestMultiError, or nil if none found.
func (m *ListProcessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProcessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListProcessRequestMultiError(errors)
	}

	return nil
}

// ListProcessRequestMultiError is an error wrapping multiple validation errors
// returned by ListProcessRequest.ValidateAll() if the designated constraints
// aren't met.
type ListProcessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProcessRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProcessRequestMultiError) AllErrors() []error { return m }

// ListProcessRequestValidationError is the validation error returned by
// ListProcessRequest.Validate if the designated constraints aren't met.
type ListProcessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProcessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProcessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProcessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProcessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProcessRequestValidationError) ErrorName() string {
	return "ListProcessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProcessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProcessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProcessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProcessRequestValidationError{}

// Validate checks the field values on ListProcessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProcessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProcessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProcessResponseMultiError, or nil if none found.
func (m *ListProcessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProcessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProcesses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProcessResponseValidationError{
						field:  fmt.Sprintf("Processes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProcessResponseValidationError{
						field:  fmt.Sprintf("Processes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProcessResponseValidationError{
					field:  fmt.Sprintf("Processes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProcessResponseMultiError(errors)
	}

	return nil
}

// ListProcessResponseMultiError is an error wrapping multiple validation
// errors returned by ListProcessResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProcessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProcessResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProcessResponseMultiError) AllErrors() []error { return m }

// ListProcessResponseValidationError is the validation error returned by
// ListProcessResponse.Validate if the designated constraints aren't met.
type ListProcessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProcessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProcessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProcessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProcessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProcessResponseValidationError) ErrorName() string {
	return "ListProcessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProcessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProcessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProcessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProcessResponseValidationError{}

// Validate checks the field values on GetProcessRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProcessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProcessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProcessRequestMultiError, or nil if none found.
func (m *GetProcessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProcessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetProcessRequestMultiError(errors)
	}

	return nil
}

// GetProcessRequestMultiError is an error wrapping multiple validation errors
// returned by GetProcessRequest.ValidateAll() if the designated constraints
// aren't met.
type GetProcessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProcessRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProcessRequestMultiError) AllErrors() []error { return m }

// GetProcessRequestValidationError is the validation error returned by
// GetProcessRequest.Validate if the designated constraints aren't met.
type GetProcessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProcessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProcessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProcessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProcessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProcessRequestValidationError) ErrorName() string {
	return "GetProcessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProcessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProcessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProcessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProcessRequestValidationError{}

// Validate checks the field values on GetProcessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProcessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProcessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProcessResponseMultiError, or nil if none found.
func (m *GetProcessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProcessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProcess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProcessResponseValidationError{
					field:  "Process",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProcessResponseValidationError{
					field:  "Process",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProcess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProcessResponseValidationError{
				field:  "Process",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProcessResponseMultiError(errors)
	}

	return nil
}

// GetProcessResponseMultiError is an error wrapping multiple validation errors
// returned by GetProcessResponse.ValidateAll() if the designated constraints
// aren't met.
type GetProcessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProcessResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProcessResponseMultiError) AllErrors() []error { return m }

// GetProcessResponseValidationError is the validation error returned by
// GetProcessResponse.Validate if the designated constraints aren't met.
type GetProcessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProcessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProcessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProcessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProcessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProcessResponseValidationError) ErrorName() string {
	return "GetProcessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProcessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProcessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProcessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProcessResponseValidationError{}

// Validate checks the field values on UpdateProcessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProcessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProcessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProcessRequestMultiError, or nil if none found.
func (m *UpdateProcessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProcessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProcess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProcessRequestValidationError{
					field:  "Process",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProcessRequestValidationError{
					field:  "Process",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProcess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProcessRequestValidationError{
				field:  "Process",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProcessRequestMultiError(errors)
	}

	return nil
}

// UpdateProcessRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProcessRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProcessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProcessRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProcessRequestMultiError) AllErrors() []error { return m }

// UpdateProcessRequestValidationError is the validation error returned by
// UpdateProcessRequest.Validate if the designated constraints aren't met.
type UpdateProcessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProcessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProcessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProcessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProcessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProcessRequestValidationError) ErrorName() string {
	return "UpdateProcessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProcessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProcessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProcessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProcessRequestValidationError{}

// Validate checks the field values on UpdateProcessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProcessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProcessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProcessResponseMultiError, or nil if none found.
func (m *UpdateProcessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProcessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateProcessResponseMultiError(errors)
	}

	return nil
}

// UpdateProcessResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateProcessResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateProcessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProcessResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProcessResponseMultiError) AllErrors() []error { return m }

// UpdateProcessResponseValidationError is the validation error returned by
// UpdateProcessResponse.Validate if the designated constraints aren't met.
type UpdateProcessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProcessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProcessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProcessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProcessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProcessResponseValidationError) ErrorName() string {
	return "UpdateProcessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProcessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProcessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProcessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProcessResponseValidationError{}

// Validate checks the field values on RemoveProcessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveProcessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveProcessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveProcessRequestMultiError, or nil if none found.
func (m *RemoveProcessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveProcessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RemoveProcessRequestMultiError(errors)
	}

	return nil
}

// RemoveProcessRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveProcessRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveProcessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveProcessRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveProcessRequestMultiError) AllErrors() []error { return m }

// RemoveProcessRequestValidationError is the validation error returned by
// RemoveProcessRequest.Validate if the designated constraints aren't met.
type RemoveProcessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProcessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProcessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProcessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProcessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProcessRequestValidationError) ErrorName() string {
	return "RemoveProcessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProcessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProcessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProcessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProcessRequestValidationError{}

// Validate checks the field values on RemoveProcessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveProcessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveProcessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveProcessResponseMultiError, or nil if none found.
func (m *RemoveProcessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveProcessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProcess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveProcessResponseValidationError{
					field:  "Process",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveProcessResponseValidationError{
					field:  "Process",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProcess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveProcessResponseValidationError{
				field:  "Process",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RemoveProcessResponseMultiError(errors)
	}

	return nil
}

// RemoveProcessResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveProcessResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveProcessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveProcessResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveProcessResponseMultiError) AllErrors() []error { return m }

// RemoveProcessResponseValidationError is the validation error returned by
// RemoveProcessResponse.Validate if the designated constraints aren't met.
type RemoveProcessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProcessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProcessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProcessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProcessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProcessResponseValidationError) ErrorName() string {
	return "RemoveProcessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProcessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProcessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProcessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProcessResponseValidationError{}
