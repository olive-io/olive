// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: github.com/olive-io/olive/api/discoverypb/rpc.proto

package discoverypb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Transmit(ctx context.Context, in *TransmitRequest, opts ...grpc.CallOption) (*TransmitResponse, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (Gateway_ClientStreamClient, error)
	ServerStream(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (Gateway_ServerStreamClient, error)
	BinaryStream(ctx context.Context, opts ...grpc.CallOption) (Gateway_BinaryStreamClient, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/discoverypb.Gateway/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Transmit(ctx context.Context, in *TransmitRequest, opts ...grpc.CallOption) (*TransmitResponse, error) {
	out := new(TransmitResponse)
	err := c.cc.Invoke(ctx, "/discoverypb.Gateway/Transmit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (Gateway_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gateway_ServiceDesc.Streams[0], "/discoverypb.Gateway/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayClientStreamClient{stream}
	return x, nil
}

type Gateway_ClientStreamClient interface {
	Send(*PingRequest) error
	CloseAndRecv() (*PingResponse, error)
	grpc.ClientStream
}

type gatewayClientStreamClient struct {
	grpc.ClientStream
}

func (x *gatewayClientStreamClient) Send(m *PingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gatewayClientStreamClient) CloseAndRecv() (*PingResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gatewayClient) ServerStream(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (Gateway_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gateway_ServiceDesc.Streams[1], "/discoverypb.Gateway/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gateway_ServerStreamClient interface {
	Recv() (*PingResponse, error)
	grpc.ClientStream
}

type gatewayServerStreamClient struct {
	grpc.ClientStream
}

func (x *gatewayServerStreamClient) Recv() (*PingResponse, error) {
	m := new(PingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gatewayClient) BinaryStream(ctx context.Context, opts ...grpc.CallOption) (Gateway_BinaryStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gateway_ServiceDesc.Streams[2], "/discoverypb.Gateway/BinaryStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayBinaryStreamClient{stream}
	return x, nil
}

type Gateway_BinaryStreamClient interface {
	Send(*PingRequest) error
	Recv() (*PingResponse, error)
	grpc.ClientStream
}

type gatewayBinaryStreamClient struct {
	grpc.ClientStream
}

func (x *gatewayBinaryStreamClient) Send(m *PingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gatewayBinaryStreamClient) Recv() (*PingResponse, error) {
	m := new(PingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Transmit(context.Context, *TransmitRequest) (*TransmitResponse, error)
	ClientStream(Gateway_ClientStreamServer) error
	ServerStream(*PingRequest, Gateway_ServerStreamServer) error
	BinaryStream(Gateway_BinaryStreamServer) error
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGatewayServer) Transmit(context.Context, *TransmitRequest) (*TransmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transmit not implemented")
}
func (UnimplementedGatewayServer) ClientStream(Gateway_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedGatewayServer) ServerStream(*PingRequest, Gateway_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedGatewayServer) BinaryStream(Gateway_BinaryStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BinaryStream not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discoverypb.Gateway/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Transmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Transmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discoverypb.Gateway/Transmit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Transmit(ctx, req.(*TransmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GatewayServer).ClientStream(&gatewayClientStreamServer{stream})
}

type Gateway_ClientStreamServer interface {
	SendAndClose(*PingResponse) error
	Recv() (*PingRequest, error)
	grpc.ServerStream
}

type gatewayClientStreamServer struct {
	grpc.ServerStream
}

func (x *gatewayClientStreamServer) SendAndClose(m *PingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gatewayClientStreamServer) Recv() (*PingRequest, error) {
	m := new(PingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Gateway_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServer).ServerStream(m, &gatewayServerStreamServer{stream})
}

type Gateway_ServerStreamServer interface {
	Send(*PingResponse) error
	grpc.ServerStream
}

type gatewayServerStreamServer struct {
	grpc.ServerStream
}

func (x *gatewayServerStreamServer) Send(m *PingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Gateway_BinaryStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GatewayServer).BinaryStream(&gatewayBinaryStreamServer{stream})
}

type Gateway_BinaryStreamServer interface {
	Send(*PingResponse) error
	Recv() (*PingRequest, error)
	grpc.ServerStream
}

type gatewayBinaryStreamServer struct {
	grpc.ServerStream
}

func (x *gatewayBinaryStreamServer) Send(m *PingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gatewayBinaryStreamServer) Recv() (*PingRequest, error) {
	m := new(PingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "discoverypb.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Gateway_Ping_Handler,
		},
		{
			MethodName: "Transmit",
			Handler:    _Gateway_Transmit_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _Gateway_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStream",
			Handler:       _Gateway_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BinaryStream",
			Handler:       _Gateway_BinaryStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/olive-io/olive/api/discoverypb/rpc.proto",
}
