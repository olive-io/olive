// Copyright 2023 The olive Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package discoverypb;

option go_package = "github.com/olive-io/olive/api/discoverypb;discoverypb";
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;

import "gogoproto/gogo.proto";

enum Activity {
  Unknown = 0;
  Task = 1;
  ServiceTask = 2;
  ScriptTask = 3;
  UserTask = 4;
  SendTask = 5;
  ReceiveTask = 6;
  CallActivity = 7;
}

// Endpoint is a endpoint provided by a service
message Endpoint {
  string name = 1;

  Value request = 2;

  Value response = 3;

  map<string, string> metadata = 4;
}

// Event is registry event
message Event {
  // Event Id
  string id = 1;

  // type of event
  string type = 2;

  // unix timestamp of event
  int64 timestamp = 3;

  // service entry
  Service service = 4;
}

// Node represents the node the service is on
message Node {
  string id = 1;

  string address = 2;

  int64 port = 3;

  map<string, string> metadata = 4;

  repeated Activity activities = 5;
}

// Result is returns by the watcher
message Result {
  string action = 1;

  Service service = 2;

  int64 timestamp = 3;
}

// Service represents a olive service
message Service {
  string name = 1;

  string version = 2;

  string namespace = 3;

  map<string, string> metadata = 4;

  repeated Endpoint endpoints = 5;

  repeated Node nodes = 6;

  int64 ttl = 7;
}

// Value is an opaque value for a request or response
message Value {
  string name = 1;

  string type = 2;

  repeated Value values = 3;
}

// Response save the data from gateway Handle function
message Response {
  map<string, Box> properties = 1;
  map<string, Box> dataObjects = 2;
}

message Box {
  enum BoxType {
    Unknown = 0;
    Boolean = 1;
    Integer = 2;
    Float = 3;
    String = 4;
    Array = 5;
    Object = 6;
  }
  BoxType type = 1;
  bytes data = 2;
}