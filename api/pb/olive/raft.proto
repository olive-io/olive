/*
   Copyright 2023 The olive Authors

   This program is offered under a commercial and under the AGPL license.
   For AGPL licensing, see below.

   AGPL licensing:
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Affero General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Affero General Public License for more details.

   You should have received a copy of the GNU Affero General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

syntax = "proto3";

package olivepb;

option go_package = "github.com/olive-io/olive/api/pb/olive;olivepb";

import "github.com/olive-io/olive/api/pb/olive/internal.proto";

message InternalKV {
  bytes key = 1;
  bytes value = 2;
}

message KeyValue {
  bytes key = 1;
  bytes value = 2;
}

message RaftHeader {
  uint64 ID = 1;
}

message RaftInternalRequest {
  RaftHeader header = 1;
  RegionRangeRequest range = 2;
  RegionPutRequest put = 3;
  RegionDeleteRequest delete = 4;

  RegionDeployDefinitionRequest deploy_definition = 11;
  RegionExecuteDefinitionRequest execute_definition = 12;
}

message LoggablePutRequest  {
  bytes key = 1;
  int64 valueSize = 2;
}

message RaftResponseHeader {
  // region_id is the ID of the region which sent the response.
  uint64 region_id = 1;
  // replica_id is the ID of the replica which sent the response.
  uint64 replica_id = 2;
  // raft_term is the raft term when the request was applied.
  uint64 raft_term = 3;
}

message RegionRangeRequest {
  bytes key = 1;
  bytes range_end = 2;
  int64 limit = 3;
  bool serializable = 4;
}

message RegionRangeResponse {
  RaftResponseHeader header = 1;
  repeated KeyValue kvs = 2;
}

message RegionPutRequest {
  bytes key = 1;
  bytes value = 2;
  bool is_sync = 3;
}

message RegionPutResponse {
  RaftResponseHeader header = 1;
  KeyValue preKv = 2;
}

message RegionDeleteRequest {
  bytes key = 1;
  bool is_sync = 2;
}

message RegionDeleteResponse {
  RaftResponseHeader header = 1;
  KeyValue preKv = 2;
}

message RegionDeployDefinitionRequest {
  olivepb.Definition definition = 1;
}

message RegionDeployDefinitionResponse {
  RaftResponseHeader header = 1;
  olivepb.Definition definition = 2;
}

message RegionExecuteDefinitionRequest {
  olivepb.ProcessInstance process_instance = 1;
}

message RegionExecuteDefinitionResponse {
  RaftResponseHeader header = 1;
  olivepb.ProcessInstance process_instance = 2;
}
