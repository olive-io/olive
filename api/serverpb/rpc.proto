syntax = "proto3";

package serverpb;

import "github.com/olive-io/olive/api/serverpb/api.proto";
import "github.com/olive-io/olive/api/serverpb/raft_internal.proto";
import "gogoproto/gogo.proto";

// for grpc-gateway
import "google/api/annotations.proto";

option go_package = "github.com/olive-io/olive/api/serverpb;serverpb";

option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

service KV {
  // Range gets the keys in the range from the key-value store.
  rpc Range(RangeRequest) returns (RangeResponse) {
    option (google.api.http) = {
      post: "/v1/kv/range"
      body: "*"
    };
  }

  // Put puts the given key into the key-value store.
  // A put request increments the revision of the key-value store
  // and generates one event in the event history.
  rpc Put(PutRequest) returns (PutResponse) {
    option (google.api.http) = {
      post: "/v1/kv/put"
      body: "*"
    };
  }

  // DeleteRange deletes the given range from the key-value store.
  // A delete request increments the revision of the key-value store
  // and generates a delete event in the event history for every deleted key.
  rpc DeleteRange(DeleteRangeRequest) returns (DeleteRangeResponse) {
    option (google.api.http) = {
      post: "/v1/kv/deleterange"
      body: "*"
    };
  }

  // Txn processes multiple requests in a single transaction.
  // A txn request increments the revision of the key-value store
  // and generates events with the same revision for every completed request.
  // It is not allowed to modify the same key several times within one txn.
  rpc Txn(TxnRequest) returns (TxnResponse) {
    option (google.api.http) = {
      post: "/v1/kv/txn"
      body: "*"
    };
  }

  // Compact compacts the event history in the olive key-value store. The key-value
  // store should be periodically compacted or the event history will continue to grow
  // indefinitely.
  rpc Compact(CompactionRequest) returns (CompactionResponse) {
    option (google.api.http) = {
      post: "/v1/kv/compaction"
      body: "*"
    };
  }
}

service Watch {
  // Watch watches for events happening or that have happened. Both input and output
  // are streams; the input stream is for creating and canceling watchers and the output
  // stream sends events. One watch RPC can watch on multiple key ranges, streaming events
  // for several watches at once. The entire event history can be watched starting from the
  // last compaction revision.
  rpc Watch(stream WatchRequest) returns (stream WatchResponse) {
    option (google.api.http) = {
      post: "/v1/watch"
      body: "*"
    };
  }
}

service Lease {
  // LeaseGrant creates a lease which expires if the server does not receive a keepAlive
  // within a given time to live period. All keys attached to the lease will be expired and
  // deleted if the lease expires. Each expired key generates a delete event in the event history.
  rpc LeaseGrant(LeaseGrantRequest) returns (LeaseGrantResponse) {
    option (google.api.http) = {
      post: "/v1/lease/grant"
      body: "*"
    };
  }

  // LeaseRevoke revokes a lease. All keys attached to the lease will expire and be deleted.
  rpc LeaseRevoke(LeaseRevokeRequest) returns (LeaseRevokeResponse) {
    option (google.api.http) = {
      post: "/v1/lease/revoke"
      body: "*"
      additional_bindings {
        post: "/v1/kv/lease/revoke"
        body: "*"
      }
    };
  }

  // LeaseKeepAlive keeps the lease alive by streaming keep alive requests from the client
  // to the server and streaming keep alive responses from the server to the client.
  rpc LeaseKeepAlive(stream LeaseKeepAliveRequest) returns (stream LeaseKeepAliveResponse) {
    option (google.api.http) = {
      post: "/v1/lease/keepalive"
      body: "*"
    };
  }

  // LeaseTimeToLive retrieves lease information.
  rpc LeaseTimeToLive(LeaseTimeToLiveRequest) returns (LeaseTimeToLiveResponse) {
    option (google.api.http) = {
      post: "/v1/lease/timetolive"
      body: "*"
      additional_bindings {
        post: "/v1/kv/lease/timetolive"
        body: "*"
      }
    };
  }

  // LeaseLeases lists all existing leases.
  rpc LeaseLeases(LeaseLeasesRequest) returns (LeaseLeasesResponse) {
    option (google.api.http) = {
      post: "/v1/lease/leases"
      body: "*"
      additional_bindings {
        post: "/v1/kv/lease/leases"
        body: "*"
      }
    };
  }
}

service Cluster {
  // MemberAdd adds a member into the cluster.
  rpc MemberAdd(MemberAddRequest) returns (MemberAddResponse) {
    option (google.api.http) = {
      post: "/v3/cluster/member/add"
      body: "*"
    };
  }

  // MemberRemove removes an existing member from the cluster.
  rpc MemberRemove(MemberRemoveRequest) returns (MemberRemoveResponse) {
    option (google.api.http) = {
      post: "/v1/cluster/member/remove"
      body: "*"
    };
  }

  // MemberUpdate updates the member configuration.
  rpc MemberUpdate(MemberUpdateRequest) returns (MemberUpdateResponse) {
    option (google.api.http) = {
      post: "/v1/cluster/member/update"
      body: "*"
    };
  }

  // MemberList lists all the members in the cluster.
  rpc MemberList(MemberListRequest) returns (MemberListResponse) {
    option (google.api.http) = {
      post: "/v1/cluster/member/list"
      body: "*"
    };
  }

  // MemberPromote promotes a member from raft learner (non-voting) to raft voting member.
  rpc MemberPromote(MemberPromoteRequest) returns (MemberPromoteResponse) {
    option (google.api.http) = {
      post: "/v1/cluster/member/promote"
      body: "*"
    };
  }
}

service Auth {
  // AuthEnable enables authentication.
  rpc AuthEnable(AuthEnableRequest) returns (AuthEnableResponse) {
    option (google.api.http) = {
      post: "/v1/auth/enable"
      body: "*"
    };
  }

  // AuthDisable disables authentication.
  rpc AuthDisable(AuthDisableRequest) returns (AuthDisableResponse) {
    option (google.api.http) = {
      post: "/v1/auth/disable"
      body: "*"
    };
  }

  // AuthStatus displays authentication status.
  rpc AuthStatus(AuthStatusRequest) returns (AuthStatusResponse) {
    option (google.api.http) = {
      post: "/v1/auth/status"
      body: "*"
    };
  }

  // Authenticate processes an authenticate request.
  rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse) {
    option (google.api.http) = {
      post: "/v1/auth/authenticate"
      body: "*"
    };
  }

  // UserAdd adds a new user. User name cannot be empty.
  rpc UserAdd(AuthUserAddRequest) returns (AuthUserAddResponse) {
    option (google.api.http) = {
      post: "/v1/auth/user/add"
      body: "*"
    };
  }

  // UserGet gets detailed user information.
  rpc UserGet(AuthUserGetRequest) returns (AuthUserGetResponse) {
    option (google.api.http) = {
      post: "/v1/auth/user/get"
      body: "*"
    };
  }

  // UserList gets a list of all users.
  rpc UserList(AuthUserListRequest) returns (AuthUserListResponse) {
    option (google.api.http) = {
      post: "/v1/auth/user/list"
      body: "*"
    };
  }

  // UserDelete deletes a specified user.
  rpc UserDelete(AuthUserDeleteRequest) returns (AuthUserDeleteResponse) {
    option (google.api.http) = {
      post: "/v1/auth/user/delete"
      body: "*"
    };
  }

  // UserChangePassword changes the password of a specified user.
  rpc UserChangePassword(AuthUserChangePasswordRequest) returns (AuthUserChangePasswordResponse) {
    option (google.api.http) = {
      post: "/v1/auth/user/changepw"
      body: "*"
    };
  }

  // UserGrant grants a role to a specified user.
  rpc UserGrantRole(AuthUserGrantRoleRequest) returns (AuthUserGrantRoleResponse) {
    option (google.api.http) = {
      post: "/v1/auth/user/grant"
      body: "*"
    };
  }

  // UserRevokeRole revokes a role of specified user.
  rpc UserRevokeRole(AuthUserRevokeRoleRequest) returns (AuthUserRevokeRoleResponse) {
    option (google.api.http) = {
      post: "/v1/auth/user/revoke"
      body: "*"
    };
  }

  // RoleAdd adds a new role. Role name cannot be empty.
  rpc RoleAdd(AuthRoleAddRequest) returns (AuthRoleAddResponse) {
    option (google.api.http) = {
      post: "/v1/auth/role/add"
      body: "*"
    };
  }

  // RoleGet gets detailed role information.
  rpc RoleGet(AuthRoleGetRequest) returns (AuthRoleGetResponse) {
    option (google.api.http) = {
      post: "/v1/auth/role/get"
      body: "*"
    };
  }

  // RoleList gets lists of all roles.
  rpc RoleList(AuthRoleListRequest) returns (AuthRoleListResponse) {
    option (google.api.http) = {
      post: "/v1/auth/role/list"
      body: "*"
    };
  }

  // RoleDelete deletes a specified role.
  rpc RoleDelete(AuthRoleDeleteRequest) returns (AuthRoleDeleteResponse) {
    option (google.api.http) = {
      post: "/v1/auth/role/delete"
      body: "*"
    };
  }

  // RoleGrantPermission grants a permission of a specified key or range to a specified role.
  rpc RoleGrantPermission(AuthRoleGrantPermissionRequest) returns (AuthRoleGrantPermissionResponse) {
    option (google.api.http) = {
      post: "/v1/auth/role/grant"
      body: "*"
    };
  }

  // RoleRevokePermission revokes a key or range permission of a specified role.
  rpc RoleRevokePermission(AuthRoleRevokePermissionRequest) returns (AuthRoleRevokePermissionResponse) {
    option (google.api.http) = {
      post: "/v1/auth/role/revoke"
      body: "*"
    };
  }
}


message RemoveDefinitionRequest {
  string id = 1;
  string name = 2;
}