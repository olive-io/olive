// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rpc/consolepb/rpc.proto

package consolepb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListDefinitionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDefinitionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDefinitionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDefinitionsRequestMultiError, or nil if none found.
func (m *ListDefinitionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDefinitionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Size

	if len(errors) > 0 {
		return ListDefinitionsRequestMultiError(errors)
	}

	return nil
}

// ListDefinitionsRequestMultiError is an error wrapping multiple validation
// errors returned by ListDefinitionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDefinitionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDefinitionsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDefinitionsRequestMultiError) AllErrors() []error { return m }

// ListDefinitionsRequestValidationError is the validation error returned by
// ListDefinitionsRequest.Validate if the designated constraints aren't met.
type ListDefinitionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDefinitionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDefinitionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDefinitionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDefinitionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDefinitionsRequestValidationError) ErrorName() string {
	return "ListDefinitionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDefinitionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDefinitionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDefinitionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDefinitionsRequestValidationError{}

// Validate checks the field values on ListDefinitionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDefinitionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDefinitionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDefinitionsResponseMultiError, or nil if none found.
func (m *ListDefinitionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDefinitionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDefinitions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDefinitionsResponseValidationError{
						field:  fmt.Sprintf("Definitions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDefinitionsResponseValidationError{
						field:  fmt.Sprintf("Definitions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDefinitionsResponseValidationError{
					field:  fmt.Sprintf("Definitions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListDefinitionsResponseMultiError(errors)
	}

	return nil
}

// ListDefinitionsResponseMultiError is an error wrapping multiple validation
// errors returned by ListDefinitionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDefinitionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDefinitionsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDefinitionsResponseMultiError) AllErrors() []error { return m }

// ListDefinitionsResponseValidationError is the validation error returned by
// ListDefinitionsResponse.Validate if the designated constraints aren't met.
type ListDefinitionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDefinitionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDefinitionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDefinitionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDefinitionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDefinitionsResponseValidationError) ErrorName() string {
	return "ListDefinitionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDefinitionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDefinitionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDefinitionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDefinitionsResponseValidationError{}

// Validate checks the field values on GetDefinitionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDefinitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDefinitionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDefinitionRequestMultiError, or nil if none found.
func (m *GetDefinitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDefinitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Version

	if len(errors) > 0 {
		return GetDefinitionRequestMultiError(errors)
	}

	return nil
}

// GetDefinitionRequestMultiError is an error wrapping multiple validation
// errors returned by GetDefinitionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDefinitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDefinitionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDefinitionRequestMultiError) AllErrors() []error { return m }

// GetDefinitionRequestValidationError is the validation error returned by
// GetDefinitionRequest.Validate if the designated constraints aren't met.
type GetDefinitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefinitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefinitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefinitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefinitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefinitionRequestValidationError) ErrorName() string {
	return "GetDefinitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefinitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefinitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefinitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefinitionRequestValidationError{}

// Validate checks the field values on GetDefinitionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDefinitionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDefinitionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDefinitionResponseMultiError, or nil if none found.
func (m *GetDefinitionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDefinitionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDefinitionResponseValidationError{
					field:  "Definition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDefinitionResponseValidationError{
					field:  "Definition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefinitionResponseValidationError{
				field:  "Definition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDefinitionResponseMultiError(errors)
	}

	return nil
}

// GetDefinitionResponseMultiError is an error wrapping multiple validation
// errors returned by GetDefinitionResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDefinitionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDefinitionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDefinitionResponseMultiError) AllErrors() []error { return m }

// GetDefinitionResponseValidationError is the validation error returned by
// GetDefinitionResponse.Validate if the designated constraints aren't met.
type GetDefinitionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefinitionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefinitionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefinitionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefinitionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefinitionResponseValidationError) ErrorName() string {
	return "GetDefinitionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefinitionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefinitionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefinitionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefinitionResponseValidationError{}

// Validate checks the field values on DeployDefinitionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeployDefinitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeployDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeployDefinitionRequestMultiError, or nil if none found.
func (m *DeployDefinitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeployDefinitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeployDefinitionRequestValidationError{
					field:  "Definition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeployDefinitionRequestValidationError{
					field:  "Definition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeployDefinitionRequestValidationError{
				field:  "Definition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeployDefinitionRequestMultiError(errors)
	}

	return nil
}

// DeployDefinitionRequestMultiError is an error wrapping multiple validation
// errors returned by DeployDefinitionRequest.ValidateAll() if the designated
// constraints aren't met.
type DeployDefinitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeployDefinitionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeployDefinitionRequestMultiError) AllErrors() []error { return m }

// DeployDefinitionRequestValidationError is the validation error returned by
// DeployDefinitionRequest.Validate if the designated constraints aren't met.
type DeployDefinitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeployDefinitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeployDefinitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeployDefinitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeployDefinitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeployDefinitionRequestValidationError) ErrorName() string {
	return "DeployDefinitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeployDefinitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeployDefinitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeployDefinitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeployDefinitionRequestValidationError{}

// Validate checks the field values on DeployDefinitionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeployDefinitionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeployDefinitionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeployDefinitionResponseMultiError, or nil if none found.
func (m *DeployDefinitionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeployDefinitionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeployDefinitionResponseValidationError{
					field:  "Definition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeployDefinitionResponseValidationError{
					field:  "Definition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeployDefinitionResponseValidationError{
				field:  "Definition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeployDefinitionResponseMultiError(errors)
	}

	return nil
}

// DeployDefinitionResponseMultiError is an error wrapping multiple validation
// errors returned by DeployDefinitionResponse.ValidateAll() if the designated
// constraints aren't met.
type DeployDefinitionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeployDefinitionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeployDefinitionResponseMultiError) AllErrors() []error { return m }

// DeployDefinitionResponseValidationError is the validation error returned by
// DeployDefinitionResponse.Validate if the designated constraints aren't met.
type DeployDefinitionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeployDefinitionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeployDefinitionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeployDefinitionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeployDefinitionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeployDefinitionResponseValidationError) ErrorName() string {
	return "DeployDefinitionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeployDefinitionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeployDefinitionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeployDefinitionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeployDefinitionResponseValidationError{}

// Validate checks the field values on ListRunnersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRunnersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRunnersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRunnersRequestMultiError, or nil if none found.
func (m *ListRunnersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRunnersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListRunnersRequestMultiError(errors)
	}

	return nil
}

// ListRunnersRequestMultiError is an error wrapping multiple validation errors
// returned by ListRunnersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRunnersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRunnersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRunnersRequestMultiError) AllErrors() []error { return m }

// ListRunnersRequestValidationError is the validation error returned by
// ListRunnersRequest.Validate if the designated constraints aren't met.
type ListRunnersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRunnersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRunnersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRunnersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRunnersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRunnersRequestValidationError) ErrorName() string {
	return "ListRunnersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRunnersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRunnersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRunnersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRunnersRequestValidationError{}

// Validate checks the field values on ListRunnersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRunnersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRunnersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRunnersResponseMultiError, or nil if none found.
func (m *ListRunnersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRunnersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRunner() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRunnersResponseValidationError{
						field:  fmt.Sprintf("Runner[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRunnersResponseValidationError{
						field:  fmt.Sprintf("Runner[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRunnersResponseValidationError{
					field:  fmt.Sprintf("Runner[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRunnersResponseMultiError(errors)
	}

	return nil
}

// ListRunnersResponseMultiError is an error wrapping multiple validation
// errors returned by ListRunnersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListRunnersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRunnersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRunnersResponseMultiError) AllErrors() []error { return m }

// ListRunnersResponseValidationError is the validation error returned by
// ListRunnersResponse.Validate if the designated constraints aren't met.
type ListRunnersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRunnersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRunnersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRunnersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRunnersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRunnersResponseValidationError) ErrorName() string {
	return "ListRunnersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRunnersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRunnersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRunnersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRunnersResponseValidationError{}
