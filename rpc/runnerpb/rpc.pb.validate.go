// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rpc/runnerpb/rpc.proto

package runnerpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetRunnerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRunnerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRunnerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRunnerRequestMultiError, or nil if none found.
func (m *GetRunnerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRunnerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetRunnerRequestMultiError(errors)
	}

	return nil
}

// GetRunnerRequestMultiError is an error wrapping multiple validation errors
// returned by GetRunnerRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRunnerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRunnerRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRunnerRequestMultiError) AllErrors() []error { return m }

// GetRunnerRequestValidationError is the validation error returned by
// GetRunnerRequest.Validate if the designated constraints aren't met.
type GetRunnerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRunnerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRunnerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRunnerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRunnerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRunnerRequestValidationError) ErrorName() string { return "GetRunnerRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRunnerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRunnerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRunnerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRunnerRequestValidationError{}

// Validate checks the field values on GetRunnerResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRunnerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRunnerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRunnerResponseMultiError, or nil if none found.
func (m *GetRunnerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRunnerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRunner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRunnerResponseValidationError{
					field:  "Runner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRunnerResponseValidationError{
					field:  "Runner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRunner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRunnerResponseValidationError{
				field:  "Runner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatistics()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRunnerResponseValidationError{
					field:  "Statistics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRunnerResponseValidationError{
					field:  "Statistics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatistics()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRunnerResponseValidationError{
				field:  "Statistics",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRunnerResponseMultiError(errors)
	}

	return nil
}

// GetRunnerResponseMultiError is an error wrapping multiple validation errors
// returned by GetRunnerResponse.ValidateAll() if the designated constraints
// aren't met.
type GetRunnerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRunnerResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRunnerResponseMultiError) AllErrors() []error { return m }

// GetRunnerResponseValidationError is the validation error returned by
// GetRunnerResponse.Validate if the designated constraints aren't met.
type GetRunnerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRunnerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRunnerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRunnerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRunnerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRunnerResponseValidationError) ErrorName() string {
	return "GetRunnerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRunnerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRunnerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRunnerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRunnerResponseValidationError{}

// Validate checks the field values on ListDefinitionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDefinitionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDefinitionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDefinitionsRequestMultiError, or nil if none found.
func (m *ListDefinitionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDefinitionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ListDefinitionsRequestMultiError(errors)
	}

	return nil
}

// ListDefinitionsRequestMultiError is an error wrapping multiple validation
// errors returned by ListDefinitionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDefinitionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDefinitionsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDefinitionsRequestMultiError) AllErrors() []error { return m }

// ListDefinitionsRequestValidationError is the validation error returned by
// ListDefinitionsRequest.Validate if the designated constraints aren't met.
type ListDefinitionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDefinitionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDefinitionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDefinitionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDefinitionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDefinitionsRequestValidationError) ErrorName() string {
	return "ListDefinitionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDefinitionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDefinitionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDefinitionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDefinitionsRequestValidationError{}

// Validate checks the field values on ListDefinitionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDefinitionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDefinitionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDefinitionsResponseMultiError, or nil if none found.
func (m *ListDefinitionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDefinitionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDefinitions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDefinitionsResponseValidationError{
						field:  fmt.Sprintf("Definitions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDefinitionsResponseValidationError{
						field:  fmt.Sprintf("Definitions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDefinitionsResponseValidationError{
					field:  fmt.Sprintf("Definitions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDefinitionsResponseMultiError(errors)
	}

	return nil
}

// ListDefinitionsResponseMultiError is an error wrapping multiple validation
// errors returned by ListDefinitionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDefinitionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDefinitionsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDefinitionsResponseMultiError) AllErrors() []error { return m }

// ListDefinitionsResponseValidationError is the validation error returned by
// ListDefinitionsResponse.Validate if the designated constraints aren't met.
type ListDefinitionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDefinitionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDefinitionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDefinitionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDefinitionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDefinitionsResponseValidationError) ErrorName() string {
	return "ListDefinitionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDefinitionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDefinitionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDefinitionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDefinitionsResponseValidationError{}

// Validate checks the field values on GetDefinitionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDefinitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDefinitionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDefinitionRequestMultiError, or nil if none found.
func (m *GetDefinitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDefinitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Version

	if len(errors) > 0 {
		return GetDefinitionRequestMultiError(errors)
	}

	return nil
}

// GetDefinitionRequestMultiError is an error wrapping multiple validation
// errors returned by GetDefinitionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDefinitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDefinitionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDefinitionRequestMultiError) AllErrors() []error { return m }

// GetDefinitionRequestValidationError is the validation error returned by
// GetDefinitionRequest.Validate if the designated constraints aren't met.
type GetDefinitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefinitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefinitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefinitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefinitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefinitionRequestValidationError) ErrorName() string {
	return "GetDefinitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefinitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefinitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefinitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefinitionRequestValidationError{}

// Validate checks the field values on GetDefinitionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDefinitionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDefinitionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDefinitionResponseMultiError, or nil if none found.
func (m *GetDefinitionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDefinitionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDefinitionResponseValidationError{
					field:  "Definition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDefinitionResponseValidationError{
					field:  "Definition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefinitionResponseValidationError{
				field:  "Definition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDefinitionResponseMultiError(errors)
	}

	return nil
}

// GetDefinitionResponseMultiError is an error wrapping multiple validation
// errors returned by GetDefinitionResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDefinitionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDefinitionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDefinitionResponseMultiError) AllErrors() []error { return m }

// GetDefinitionResponseValidationError is the validation error returned by
// GetDefinitionResponse.Validate if the designated constraints aren't met.
type GetDefinitionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefinitionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefinitionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefinitionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefinitionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefinitionResponseValidationError) ErrorName() string {
	return "GetDefinitionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefinitionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefinitionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefinitionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefinitionResponseValidationError{}

// Validate checks the field values on ListProcessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProcessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProcessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProcessRequestMultiError, or nil if none found.
func (m *ListProcessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProcessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DefinitionId

	// no validation rules for DefinitionVersion

	if len(errors) > 0 {
		return ListProcessRequestMultiError(errors)
	}

	return nil
}

// ListProcessRequestMultiError is an error wrapping multiple validation errors
// returned by ListProcessRequest.ValidateAll() if the designated constraints
// aren't met.
type ListProcessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProcessRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProcessRequestMultiError) AllErrors() []error { return m }

// ListProcessRequestValidationError is the validation error returned by
// ListProcessRequest.Validate if the designated constraints aren't met.
type ListProcessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProcessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProcessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProcessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProcessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProcessRequestValidationError) ErrorName() string {
	return "ListProcessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProcessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProcessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProcessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProcessRequestValidationError{}

// Validate checks the field values on ListProcessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProcessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProcessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProcessResponseMultiError, or nil if none found.
func (m *ListProcessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProcessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProcesses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProcessResponseValidationError{
						field:  fmt.Sprintf("Processes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProcessResponseValidationError{
						field:  fmt.Sprintf("Processes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProcessResponseValidationError{
					field:  fmt.Sprintf("Processes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProcessResponseMultiError(errors)
	}

	return nil
}

// ListProcessResponseMultiError is an error wrapping multiple validation
// errors returned by ListProcessResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProcessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProcessResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProcessResponseMultiError) AllErrors() []error { return m }

// ListProcessResponseValidationError is the validation error returned by
// ListProcessResponse.Validate if the designated constraints aren't met.
type ListProcessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProcessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProcessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProcessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProcessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProcessResponseValidationError) ErrorName() string {
	return "ListProcessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProcessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProcessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProcessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProcessResponseValidationError{}

// Validate checks the field values on GetProcessRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProcessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProcessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProcessRequestMultiError, or nil if none found.
func (m *GetProcessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProcessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DefinitionId

	// no validation rules for DefinitionVersion

	// no validation rules for Id

	if len(errors) > 0 {
		return GetProcessRequestMultiError(errors)
	}

	return nil
}

// GetProcessRequestMultiError is an error wrapping multiple validation errors
// returned by GetProcessRequest.ValidateAll() if the designated constraints
// aren't met.
type GetProcessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProcessRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProcessRequestMultiError) AllErrors() []error { return m }

// GetProcessRequestValidationError is the validation error returned by
// GetProcessRequest.Validate if the designated constraints aren't met.
type GetProcessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProcessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProcessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProcessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProcessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProcessRequestValidationError) ErrorName() string {
	return "GetProcessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProcessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProcessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProcessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProcessRequestValidationError{}

// Validate checks the field values on GetProcessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProcessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProcessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProcessResponseMultiError, or nil if none found.
func (m *GetProcessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProcessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProcess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProcessResponseValidationError{
					field:  "Process",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProcessResponseValidationError{
					field:  "Process",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProcess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProcessResponseValidationError{
				field:  "Process",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProcessResponseMultiError(errors)
	}

	return nil
}

// GetProcessResponseMultiError is an error wrapping multiple validation errors
// returned by GetProcessResponse.ValidateAll() if the designated constraints
// aren't met.
type GetProcessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProcessResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProcessResponseMultiError) AllErrors() []error { return m }

// GetProcessResponseValidationError is the validation error returned by
// GetProcessResponse.Validate if the designated constraints aren't met.
type GetProcessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProcessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProcessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProcessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProcessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProcessResponseValidationError) ErrorName() string {
	return "GetProcessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProcessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProcessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProcessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProcessResponseValidationError{}

// Validate checks the field values on RunProcessRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RunProcessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunProcessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RunProcessRequestMultiError, or nil if none found.
func (m *RunProcessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RunProcessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProcess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RunProcessRequestValidationError{
					field:  "Process",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RunProcessRequestValidationError{
					field:  "Process",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProcess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunProcessRequestValidationError{
				field:  "Process",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RunProcessRequestMultiError(errors)
	}

	return nil
}

// RunProcessRequestMultiError is an error wrapping multiple validation errors
// returned by RunProcessRequest.ValidateAll() if the designated constraints
// aren't met.
type RunProcessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunProcessRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunProcessRequestMultiError) AllErrors() []error { return m }

// RunProcessRequestValidationError is the validation error returned by
// RunProcessRequest.Validate if the designated constraints aren't met.
type RunProcessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunProcessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunProcessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunProcessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunProcessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunProcessRequestValidationError) ErrorName() string {
	return "RunProcessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RunProcessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunProcessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunProcessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunProcessRequestValidationError{}

// Validate checks the field values on RunProcessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RunProcessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunProcessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RunProcessResponseMultiError, or nil if none found.
func (m *RunProcessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RunProcessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProcess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RunProcessResponseValidationError{
					field:  "Process",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RunProcessResponseValidationError{
					field:  "Process",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProcess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunProcessResponseValidationError{
				field:  "Process",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RunProcessResponseMultiError(errors)
	}

	return nil
}

// RunProcessResponseMultiError is an error wrapping multiple validation errors
// returned by RunProcessResponse.ValidateAll() if the designated constraints
// aren't met.
type RunProcessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunProcessResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunProcessResponseMultiError) AllErrors() []error { return m }

// RunProcessResponseValidationError is the validation error returned by
// RunProcessResponse.Validate if the designated constraints aren't met.
type RunProcessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunProcessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunProcessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunProcessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunProcessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunProcessResponseValidationError) ErrorName() string {
	return "RunProcessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RunProcessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunProcessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunProcessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunProcessResponseValidationError{}
