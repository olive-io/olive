/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	v1 "github.com/olive-io/olive/apis/apidiscovery/v1"
	apidiscoveryv1 "github.com/olive-io/olive/client/generated/applyconfiguration/apidiscovery/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeEdges implements EdgeInterface
type FakeEdges struct {
	Fake *FakeApidiscoveryV1
	ns   string
}

var edgesResource = v1.SchemeGroupVersion.WithResource("edges")

var edgesKind = v1.SchemeGroupVersion.WithKind("Edge")

// Get takes name of the edge, and returns the corresponding edge object, and an error if there is any.
func (c *FakeEdges) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.Edge, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(edgesResource, c.ns, name), &v1.Edge{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.Edge), err
}

// List takes label and field selectors, and returns the list of Edges that match those selectors.
func (c *FakeEdges) List(ctx context.Context, opts metav1.ListOptions) (result *v1.EdgeList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(edgesResource, edgesKind, c.ns, opts), &v1.EdgeList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1.EdgeList{ListMeta: obj.(*v1.EdgeList).ListMeta}
	for _, item := range obj.(*v1.EdgeList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested edges.
func (c *FakeEdges) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(edgesResource, c.ns, opts))

}

// Create takes the representation of a edge and creates it.  Returns the server's representation of the edge, and an error, if there is any.
func (c *FakeEdges) Create(ctx context.Context, edge *v1.Edge, opts metav1.CreateOptions) (result *v1.Edge, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(edgesResource, c.ns, edge), &v1.Edge{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.Edge), err
}

// Update takes the representation of a edge and updates it. Returns the server's representation of the edge, and an error, if there is any.
func (c *FakeEdges) Update(ctx context.Context, edge *v1.Edge, opts metav1.UpdateOptions) (result *v1.Edge, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(edgesResource, c.ns, edge), &v1.Edge{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.Edge), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeEdges) UpdateStatus(ctx context.Context, edge *v1.Edge, opts metav1.UpdateOptions) (*v1.Edge, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(edgesResource, "status", c.ns, edge), &v1.Edge{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.Edge), err
}

// Delete takes name of the edge and deletes it. Returns an error if one occurs.
func (c *FakeEdges) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(edgesResource, c.ns, name, opts), &v1.Edge{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeEdges) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(edgesResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1.EdgeList{})
	return err
}

// Patch applies the patch and returns the patched edge.
func (c *FakeEdges) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.Edge, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(edgesResource, c.ns, name, pt, data, subresources...), &v1.Edge{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.Edge), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied edge.
func (c *FakeEdges) Apply(ctx context.Context, edge *apidiscoveryv1.EdgeApplyConfiguration, opts metav1.ApplyOptions) (result *v1.Edge, err error) {
	if edge == nil {
		return nil, fmt.Errorf("edge provided to Apply must not be nil")
	}
	data, err := json.Marshal(edge)
	if err != nil {
		return nil, err
	}
	name := edge.Name
	if name == nil {
		return nil, fmt.Errorf("edge.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(edgesResource, c.ns, *name, types.ApplyPatchType, data), &v1.Edge{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.Edge), err
}

// ApplyStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
func (c *FakeEdges) ApplyStatus(ctx context.Context, edge *apidiscoveryv1.EdgeApplyConfiguration, opts metav1.ApplyOptions) (result *v1.Edge, err error) {
	if edge == nil {
		return nil, fmt.Errorf("edge provided to Apply must not be nil")
	}
	data, err := json.Marshal(edge)
	if err != nil {
		return nil, err
	}
	name := edge.Name
	if name == nil {
		return nil, fmt.Errorf("edge.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(edgesResource, c.ns, *name, types.ApplyPatchType, data, "status"), &v1.Edge{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.Edge), err
}
