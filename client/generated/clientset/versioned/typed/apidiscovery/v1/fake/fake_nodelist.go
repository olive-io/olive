/*
   Copyright 2024 The olive Authors

   This program is offered under a commercial and under the AGPL license.
   For AGPL licensing, see below.

   AGPL licensing:
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Affero General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Affero General Public License for more details.

   You should have received a copy of the GNU Affero General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	v1 "github.com/olive-io/olive/apis/apidiscovery/v1"
	apidiscoveryv1 "github.com/olive-io/olive/client/generated/applyconfiguration/apidiscovery/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeNodeLists implements NodeListInterface
type FakeNodeLists struct {
	Fake *FakeDiscoveryV1
	ns   string
}

var nodelistsResource = v1.SchemeGroupVersion.WithResource("nodelists")

var nodelistsKind = v1.SchemeGroupVersion.WithKind("NodeList")

// Get takes name of the nodeList, and returns the corresponding nodeList object, and an error if there is any.
func (c *FakeNodeLists) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.NodeList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(nodelistsResource, c.ns, name), &v1.NodeList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.NodeList), err
}

// List takes label and field selectors, and returns the list of NodeLists that match those selectors.
func (c *FakeNodeLists) List(ctx context.Context, opts metav1.ListOptions) (result *v1.NodeListList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(nodelistsResource, nodelistsKind, c.ns, opts), &v1.NodeListList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.NodeListList), err
}

// Watch returns a watch.Interface that watches the requested nodeLists.
func (c *FakeNodeLists) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(nodelistsResource, c.ns, opts))

}

// Create takes the representation of a nodeList and creates it.  Returns the server's representation of the nodeList, and an error, if there is any.
func (c *FakeNodeLists) Create(ctx context.Context, nodeList *v1.NodeList, opts metav1.CreateOptions) (result *v1.NodeList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(nodelistsResource, c.ns, nodeList), &v1.NodeList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.NodeList), err
}

// Update takes the representation of a nodeList and updates it. Returns the server's representation of the nodeList, and an error, if there is any.
func (c *FakeNodeLists) Update(ctx context.Context, nodeList *v1.NodeList, opts metav1.UpdateOptions) (result *v1.NodeList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(nodelistsResource, c.ns, nodeList), &v1.NodeList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.NodeList), err
}

// Delete takes name of the nodeList and deletes it. Returns an error if one occurs.
func (c *FakeNodeLists) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(nodelistsResource, c.ns, name, opts), &v1.NodeList{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeNodeLists) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(nodelistsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1.NodeListList{})
	return err
}

// Patch applies the patch and returns the patched nodeList.
func (c *FakeNodeLists) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.NodeList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(nodelistsResource, c.ns, name, pt, data, subresources...), &v1.NodeList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.NodeList), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied nodeList.
func (c *FakeNodeLists) Apply(ctx context.Context, nodeList *apidiscoveryv1.NodeListApplyConfiguration, opts metav1.ApplyOptions) (result *v1.NodeList, err error) {
	if nodeList == nil {
		return nil, fmt.Errorf("nodeList provided to Apply must not be nil")
	}
	data, err := json.Marshal(nodeList)
	if err != nil {
		return nil, err
	}
	name := nodeList.Name
	if name == nil {
		return nil, fmt.Errorf("nodeList.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(nodelistsResource, c.ns, *name, types.ApplyPatchType, data), &v1.NodeList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1.NodeList), err
}
