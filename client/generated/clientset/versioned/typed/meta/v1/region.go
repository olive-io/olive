/*
   Copyright 2024 The olive Authors

   This program is offered under a commercial and under the AGPL license.
   For AGPL licensing, see below.

   AGPL licensing:
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Affero General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Affero General Public License for more details.

   You should have received a copy of the GNU Affero General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"
	json "encoding/json"
	"fmt"
	"time"

	v1 "github.com/olive-io/olive/apis/meta/v1"
	applyconfigurationmetav1 "github.com/olive-io/olive/client/generated/applyconfiguration/meta/v1"
	scheme "github.com/olive-io/olive/client/generated/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// RegionsGetter has a method to return a RegionInterface.
// A group's client should implement this interface.
type RegionsGetter interface {
	Regions() RegionInterface
}

// RegionInterface has methods to work with Region resources.
type RegionInterface interface {
	Create(ctx context.Context, region *v1.Region, opts metav1.CreateOptions) (*v1.Region, error)
	Update(ctx context.Context, region *v1.Region, opts metav1.UpdateOptions) (*v1.Region, error)
	UpdateStatus(ctx context.Context, region *v1.Region, opts metav1.UpdateOptions) (*v1.Region, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.Region, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.RegionList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.Region, err error)
	Apply(ctx context.Context, region *applyconfigurationmetav1.RegionApplyConfiguration, opts metav1.ApplyOptions) (result *v1.Region, err error)
	ApplyStatus(ctx context.Context, region *applyconfigurationmetav1.RegionApplyConfiguration, opts metav1.ApplyOptions) (result *v1.Region, err error)
	RegionExpansion
}

// regions implements RegionInterface
type regions struct {
	client rest.Interface
}

// newRegions returns a Regions
func newRegions(c *MetaV1Client) *regions {
	return &regions{
		client: c.RESTClient(),
	}
}

// Get takes name of the region, and returns the corresponding region object, and an error if there is any.
func (c *regions) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.Region, err error) {
	result = &v1.Region{}
	err = c.client.Get().
		Resource("regions").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Regions that match those selectors.
func (c *regions) List(ctx context.Context, opts metav1.ListOptions) (result *v1.RegionList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.RegionList{}
	err = c.client.Get().
		Resource("regions").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested regions.
func (c *regions) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Resource("regions").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a region and creates it.  Returns the server's representation of the region, and an error, if there is any.
func (c *regions) Create(ctx context.Context, region *v1.Region, opts metav1.CreateOptions) (result *v1.Region, err error) {
	result = &v1.Region{}
	err = c.client.Post().
		Resource("regions").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(region).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a region and updates it. Returns the server's representation of the region, and an error, if there is any.
func (c *regions) Update(ctx context.Context, region *v1.Region, opts metav1.UpdateOptions) (result *v1.Region, err error) {
	result = &v1.Region{}
	err = c.client.Put().
		Resource("regions").
		Name(region.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(region).
		Do(ctx).
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *regions) UpdateStatus(ctx context.Context, region *v1.Region, opts metav1.UpdateOptions) (result *v1.Region, err error) {
	result = &v1.Region{}
	err = c.client.Put().
		Resource("regions").
		Name(region.Name).
		SubResource("status").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(region).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the region and deletes it. Returns an error if one occurs.
func (c *regions) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	return c.client.Delete().
		Resource("regions").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *regions) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Resource("regions").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched region.
func (c *regions) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.Region, err error) {
	result = &v1.Region{}
	err = c.client.Patch(pt).
		Resource("regions").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}

// Apply takes the given apply declarative configuration, applies it and returns the applied region.
func (c *regions) Apply(ctx context.Context, region *applyconfigurationmetav1.RegionApplyConfiguration, opts metav1.ApplyOptions) (result *v1.Region, err error) {
	if region == nil {
		return nil, fmt.Errorf("region provided to Apply must not be nil")
	}
	patchOpts := opts.ToPatchOptions()
	data, err := json.Marshal(region)
	if err != nil {
		return nil, err
	}
	name := region.Name
	if name == nil {
		return nil, fmt.Errorf("region.Name must be provided to Apply")
	}
	result = &v1.Region{}
	err = c.client.Patch(types.ApplyPatchType).
		Resource("regions").
		Name(*name).
		VersionedParams(&patchOpts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}

// ApplyStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
func (c *regions) ApplyStatus(ctx context.Context, region *applyconfigurationmetav1.RegionApplyConfiguration, opts metav1.ApplyOptions) (result *v1.Region, err error) {
	if region == nil {
		return nil, fmt.Errorf("region provided to Apply must not be nil")
	}
	patchOpts := opts.ToPatchOptions()
	data, err := json.Marshal(region)
	if err != nil {
		return nil, err
	}

	name := region.Name
	if name == nil {
		return nil, fmt.Errorf("region.Name must be provided to Apply")
	}

	result = &v1.Region{}
	err = c.client.Patch(types.ApplyPatchType).
		Resource("regions").
		Name(*name).
		SubResource("status").
		VersionedParams(&patchOpts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
