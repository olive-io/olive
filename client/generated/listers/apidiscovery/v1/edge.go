/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/olive-io/olive/apis/apidiscovery/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EdgeLister helps list Edges.
// All objects returned here must be treated as read-only.
type EdgeLister interface {
	// List lists all Edges in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Edge, err error)
	// Edges returns an object that can list and get Edges.
	Edges(namespace string) EdgeNamespaceLister
	EdgeListerExpansion
}

// edgeLister implements the EdgeLister interface.
type edgeLister struct {
	indexer cache.Indexer
}

// NewEdgeLister returns a new EdgeLister.
func NewEdgeLister(indexer cache.Indexer) EdgeLister {
	return &edgeLister{indexer: indexer}
}

// List lists all Edges in the indexer.
func (s *edgeLister) List(selector labels.Selector) (ret []*v1.Edge, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Edge))
	})
	return ret, err
}

// Edges returns an object that can list and get Edges.
func (s *edgeLister) Edges(namespace string) EdgeNamespaceLister {
	return edgeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EdgeNamespaceLister helps list and get Edges.
// All objects returned here must be treated as read-only.
type EdgeNamespaceLister interface {
	// List lists all Edges in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Edge, err error)
	// Get retrieves the Edge from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Edge, error)
	EdgeNamespaceListerExpansion
}

// edgeNamespaceLister implements the EdgeNamespaceLister
// interface.
type edgeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Edges in the indexer for a given namespace.
func (s edgeNamespaceLister) List(selector labels.Selector) (ret []*v1.Edge, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Edge))
	})
	return ret, err
}

// Get retrieves the Edge from the indexer for a given namespace and name.
func (s edgeNamespaceLister) Get(name string) (*v1.Edge, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("edge"), name)
	}
	return obj.(*v1.Edge), nil
}
