/*
   Copyright 2024 The olive Authors

   This program is offered under a commercial and under the AGPL license.
   For AGPL licensing, see below.

   AGPL licensing:
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Affero General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Affero General Public License for more details.

   You should have received a copy of the GNU Affero General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/olive-io/olive/apis/apidiscovery/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EndpointListLister helps list EndpointLists.
// All objects returned here must be treated as read-only.
type EndpointListLister interface {
	// List lists all EndpointLists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.EndpointList, err error)
	// EndpointLists returns an object that can list and get EndpointLists.
	EndpointLists(namespace string) EndpointListNamespaceLister
	EndpointListListerExpansion
}

// endpointListLister implements the EndpointListLister interface.
type endpointListLister struct {
	indexer cache.Indexer
}

// NewEndpointListLister returns a new EndpointListLister.
func NewEndpointListLister(indexer cache.Indexer) EndpointListLister {
	return &endpointListLister{indexer: indexer}
}

// List lists all EndpointLists in the indexer.
func (s *endpointListLister) List(selector labels.Selector) (ret []*v1.EndpointList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.EndpointList))
	})
	return ret, err
}

// EndpointLists returns an object that can list and get EndpointLists.
func (s *endpointListLister) EndpointLists(namespace string) EndpointListNamespaceLister {
	return endpointListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EndpointListNamespaceLister helps list and get EndpointLists.
// All objects returned here must be treated as read-only.
type EndpointListNamespaceLister interface {
	// List lists all EndpointLists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.EndpointList, err error)
	// Get retrieves the EndpointList from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.EndpointList, error)
	EndpointListNamespaceListerExpansion
}

// endpointListNamespaceLister implements the EndpointListNamespaceLister
// interface.
type endpointListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EndpointLists in the indexer for a given namespace.
func (s endpointListNamespaceLister) List(selector labels.Selector) (ret []*v1.EndpointList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.EndpointList))
	})
	return ret, err
}

// Get retrieves the EndpointList from the indexer for a given namespace and name.
func (s endpointListNamespaceLister) Get(name string) (*v1.EndpointList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("endpointlist"), name)
	}
	return obj.(*v1.EndpointList), nil
}
