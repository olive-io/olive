/*
   Copyright 2024 The olive Authors

   This program is offered under a commercial and under the AGPL license.
   For AGPL licensing, see below.

   AGPL licensing:
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Affero General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Affero General Public License for more details.

   You should have received a copy of the GNU Affero General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/olive-io/olive/apis/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProcessInstanceLister helps list ProcessInstances.
// All objects returned here must be treated as read-only.
type ProcessInstanceLister interface {
	// List lists all ProcessInstances in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ProcessInstance, err error)
	// ProcessInstances returns an object that can list and get ProcessInstances.
	ProcessInstances(namespace string) ProcessInstanceNamespaceLister
	ProcessInstanceListerExpansion
}

// processInstanceLister implements the ProcessInstanceLister interface.
type processInstanceLister struct {
	indexer cache.Indexer
}

// NewProcessInstanceLister returns a new ProcessInstanceLister.
func NewProcessInstanceLister(indexer cache.Indexer) ProcessInstanceLister {
	return &processInstanceLister{indexer: indexer}
}

// List lists all ProcessInstances in the indexer.
func (s *processInstanceLister) List(selector labels.Selector) (ret []*v1.ProcessInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ProcessInstance))
	})
	return ret, err
}

// ProcessInstances returns an object that can list and get ProcessInstances.
func (s *processInstanceLister) ProcessInstances(namespace string) ProcessInstanceNamespaceLister {
	return processInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProcessInstanceNamespaceLister helps list and get ProcessInstances.
// All objects returned here must be treated as read-only.
type ProcessInstanceNamespaceLister interface {
	// List lists all ProcessInstances in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ProcessInstance, err error)
	// Get retrieves the ProcessInstance from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ProcessInstance, error)
	ProcessInstanceNamespaceListerExpansion
}

// processInstanceNamespaceLister implements the ProcessInstanceNamespaceLister
// interface.
type processInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProcessInstances in the indexer for a given namespace.
func (s processInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1.ProcessInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ProcessInstance))
	})
	return ret, err
}

// Get retrieves the ProcessInstance from the indexer for a given namespace and name.
func (s processInstanceNamespaceLister) Get(name string) (*v1.ProcessInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("processinstance"), name)
	}
	return obj.(*v1.ProcessInstance), nil
}
