/*
   Copyright 2024 The olive Authors

   This program is offered under a commercial and under the AGPL license.
   For AGPL licensing, see below.

   AGPL licensing:
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Affero General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Affero General Public License for more details.

   You should have received a copy of the GNU Affero General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by informer-gen. DO NOT EDIT.

package v1

import (
	internalinterfaces "github.com/olive-io/olive/client/generated/informers/externalversions/internalinterfaces"
)

// Interface provides access to all the informers in this group version.
type Interface interface {
	// Regions returns a RegionInformer.
	Regions() RegionInformer
	// RegionLists returns a RegionListInformer.
	RegionLists() RegionListInformer
	// Runners returns a RunnerInformer.
	Runners() RunnerInformer
	// RunnerLists returns a RunnerListInformer.
	RunnerLists() RunnerListInformer
}

type version struct {
	factory          internalinterfaces.SharedInformerFactory
	namespace        string
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// New returns a new Interface.
func New(f internalinterfaces.SharedInformerFactory, namespace string, tweakListOptions internalinterfaces.TweakListOptionsFunc) Interface {
	return &version{factory: f, namespace: namespace, tweakListOptions: tweakListOptions}
}

// Regions returns a RegionInformer.
func (v *version) Regions() RegionInformer {
	return &regionInformer{factory: v.factory, tweakListOptions: v.tweakListOptions}
}

// RegionLists returns a RegionListInformer.
func (v *version) RegionLists() RegionListInformer {
	return &regionListInformer{factory: v.factory, tweakListOptions: v.tweakListOptions}
}

// Runners returns a RunnerInformer.
func (v *version) Runners() RunnerInformer {
	return &runnerInformer{factory: v.factory, tweakListOptions: v.tweakListOptions}
}

// RunnerLists returns a RunnerListInformer.
func (v *version) RunnerLists() RunnerListInformer {
	return &runnerListInformer{factory: v.factory, tweakListOptions: v.tweakListOptions}
}
