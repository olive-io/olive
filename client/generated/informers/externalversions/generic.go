/*
   Copyright 2024 The olive Authors

   This program is offered under a commercial and under the AGPL license.
   For AGPL licensing, see below.

   AGPL licensing:
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Affero General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Affero General Public License for more details.

   You should have received a copy of the GNU Affero General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by informer-gen. DO NOT EDIT.

package externalversions

import (
	"fmt"

	v1 "github.com/olive-io/olive/apis/apidiscovery/v1"
	corev1 "github.com/olive-io/olive/apis/core/v1"
	metav1 "github.com/olive-io/olive/apis/meta/v1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	cache "k8s.io/client-go/tools/cache"
)

// GenericInformer is type of SharedIndexInformer which will locate and delegate to other
// sharedInformers based on type
type GenericInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() cache.GenericLister
}

type genericInformer struct {
	informer cache.SharedIndexInformer
	resource schema.GroupResource
}

// Informer returns the SharedIndexInformer.
func (f *genericInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

// Lister returns the GenericLister.
func (f *genericInformer) Lister() cache.GenericLister {
	return cache.NewGenericLister(f.Informer().GetIndexer(), f.resource)
}

// ForResource gives generic access to a shared informer of the matching type
// TODO extend this to unknown resources with a client pool
func (f *sharedInformerFactory) ForResource(resource schema.GroupVersionResource) (GenericInformer, error) {
	switch resource {
	// Group=discovery.olive.io, Version=v1
	case v1.SchemeGroupVersion.WithResource("consumers"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Discovery().V1().Consumers().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("consumerlists"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Discovery().V1().ConsumerLists().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("endpoints"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Discovery().V1().Endpoints().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("endpointlists"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Discovery().V1().EndpointLists().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("nodes"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Discovery().V1().Nodes().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("nodelists"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Discovery().V1().NodeLists().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("services"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Discovery().V1().Services().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("servicelists"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Discovery().V1().ServiceLists().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("yards"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Discovery().V1().Yards().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("yardlists"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Discovery().V1().YardLists().Informer()}, nil

		// Group=meta.olive.io, Version=v1
	case metav1.SchemeGroupVersion.WithResource("regions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Meta().V1().Regions().Informer()}, nil
	case metav1.SchemeGroupVersion.WithResource("regionlists"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Meta().V1().RegionLists().Informer()}, nil
	case metav1.SchemeGroupVersion.WithResource("runners"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Meta().V1().Runners().Informer()}, nil
	case metav1.SchemeGroupVersion.WithResource("runnerlists"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Meta().V1().RunnerLists().Informer()}, nil

		// Group=olive.io, Version=v1
	case corev1.SchemeGroupVersion.WithResource("definitions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Olive().V1().Definitions().Informer()}, nil
	case corev1.SchemeGroupVersion.WithResource("definitionlists"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Olive().V1().DefinitionLists().Informer()}, nil
	case corev1.SchemeGroupVersion.WithResource("processinstances"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Olive().V1().ProcessInstances().Informer()}, nil
	case corev1.SchemeGroupVersion.WithResource("processinstancelists"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Olive().V1().ProcessInstanceLists().Informer()}, nil

	}

	return nil, fmt.Errorf("no informer found for %v", resource)
}
