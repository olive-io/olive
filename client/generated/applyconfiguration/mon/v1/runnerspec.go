/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// RunnerSpecApplyConfiguration represents an declarative configuration of the RunnerSpec type for use
// with apply.
type RunnerSpecApplyConfiguration struct {
	ID         *uint64  `json:"id,omitempty"`
	Name       *string  `json:"name,omitempty"`
	PeerURLs   []string `json:"peerURLs,omitempty"`
	ClientURLs []string `json:"clientURLs,omitempty"`
	IsLearner  *bool    `json:"isLearner,omitempty"`
}

// RunnerSpecApplyConfiguration constructs an declarative configuration of the RunnerSpec type for use with
// apply.
func RunnerSpec() *RunnerSpecApplyConfiguration {
	return &RunnerSpecApplyConfiguration{}
}

// WithID sets the ID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ID field is set to the value of the last call.
func (b *RunnerSpecApplyConfiguration) WithID(value uint64) *RunnerSpecApplyConfiguration {
	b.ID = &value
	return b
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *RunnerSpecApplyConfiguration) WithName(value string) *RunnerSpecApplyConfiguration {
	b.Name = &value
	return b
}

// WithPeerURLs adds the given value to the PeerURLs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the PeerURLs field.
func (b *RunnerSpecApplyConfiguration) WithPeerURLs(values ...string) *RunnerSpecApplyConfiguration {
	for i := range values {
		b.PeerURLs = append(b.PeerURLs, values[i])
	}
	return b
}

// WithClientURLs adds the given value to the ClientURLs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ClientURLs field.
func (b *RunnerSpecApplyConfiguration) WithClientURLs(values ...string) *RunnerSpecApplyConfiguration {
	for i := range values {
		b.ClientURLs = append(b.ClientURLs, values[i])
	}
	return b
}

// WithIsLearner sets the IsLearner field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IsLearner field is set to the value of the last call.
func (b *RunnerSpecApplyConfiguration) WithIsLearner(value bool) *RunnerSpecApplyConfiguration {
	b.IsLearner = &value
	return b
}
