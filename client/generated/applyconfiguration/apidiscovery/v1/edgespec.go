/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// EdgeSpecApplyConfiguration represents an declarative configuration of the EdgeSpec type for use
// with apply.
type EdgeSpecApplyConfiguration struct {
	Address   *string                               `json:"address,omitempty"`
	Endpoints map[string]EndpointApplyConfiguration `json:"endpoints,omitempty"`
}

// EdgeSpecApplyConfiguration constructs an declarative configuration of the EdgeSpec type for use with
// apply.
func EdgeSpec() *EdgeSpecApplyConfiguration {
	return &EdgeSpecApplyConfiguration{}
}

// WithAddress sets the Address field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Address field is set to the value of the last call.
func (b *EdgeSpecApplyConfiguration) WithAddress(value string) *EdgeSpecApplyConfiguration {
	b.Address = &value
	return b
}

// WithEndpoints puts the entries into the Endpoints field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Endpoints field,
// overwriting an existing map entries in Endpoints field with the same key.
func (b *EdgeSpecApplyConfiguration) WithEndpoints(entries map[string]EndpointApplyConfiguration) *EdgeSpecApplyConfiguration {
	if b.Endpoints == nil && len(entries) > 0 {
		b.Endpoints = make(map[string]EndpointApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.Endpoints[k] = v
	}
	return b
}
