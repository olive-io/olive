/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"
	json "encoding/json"
	"fmt"
	"time"

	v1 "github.com/olive-io/olive/apis/core/v1"
	corev1 "github.com/olive-io/olive/client-go/generated/applyconfiguration/core/v1"
	scheme "github.com/olive-io/olive/client-go/generated/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// RunnerStatsGetter has a method to return a RunnerStatInterface.
// A group's client should implement this interface.
type RunnerStatsGetter interface {
	RunnerStats() RunnerStatInterface
}

// RunnerStatInterface has methods to work with RunnerStat resources.
type RunnerStatInterface interface {
	Update(ctx context.Context, runnerStat *v1.RunnerStat, opts metav1.UpdateOptions) (*v1.RunnerStat, error)
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.RunnerStat, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.RunnerStatList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.RunnerStat, err error)
	Apply(ctx context.Context, runnerStat *corev1.RunnerStatApplyConfiguration, opts metav1.ApplyOptions) (result *v1.RunnerStat, err error)
	RunnerStatExpansion
}

// runnerStats implements RunnerStatInterface
type runnerStats struct {
	client rest.Interface
}

// newRunnerStats returns a RunnerStats
func newRunnerStats(c *CoreV1Client) *runnerStats {
	return &runnerStats{
		client: c.RESTClient(),
	}
}

// Get takes name of the runnerStat, and returns the corresponding runnerStat object, and an error if there is any.
func (c *runnerStats) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.RunnerStat, err error) {
	result = &v1.RunnerStat{}
	err = c.client.Get().
		Resource("runnerstats").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of RunnerStats that match those selectors.
func (c *runnerStats) List(ctx context.Context, opts metav1.ListOptions) (result *v1.RunnerStatList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.RunnerStatList{}
	err = c.client.Get().
		Resource("runnerstats").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested runnerStats.
func (c *runnerStats) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Resource("runnerstats").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Update takes the representation of a runnerStat and updates it. Returns the server's representation of the runnerStat, and an error, if there is any.
func (c *runnerStats) Update(ctx context.Context, runnerStat *v1.RunnerStat, opts metav1.UpdateOptions) (result *v1.RunnerStat, err error) {
	result = &v1.RunnerStat{}
	err = c.client.Put().
		Resource("runnerstats").
		Name(runnerStat.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(runnerStat).
		Do(ctx).
		Into(result)
	return
}

// Patch applies the patch and returns the patched runnerStat.
func (c *runnerStats) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.RunnerStat, err error) {
	result = &v1.RunnerStat{}
	err = c.client.Patch(pt).
		Resource("runnerstats").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}

// Apply takes the given apply declarative configuration, applies it and returns the applied runnerStat.
func (c *runnerStats) Apply(ctx context.Context, runnerStat *corev1.RunnerStatApplyConfiguration, opts metav1.ApplyOptions) (result *v1.RunnerStat, err error) {
	if runnerStat == nil {
		return nil, fmt.Errorf("runnerStat provided to Apply must not be nil")
	}
	patchOpts := opts.ToPatchOptions()
	data, err := json.Marshal(runnerStat)
	if err != nil {
		return nil, err
	}
	name := runnerStat.Name
	if name == nil {
		return nil, fmt.Errorf("runnerStat.Name must be provided to Apply")
	}
	result = &v1.RunnerStat{}
	err = c.client.Patch(types.ApplyPatchType).
		Resource("runnerstats").
		Name(*name).
		VersionedParams(&patchOpts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
