/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	v1 "github.com/olive-io/olive/apis/core/v1"
	corev1 "github.com/olive-io/olive/client-go/generated/applyconfiguration/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	testing "k8s.io/client-go/testing"
)

// FakeRunnerStats implements RunnerStatInterface
type FakeRunnerStats struct {
	Fake *FakeCoreV1
}

var runnerstatsResource = v1.SchemeGroupVersion.WithResource("runnerstats")

var runnerstatsKind = v1.SchemeGroupVersion.WithKind("RunnerStat")

// Create takes the representation of a runnerStat and creates it.  Returns the server's representation of the runnerStat, and an error, if there is any.
func (c *FakeRunnerStats) Create(ctx context.Context, runnerStat *v1.RunnerStat, opts metav1.CreateOptions) (result *v1.RunnerStat, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(runnerstatsResource, runnerStat), &v1.RunnerStat{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1.RunnerStat), err
}

// Delete takes name of the runnerStat and deletes it. Returns an error if one occurs.
func (c *FakeRunnerStats) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(runnerstatsResource, name, opts), &v1.RunnerStat{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeRunnerStats) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(runnerstatsResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1.RunnerStatList{})
	return err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied runnerStat.
func (c *FakeRunnerStats) Apply(ctx context.Context, runnerStat *corev1.RunnerStatApplyConfiguration, opts metav1.ApplyOptions) (result *v1.RunnerStat, err error) {
	if runnerStat == nil {
		return nil, fmt.Errorf("runnerStat provided to Apply must not be nil")
	}
	data, err := json.Marshal(runnerStat)
	if err != nil {
		return nil, err
	}
	name := runnerStat.Name
	if name == nil {
		return nil, fmt.Errorf("runnerStat.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(runnerstatsResource, *name, types.ApplyPatchType, data), &v1.RunnerStat{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1.RunnerStat), err
}
