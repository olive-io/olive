/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/olive-io/olive/apis/core/v1"
	corev1 "github.com/olive-io/olive/client-go/generated/applyconfiguration/core/v1"
	typedcorev1 "github.com/olive-io/olive/client-go/generated/clientset/versioned/typed/core/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeDefinitions implements DefinitionInterface
type fakeDefinitions struct {
	*gentype.FakeClientWithListAndApply[*v1.Definition, *v1.DefinitionList, *corev1.DefinitionApplyConfiguration]
	Fake *FakeCoreV1
}

func newFakeDefinitions(fake *FakeCoreV1, namespace string) typedcorev1.DefinitionInterface {
	return &fakeDefinitions{
		gentype.NewFakeClientWithListAndApply[*v1.Definition, *v1.DefinitionList, *corev1.DefinitionApplyConfiguration](
			fake.Fake,
			namespace,
			v1.SchemeGroupVersion.WithResource("definitions"),
			v1.SchemeGroupVersion.WithKind("Definition"),
			func() *v1.Definition { return &v1.Definition{} },
			func() *v1.DefinitionList { return &v1.DefinitionList{} },
			func(dst, src *v1.DefinitionList) { dst.ListMeta = src.ListMeta },
			func(list *v1.DefinitionList) []*v1.Definition { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.DefinitionList, items []*v1.Definition) { list.Items = gentype.FromPointerSlice(items) },
		),
		fake,
	}
}
