/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/olive-io/olive/apis/core/v1"
)

// RunnerStatusApplyConfiguration represents an declarative configuration of the RunnerStatus type for use
// with apply.
type RunnerStatusApplyConfiguration struct {
	Capacity    *v1.ResourceList                    `json:"capacity,omitempty"`
	Allocatable *v1.ResourceList                    `json:"allocatable,omitempty"`
	Conditions  []RunnerConditionApplyConfiguration `json:"conditions,omitempty"`
	Phase       *v1.RunnerPhase                     `json:"phase,omitempty"`
	Message     *string                             `json:"message,omitempty"`
	Stat        *RunnerStatApplyConfiguration       `json:"stat,omitempty"`
}

// RunnerStatusApplyConfiguration constructs an declarative configuration of the RunnerStatus type for use with
// apply.
func RunnerStatus() *RunnerStatusApplyConfiguration {
	return &RunnerStatusApplyConfiguration{}
}

// WithCapacity sets the Capacity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Capacity field is set to the value of the last call.
func (b *RunnerStatusApplyConfiguration) WithCapacity(value v1.ResourceList) *RunnerStatusApplyConfiguration {
	b.Capacity = &value
	return b
}

// WithAllocatable sets the Allocatable field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Allocatable field is set to the value of the last call.
func (b *RunnerStatusApplyConfiguration) WithAllocatable(value v1.ResourceList) *RunnerStatusApplyConfiguration {
	b.Allocatable = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *RunnerStatusApplyConfiguration) WithConditions(values ...*RunnerConditionApplyConfiguration) *RunnerStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithPhase sets the Phase field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Phase field is set to the value of the last call.
func (b *RunnerStatusApplyConfiguration) WithPhase(value v1.RunnerPhase) *RunnerStatusApplyConfiguration {
	b.Phase = &value
	return b
}

// WithMessage sets the Message field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Message field is set to the value of the last call.
func (b *RunnerStatusApplyConfiguration) WithMessage(value string) *RunnerStatusApplyConfiguration {
	b.Message = &value
	return b
}

// WithStat sets the Stat field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Stat field is set to the value of the last call.
func (b *RunnerStatusApplyConfiguration) WithStat(value *RunnerStatApplyConfiguration) *RunnerStatusApplyConfiguration {
	b.Stat = value
	return b
}
