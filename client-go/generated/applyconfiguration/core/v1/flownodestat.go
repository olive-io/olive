/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// FlowNodeStatApplyConfiguration represents a declarative configuration of the FlowNodeStat type for use
// with apply.
type FlowNodeStatApplyConfiguration struct {
	Id        *string                           `json:"id,omitempty"`
	Name      *string                           `json:"name,omitempty"`
	Context   *ProcessContextApplyConfiguration `json:"context,omitempty"`
	Retries   *int32                            `json:"retries,omitempty"`
	Message   *string                           `json:"message,omitempty"`
	StartTime *int64                            `json:"startTime,omitempty"`
	EndTime   *int64                            `json:"endTime,omitempty"`
}

// FlowNodeStatApplyConfiguration constructs a declarative configuration of the FlowNodeStat type for use with
// apply.
func FlowNodeStat() *FlowNodeStatApplyConfiguration {
	return &FlowNodeStatApplyConfiguration{}
}

// WithId sets the Id field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Id field is set to the value of the last call.
func (b *FlowNodeStatApplyConfiguration) WithId(value string) *FlowNodeStatApplyConfiguration {
	b.Id = &value
	return b
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *FlowNodeStatApplyConfiguration) WithName(value string) *FlowNodeStatApplyConfiguration {
	b.Name = &value
	return b
}

// WithContext sets the Context field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Context field is set to the value of the last call.
func (b *FlowNodeStatApplyConfiguration) WithContext(value *ProcessContextApplyConfiguration) *FlowNodeStatApplyConfiguration {
	b.Context = value
	return b
}

// WithRetries sets the Retries field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Retries field is set to the value of the last call.
func (b *FlowNodeStatApplyConfiguration) WithRetries(value int32) *FlowNodeStatApplyConfiguration {
	b.Retries = &value
	return b
}

// WithMessage sets the Message field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Message field is set to the value of the last call.
func (b *FlowNodeStatApplyConfiguration) WithMessage(value string) *FlowNodeStatApplyConfiguration {
	b.Message = &value
	return b
}

// WithStartTime sets the StartTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StartTime field is set to the value of the last call.
func (b *FlowNodeStatApplyConfiguration) WithStartTime(value int64) *FlowNodeStatApplyConfiguration {
	b.StartTime = &value
	return b
}

// WithEndTime sets the EndTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EndTime field is set to the value of the last call.
func (b *FlowNodeStatApplyConfiguration) WithEndTime(value int64) *FlowNodeStatApplyConfiguration {
	b.EndTime = &value
	return b
}
