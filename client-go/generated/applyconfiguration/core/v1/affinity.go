/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// AffinityApplyConfiguration represents an declarative configuration of the Affinity type for use
// with apply.
type AffinityApplyConfiguration struct {
	RunnerAffinity     *RunnerAffinityApplyConfiguration     `json:"runnerAffinity,omitempty"`
	RegionAffinity     *RegionAffinityApplyConfiguration     `json:"regionAffinity,omitempty"`
	RegionAntiAffinity *RegionAntiAffinityApplyConfiguration `json:"regionAntiAffinity,omitempty"`
}

// AffinityApplyConfiguration constructs an declarative configuration of the Affinity type for use with
// apply.
func Affinity() *AffinityApplyConfiguration {
	return &AffinityApplyConfiguration{}
}

// WithRunnerAffinity sets the RunnerAffinity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RunnerAffinity field is set to the value of the last call.
func (b *AffinityApplyConfiguration) WithRunnerAffinity(value *RunnerAffinityApplyConfiguration) *AffinityApplyConfiguration {
	b.RunnerAffinity = value
	return b
}

// WithRegionAffinity sets the RegionAffinity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RegionAffinity field is set to the value of the last call.
func (b *AffinityApplyConfiguration) WithRegionAffinity(value *RegionAffinityApplyConfiguration) *AffinityApplyConfiguration {
	b.RegionAffinity = value
	return b
}

// WithRegionAntiAffinity sets the RegionAntiAffinity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RegionAntiAffinity field is set to the value of the last call.
func (b *AffinityApplyConfiguration) WithRegionAntiAffinity(value *RegionAntiAffinityApplyConfiguration) *AffinityApplyConfiguration {
	b.RegionAntiAffinity = value
	return b
}
