/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// RunnerSelectorTermApplyConfiguration represents an declarative configuration of the RunnerSelectorTerm type for use
// with apply.
type RunnerSelectorTermApplyConfiguration struct {
	MatchExpressions []RunnerSelectorRequirementApplyConfiguration `json:"matchExpressions,omitempty"`
	MatchFields      []RunnerSelectorRequirementApplyConfiguration `json:"matchFields,omitempty"`
}

// RunnerSelectorTermApplyConfiguration constructs an declarative configuration of the RunnerSelectorTerm type for use with
// apply.
func RunnerSelectorTerm() *RunnerSelectorTermApplyConfiguration {
	return &RunnerSelectorTermApplyConfiguration{}
}

// WithMatchExpressions adds the given value to the MatchExpressions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the MatchExpressions field.
func (b *RunnerSelectorTermApplyConfiguration) WithMatchExpressions(values ...*RunnerSelectorRequirementApplyConfiguration) *RunnerSelectorTermApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithMatchExpressions")
		}
		b.MatchExpressions = append(b.MatchExpressions, *values[i])
	}
	return b
}

// WithMatchFields adds the given value to the MatchFields field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the MatchFields field.
func (b *RunnerSelectorTermApplyConfiguration) WithMatchFields(values ...*RunnerSelectorRequirementApplyConfiguration) *RunnerSelectorTermApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithMatchFields")
		}
		b.MatchFields = append(b.MatchFields, *values[i])
	}
	return b
}
