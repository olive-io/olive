/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// RunnerSpecApplyConfiguration represents a declarative configuration of the RunnerSpec type for use
// with apply.
type RunnerSpecApplyConfiguration struct {
	ID          *int64            `json:"id,omitempty"`
	Hostname    *string           `json:"hostname,omitempty"`
	HeartbeatMs *int64            `json:"heartbeatMs,omitempty"`
	ListenURL   *string           `json:"listenURL,omitempty"`
	Version     *string           `json:"version,omitempty"`
	Features    map[string]string `json:"features,omitempty"`
}

// RunnerSpecApplyConfiguration constructs a declarative configuration of the RunnerSpec type for use with
// apply.
func RunnerSpec() *RunnerSpecApplyConfiguration {
	return &RunnerSpecApplyConfiguration{}
}

// WithID sets the ID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ID field is set to the value of the last call.
func (b *RunnerSpecApplyConfiguration) WithID(value int64) *RunnerSpecApplyConfiguration {
	b.ID = &value
	return b
}

// WithHostname sets the Hostname field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Hostname field is set to the value of the last call.
func (b *RunnerSpecApplyConfiguration) WithHostname(value string) *RunnerSpecApplyConfiguration {
	b.Hostname = &value
	return b
}

// WithHeartbeatMs sets the HeartbeatMs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HeartbeatMs field is set to the value of the last call.
func (b *RunnerSpecApplyConfiguration) WithHeartbeatMs(value int64) *RunnerSpecApplyConfiguration {
	b.HeartbeatMs = &value
	return b
}

// WithListenURL sets the ListenURL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ListenURL field is set to the value of the last call.
func (b *RunnerSpecApplyConfiguration) WithListenURL(value string) *RunnerSpecApplyConfiguration {
	b.ListenURL = &value
	return b
}

// WithVersion sets the Version field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Version field is set to the value of the last call.
func (b *RunnerSpecApplyConfiguration) WithVersion(value string) *RunnerSpecApplyConfiguration {
	b.Version = &value
	return b
}

// WithFeatures puts the entries into the Features field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Features field,
// overwriting an existing map entries in Features field with the same key.
func (b *RunnerSpecApplyConfiguration) WithFeatures(entries map[string]string) *RunnerSpecApplyConfiguration {
	if b.Features == nil && len(entries) > 0 {
		b.Features = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Features[k] = v
	}
	return b
}
