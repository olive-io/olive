/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// RunnerSpecApplyConfiguration represents an declarative configuration of the RunnerSpec type for use
// with apply.
type RunnerSpecApplyConfiguration struct {
	ID         *int64  `json:"id,omitempty"`
	Hostname   *string `json:"hostname,omitempty"`
	PeerURL    *string `json:"peerURL,omitempty"`
	ClientURL  *string `json:"clientURL,omitempty"`
	VersionRef *string `json:"versionRef,omitempty"`
	IsLearner  *bool   `json:"isLearner,omitempty"`
}

// RunnerSpecApplyConfiguration constructs an declarative configuration of the RunnerSpec type for use with
// apply.
func RunnerSpec() *RunnerSpecApplyConfiguration {
	return &RunnerSpecApplyConfiguration{}
}

// WithID sets the ID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ID field is set to the value of the last call.
func (b *RunnerSpecApplyConfiguration) WithID(value int64) *RunnerSpecApplyConfiguration {
	b.ID = &value
	return b
}

// WithHostname sets the Hostname field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Hostname field is set to the value of the last call.
func (b *RunnerSpecApplyConfiguration) WithHostname(value string) *RunnerSpecApplyConfiguration {
	b.Hostname = &value
	return b
}

// WithPeerURL sets the PeerURL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PeerURL field is set to the value of the last call.
func (b *RunnerSpecApplyConfiguration) WithPeerURL(value string) *RunnerSpecApplyConfiguration {
	b.PeerURL = &value
	return b
}

// WithClientURL sets the ClientURL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClientURL field is set to the value of the last call.
func (b *RunnerSpecApplyConfiguration) WithClientURL(value string) *RunnerSpecApplyConfiguration {
	b.ClientURL = &value
	return b
}

// WithVersionRef sets the VersionRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VersionRef field is set to the value of the last call.
func (b *RunnerSpecApplyConfiguration) WithVersionRef(value string) *RunnerSpecApplyConfiguration {
	b.VersionRef = &value
	return b
}

// WithIsLearner sets the IsLearner field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IsLearner field is set to the value of the last call.
func (b *RunnerSpecApplyConfiguration) WithIsLearner(value bool) *RunnerSpecApplyConfiguration {
	b.IsLearner = &value
	return b
}
