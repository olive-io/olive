/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// RegionStatApplyConfiguration represents an declarative configuration of the RegionStat type for use
// with apply.
type RegionStatApplyConfiguration struct {
	v1.TypeMetaApplyConfiguration `json:",inline"`
	Bpmn                          *BpmnStatApplyConfiguration `json:"bpmn,omitempty"`
	RunningDefinitions            *int64                      `json:"runningDefinitions,omitempty"`
	Term                          *int64                      `json:"term,omitempty"`
	Timeout                       *int64                      `json:"timeout,omitempty"`
}

// RegionStatApplyConfiguration constructs an declarative configuration of the RegionStat type for use with
// apply.
func RegionStat() *RegionStatApplyConfiguration {
	b := &RegionStatApplyConfiguration{}
	b.WithKind("RegionStat")
	b.WithAPIVersion("core.olive.io/v1")
	return b
}

// WithKind sets the Kind field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Kind field is set to the value of the last call.
func (b *RegionStatApplyConfiguration) WithKind(value string) *RegionStatApplyConfiguration {
	b.Kind = &value
	return b
}

// WithAPIVersion sets the APIVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the APIVersion field is set to the value of the last call.
func (b *RegionStatApplyConfiguration) WithAPIVersion(value string) *RegionStatApplyConfiguration {
	b.APIVersion = &value
	return b
}

// WithBpmn sets the Bpmn field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Bpmn field is set to the value of the last call.
func (b *RegionStatApplyConfiguration) WithBpmn(value *BpmnStatApplyConfiguration) *RegionStatApplyConfiguration {
	b.Bpmn = value
	return b
}

// WithRunningDefinitions sets the RunningDefinitions field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RunningDefinitions field is set to the value of the last call.
func (b *RegionStatApplyConfiguration) WithRunningDefinitions(value int64) *RegionStatApplyConfiguration {
	b.RunningDefinitions = &value
	return b
}

// WithTerm sets the Term field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Term field is set to the value of the last call.
func (b *RegionStatApplyConfiguration) WithTerm(value int64) *RegionStatApplyConfiguration {
	b.Term = &value
	return b
}

// WithTimeout sets the Timeout field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Timeout field is set to the value of the last call.
func (b *RegionStatApplyConfiguration) WithTimeout(value int64) *RegionStatApplyConfiguration {
	b.Timeout = &value
	return b
}
