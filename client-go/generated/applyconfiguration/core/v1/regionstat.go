/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// RegionStatApplyConfiguration represents an declarative configuration of the RegionStat type for use
// with apply.
type RegionStatApplyConfiguration struct {
	Leader             *int64  `json:"leader,omitempty"`
	Term               *int64  `json:"term,omitempty"`
	Replicas           *int32  `json:"replicas,omitempty"`
	Definitions        *int64  `json:"definitions,omitempty"`
	RunningDefinitions *int64  `json:"runningDefinitions,omitempty"`
	BpmnProcesses      *int64  `json:"bpmnProcesses,omitempty"`
	BpmnEvents         *int64  `json:"bpmnEvents,omitempty"`
	BpmnTasks          *int64  `json:"bpmnTasks,omitempty"`
	Message            *string `json:"message,omitempty"`
	Timestamp          *int64  `json:"timestamp,omitempty"`
}

// RegionStatApplyConfiguration constructs an declarative configuration of the RegionStat type for use with
// apply.
func RegionStat() *RegionStatApplyConfiguration {
	return &RegionStatApplyConfiguration{}
}

// WithLeader sets the Leader field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Leader field is set to the value of the last call.
func (b *RegionStatApplyConfiguration) WithLeader(value int64) *RegionStatApplyConfiguration {
	b.Leader = &value
	return b
}

// WithTerm sets the Term field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Term field is set to the value of the last call.
func (b *RegionStatApplyConfiguration) WithTerm(value int64) *RegionStatApplyConfiguration {
	b.Term = &value
	return b
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *RegionStatApplyConfiguration) WithReplicas(value int32) *RegionStatApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithDefinitions sets the Definitions field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Definitions field is set to the value of the last call.
func (b *RegionStatApplyConfiguration) WithDefinitions(value int64) *RegionStatApplyConfiguration {
	b.Definitions = &value
	return b
}

// WithRunningDefinitions sets the RunningDefinitions field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RunningDefinitions field is set to the value of the last call.
func (b *RegionStatApplyConfiguration) WithRunningDefinitions(value int64) *RegionStatApplyConfiguration {
	b.RunningDefinitions = &value
	return b
}

// WithBpmnProcesses sets the BpmnProcesses field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BpmnProcesses field is set to the value of the last call.
func (b *RegionStatApplyConfiguration) WithBpmnProcesses(value int64) *RegionStatApplyConfiguration {
	b.BpmnProcesses = &value
	return b
}

// WithBpmnEvents sets the BpmnEvents field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BpmnEvents field is set to the value of the last call.
func (b *RegionStatApplyConfiguration) WithBpmnEvents(value int64) *RegionStatApplyConfiguration {
	b.BpmnEvents = &value
	return b
}

// WithBpmnTasks sets the BpmnTasks field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BpmnTasks field is set to the value of the last call.
func (b *RegionStatApplyConfiguration) WithBpmnTasks(value int64) *RegionStatApplyConfiguration {
	b.BpmnTasks = &value
	return b
}

// WithMessage sets the Message field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Message field is set to the value of the last call.
func (b *RegionStatApplyConfiguration) WithMessage(value string) *RegionStatApplyConfiguration {
	b.Message = &value
	return b
}

// WithTimestamp sets the Timestamp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Timestamp field is set to the value of the last call.
func (b *RegionStatApplyConfiguration) WithTimestamp(value int64) *RegionStatApplyConfiguration {
	b.Timestamp = &value
	return b
}
