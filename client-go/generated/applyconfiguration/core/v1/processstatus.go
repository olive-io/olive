/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	corev1 "github.com/olive-io/olive/apis/core/v1"
)

// ProcessStatusApplyConfiguration represents a declarative configuration of the ProcessStatus type for use
// with apply.
type ProcessStatusApplyConfiguration struct {
	Phase           *corev1.ProcessPhase                      `json:"phase,omitempty"`
	Message         *string                                   `json:"message,omitempty"`
	Context         *ProcessContextApplyConfiguration         `json:"context,omitempty"`
	FlowNodes       []FlowNodeApplyConfiguration              `json:"flowNodes,omitempty"`
	FlowNodeStatMap map[string]FlowNodeStatApplyConfiguration `json:"flowNodeStatMap,omitempty"`
	Attempts        *int32                                    `json:"attempts,omitempty"`
	StartTimestamp  *int64                                    `json:"creationTimestamp,omitempty"`
	EndTimestamp    *int64                                    `json:"endTimestamp,omitempty"`
}

// ProcessStatusApplyConfiguration constructs a declarative configuration of the ProcessStatus type for use with
// apply.
func ProcessStatus() *ProcessStatusApplyConfiguration {
	return &ProcessStatusApplyConfiguration{}
}

// WithPhase sets the Phase field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Phase field is set to the value of the last call.
func (b *ProcessStatusApplyConfiguration) WithPhase(value corev1.ProcessPhase) *ProcessStatusApplyConfiguration {
	b.Phase = &value
	return b
}

// WithMessage sets the Message field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Message field is set to the value of the last call.
func (b *ProcessStatusApplyConfiguration) WithMessage(value string) *ProcessStatusApplyConfiguration {
	b.Message = &value
	return b
}

// WithContext sets the Context field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Context field is set to the value of the last call.
func (b *ProcessStatusApplyConfiguration) WithContext(value *ProcessContextApplyConfiguration) *ProcessStatusApplyConfiguration {
	b.Context = value
	return b
}

// WithFlowNodes adds the given value to the FlowNodes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the FlowNodes field.
func (b *ProcessStatusApplyConfiguration) WithFlowNodes(values ...*FlowNodeApplyConfiguration) *ProcessStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithFlowNodes")
		}
		b.FlowNodes = append(b.FlowNodes, *values[i])
	}
	return b
}

// WithFlowNodeStatMap puts the entries into the FlowNodeStatMap field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the FlowNodeStatMap field,
// overwriting an existing map entries in FlowNodeStatMap field with the same key.
func (b *ProcessStatusApplyConfiguration) WithFlowNodeStatMap(entries map[string]FlowNodeStatApplyConfiguration) *ProcessStatusApplyConfiguration {
	if b.FlowNodeStatMap == nil && len(entries) > 0 {
		b.FlowNodeStatMap = make(map[string]FlowNodeStatApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.FlowNodeStatMap[k] = v
	}
	return b
}

// WithAttempts sets the Attempts field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Attempts field is set to the value of the last call.
func (b *ProcessStatusApplyConfiguration) WithAttempts(value int32) *ProcessStatusApplyConfiguration {
	b.Attempts = &value
	return b
}

// WithStartTimestamp sets the StartTimestamp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StartTimestamp field is set to the value of the last call.
func (b *ProcessStatusApplyConfiguration) WithStartTimestamp(value int64) *ProcessStatusApplyConfiguration {
	b.StartTimestamp = &value
	return b
}

// WithEndTimestamp sets the EndTimestamp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EndTimestamp field is set to the value of the last call.
func (b *ProcessStatusApplyConfiguration) WithEndTimestamp(value int64) *ProcessStatusApplyConfiguration {
	b.EndTimestamp = &value
	return b
}
