/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	metav1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// RunnerStatisticsApplyConfiguration represents a declarative configuration of the RunnerStatistics type for use
// with apply.
type RunnerStatisticsApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration `json:",inline"`
	Name                              *string                           `json:"name,omitempty"`
	CpuUsed                           *float64                          `json:"cpuUsed,omitempty"`
	MemoryUsed                        *float64                          `json:"memoryUsed,omitempty"`
	BpmnStat                          *BpmnStatisticsApplyConfiguration `json:"bpmnStat,omitempty"`
	Timestamp                         *int64                            `json:"timestamp,omitempty"`
}

// RunnerStatisticsApplyConfiguration constructs a declarative configuration of the RunnerStatistics type for use with
// apply.
func RunnerStatistics() *RunnerStatisticsApplyConfiguration {
	b := &RunnerStatisticsApplyConfiguration{}
	b.WithKind("RunnerStatistics")
	b.WithAPIVersion("core.olive.io/v1")
	return b
}

// WithKind sets the Kind field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Kind field is set to the value of the last call.
func (b *RunnerStatisticsApplyConfiguration) WithKind(value string) *RunnerStatisticsApplyConfiguration {
	b.TypeMetaApplyConfiguration.Kind = &value
	return b
}

// WithAPIVersion sets the APIVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the APIVersion field is set to the value of the last call.
func (b *RunnerStatisticsApplyConfiguration) WithAPIVersion(value string) *RunnerStatisticsApplyConfiguration {
	b.TypeMetaApplyConfiguration.APIVersion = &value
	return b
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *RunnerStatisticsApplyConfiguration) WithName(value string) *RunnerStatisticsApplyConfiguration {
	b.Name = &value
	return b
}

// WithCpuUsed sets the CpuUsed field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CpuUsed field is set to the value of the last call.
func (b *RunnerStatisticsApplyConfiguration) WithCpuUsed(value float64) *RunnerStatisticsApplyConfiguration {
	b.CpuUsed = &value
	return b
}

// WithMemoryUsed sets the MemoryUsed field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MemoryUsed field is set to the value of the last call.
func (b *RunnerStatisticsApplyConfiguration) WithMemoryUsed(value float64) *RunnerStatisticsApplyConfiguration {
	b.MemoryUsed = &value
	return b
}

// WithBpmnStat sets the BpmnStat field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BpmnStat field is set to the value of the last call.
func (b *RunnerStatisticsApplyConfiguration) WithBpmnStat(value *BpmnStatisticsApplyConfiguration) *RunnerStatisticsApplyConfiguration {
	b.BpmnStat = value
	return b
}

// WithTimestamp sets the Timestamp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Timestamp field is set to the value of the last call.
func (b *RunnerStatisticsApplyConfiguration) WithTimestamp(value int64) *RunnerStatisticsApplyConfiguration {
	b.Timestamp = &value
	return b
}
