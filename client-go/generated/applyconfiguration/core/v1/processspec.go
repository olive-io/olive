/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// ProcessSpecApplyConfiguration represents a declarative configuration of the ProcessSpec type for use
// with apply.
type ProcessSpecApplyConfiguration struct {
	Args               *BpmnArgsApplyConfiguration `json:"args,omitempty"`
	DefinitionsName    *string                     `json:"definitionsName,omitempty"`
	DefinitionsVersion *int64                      `json:"definitionsVersion,omitempty"`
	DefinitionsProcess *string                     `json:"definitionsProcess,omitempty"`
	DefinitionsContent *string                     `json:"definitionsContent,omitempty"`
}

// ProcessSpecApplyConfiguration constructs a declarative configuration of the ProcessSpec type for use with
// apply.
func ProcessSpec() *ProcessSpecApplyConfiguration {
	return &ProcessSpecApplyConfiguration{}
}

// WithArgs sets the Args field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Args field is set to the value of the last call.
func (b *ProcessSpecApplyConfiguration) WithArgs(value *BpmnArgsApplyConfiguration) *ProcessSpecApplyConfiguration {
	b.Args = value
	return b
}

// WithDefinitionsName sets the DefinitionsName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DefinitionsName field is set to the value of the last call.
func (b *ProcessSpecApplyConfiguration) WithDefinitionsName(value string) *ProcessSpecApplyConfiguration {
	b.DefinitionsName = &value
	return b
}

// WithDefinitionsVersion sets the DefinitionsVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DefinitionsVersion field is set to the value of the last call.
func (b *ProcessSpecApplyConfiguration) WithDefinitionsVersion(value int64) *ProcessSpecApplyConfiguration {
	b.DefinitionsVersion = &value
	return b
}

// WithDefinitionsProcess sets the DefinitionsProcess field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DefinitionsProcess field is set to the value of the last call.
func (b *ProcessSpecApplyConfiguration) WithDefinitionsProcess(value string) *ProcessSpecApplyConfiguration {
	b.DefinitionsProcess = &value
	return b
}

// WithDefinitionsContent sets the DefinitionsContent field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DefinitionsContent field is set to the value of the last call.
func (b *ProcessSpecApplyConfiguration) WithDefinitionsContent(value string) *ProcessSpecApplyConfiguration {
	b.DefinitionsContent = &value
	return b
}
