/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/olive-io/olive/client-go/generated/applyconfiguration/apidiscovery/v1"
)

// ProcessSpecApplyConfiguration represents an declarative configuration of the ProcessSpec type for use
// with apply.
type ProcessSpecApplyConfiguration struct {
	Definition  *string                             `json:"definition,omitempty"`
	Version     *int64                              `json:"version,omitempty"`
	BpmnProcess *string                             `json:"bpmnProcess,omitempty"`
	Headers     map[string]string                   `json:"headers,omitempty"`
	Properties  map[string]v1.BoxApplyConfiguration `json:"properties,omitempty"`
	DataObjects map[string]string                   `json:"dataObjects,omitempty"`
}

// ProcessSpecApplyConfiguration constructs an declarative configuration of the ProcessSpec type for use with
// apply.
func ProcessSpec() *ProcessSpecApplyConfiguration {
	return &ProcessSpecApplyConfiguration{}
}

// WithDefinition sets the Definition field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Definition field is set to the value of the last call.
func (b *ProcessSpecApplyConfiguration) WithDefinition(value string) *ProcessSpecApplyConfiguration {
	b.Definition = &value
	return b
}

// WithVersion sets the Version field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Version field is set to the value of the last call.
func (b *ProcessSpecApplyConfiguration) WithVersion(value int64) *ProcessSpecApplyConfiguration {
	b.Version = &value
	return b
}

// WithBpmnProcess sets the BpmnProcess field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BpmnProcess field is set to the value of the last call.
func (b *ProcessSpecApplyConfiguration) WithBpmnProcess(value string) *ProcessSpecApplyConfiguration {
	b.BpmnProcess = &value
	return b
}

// WithHeaders puts the entries into the Headers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Headers field,
// overwriting an existing map entries in Headers field with the same key.
func (b *ProcessSpecApplyConfiguration) WithHeaders(entries map[string]string) *ProcessSpecApplyConfiguration {
	if b.Headers == nil && len(entries) > 0 {
		b.Headers = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Headers[k] = v
	}
	return b
}

// WithProperties puts the entries into the Properties field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Properties field,
// overwriting an existing map entries in Properties field with the same key.
func (b *ProcessSpecApplyConfiguration) WithProperties(entries map[string]v1.BoxApplyConfiguration) *ProcessSpecApplyConfiguration {
	if b.Properties == nil && len(entries) > 0 {
		b.Properties = make(map[string]v1.BoxApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.Properties[k] = v
	}
	return b
}

// WithDataObjects puts the entries into the DataObjects field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the DataObjects field,
// overwriting an existing map entries in DataObjects field with the same key.
func (b *ProcessSpecApplyConfiguration) WithDataObjects(entries map[string]string) *ProcessSpecApplyConfiguration {
	if b.DataObjects == nil && len(entries) > 0 {
		b.DataObjects = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.DataObjects[k] = v
	}
	return b
}
