/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// RunnerStatApplyConfiguration represents an declarative configuration of the RunnerStat type for use
// with apply.
type RunnerStatApplyConfiguration struct {
	CpuTotal    *float64                             `json:"cpuTotal,omitempty"`
	MemoryTotal *float64                             `json:"memoryTotal,omitempty"`
	Regions     []int64                              `json:"regions,omitempty"`
	Leaders     []string                             `json:"leaders,omitempty"`
	Definitions *int64                               `json:"definitions,omitempty"`
	Dynamic     *RunnerDynamicStatApplyConfiguration `json:"dynamic,omitempty"`
}

// RunnerStatApplyConfiguration constructs an declarative configuration of the RunnerStat type for use with
// apply.
func RunnerStat() *RunnerStatApplyConfiguration {
	return &RunnerStatApplyConfiguration{}
}

// WithCpuTotal sets the CpuTotal field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CpuTotal field is set to the value of the last call.
func (b *RunnerStatApplyConfiguration) WithCpuTotal(value float64) *RunnerStatApplyConfiguration {
	b.CpuTotal = &value
	return b
}

// WithMemoryTotal sets the MemoryTotal field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MemoryTotal field is set to the value of the last call.
func (b *RunnerStatApplyConfiguration) WithMemoryTotal(value float64) *RunnerStatApplyConfiguration {
	b.MemoryTotal = &value
	return b
}

// WithRegions adds the given value to the Regions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Regions field.
func (b *RunnerStatApplyConfiguration) WithRegions(values ...int64) *RunnerStatApplyConfiguration {
	for i := range values {
		b.Regions = append(b.Regions, values[i])
	}
	return b
}

// WithLeaders adds the given value to the Leaders field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Leaders field.
func (b *RunnerStatApplyConfiguration) WithLeaders(values ...string) *RunnerStatApplyConfiguration {
	for i := range values {
		b.Leaders = append(b.Leaders, values[i])
	}
	return b
}

// WithDefinitions sets the Definitions field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Definitions field is set to the value of the last call.
func (b *RunnerStatApplyConfiguration) WithDefinitions(value int64) *RunnerStatApplyConfiguration {
	b.Definitions = &value
	return b
}

// WithDynamic sets the Dynamic field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Dynamic field is set to the value of the last call.
func (b *RunnerStatApplyConfiguration) WithDynamic(value *RunnerDynamicStatApplyConfiguration) *RunnerStatApplyConfiguration {
	b.Dynamic = value
	return b
}
