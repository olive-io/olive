/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	metav1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// RunnerStatApplyConfiguration represents a declarative configuration of the RunnerStat type for use
// with apply.
type RunnerStatApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration `json:",inline"`
	CpuUsed                           *float64                    `json:"cpuUsed,omitempty"`
	MemoryUsed                        *float64                    `json:"memoryUsed,omitempty"`
	Bpmn                              *BpmnStatApplyConfiguration `json:"bpmn,omitempty"`
	Timeout                           *int64                      `json:"timeout,omitempty"`
}

// RunnerStatApplyConfiguration constructs a declarative configuration of the RunnerStat type for use with
// apply.
func RunnerStat() *RunnerStatApplyConfiguration {
	b := &RunnerStatApplyConfiguration{}
	b.WithKind("RunnerStat")
	b.WithAPIVersion("core.olive.io/v1")
	return b
}

// WithKind sets the Kind field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Kind field is set to the value of the last call.
func (b *RunnerStatApplyConfiguration) WithKind(value string) *RunnerStatApplyConfiguration {
	b.TypeMetaApplyConfiguration.Kind = &value
	return b
}

// WithAPIVersion sets the APIVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the APIVersion field is set to the value of the last call.
func (b *RunnerStatApplyConfiguration) WithAPIVersion(value string) *RunnerStatApplyConfiguration {
	b.TypeMetaApplyConfiguration.APIVersion = &value
	return b
}

// WithCpuUsed sets the CpuUsed field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CpuUsed field is set to the value of the last call.
func (b *RunnerStatApplyConfiguration) WithCpuUsed(value float64) *RunnerStatApplyConfiguration {
	b.CpuUsed = &value
	return b
}

// WithMemoryUsed sets the MemoryUsed field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MemoryUsed field is set to the value of the last call.
func (b *RunnerStatApplyConfiguration) WithMemoryUsed(value float64) *RunnerStatApplyConfiguration {
	b.MemoryUsed = &value
	return b
}

// WithBpmn sets the Bpmn field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Bpmn field is set to the value of the last call.
func (b *RunnerStatApplyConfiguration) WithBpmn(value *BpmnStatApplyConfiguration) *RunnerStatApplyConfiguration {
	b.Bpmn = value
	return b
}

// WithTimeout sets the Timeout field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Timeout field is set to the value of the last call.
func (b *RunnerStatApplyConfiguration) WithTimeout(value int64) *RunnerStatApplyConfiguration {
	b.Timeout = &value
	return b
}
