/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	corev1 "github.com/olive-io/olive/apis/core/v1"
	apismetav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	metav1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// ProcessInstanceApplyConfiguration represents a declarative configuration of the ProcessInstance type for use
// with apply.
type ProcessInstanceApplyConfiguration struct {
	metav1.TypeMetaApplyConfiguration    `json:",inline"`
	*metav1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Args                                 *BpmnArgsApplyConfiguration               `json:"args,omitempty"`
	DefinitionsName                      *string                                   `json:"definitionsName,omitempty"`
	DefinitionsVersion                   *int64                                    `json:"definitionsVersion,omitempty"`
	DefinitionsProcess                   *string                                   `json:"definitionsProcess,omitempty"`
	DefinitionsContent                   *string                                   `json:"definitionsContent,omitempty"`
	Context                              *ProcessContextApplyConfiguration         `json:"context,omitempty"`
	FlowNodes                            []FlowNodeApplyConfiguration              `json:"flowNodes,omitempty"`
	FlowNodeStatMap                      map[string]FlowNodeStatApplyConfiguration `json:"flowNodeStatMap,omitempty"`
	Attempts                             *int32                                    `json:"attempts,omitempty"`
	StartTimestamp                       *int64                                    `json:"creationTimestamp,omitempty"`
	EndTimestamp                         *int64                                    `json:"endTimestamp,omitempty"`
	Phase                                *corev1.ProcessPhase                      `json:"phase,omitempty"`
	Message                              *string                                   `json:"message,omitempty"`
}

// ProcessInstance constructs a declarative configuration of the ProcessInstance type for use with
// apply.
func ProcessInstance(name, namespace string) *ProcessInstanceApplyConfiguration {
	b := &ProcessInstanceApplyConfiguration{}
	b.WithName(name)
	b.WithNamespace(namespace)
	b.WithKind("ProcessInstance")
	b.WithAPIVersion("core.olive.io/v1")
	return b
}

// WithKind sets the Kind field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Kind field is set to the value of the last call.
func (b *ProcessInstanceApplyConfiguration) WithKind(value string) *ProcessInstanceApplyConfiguration {
	b.TypeMetaApplyConfiguration.Kind = &value
	return b
}

// WithAPIVersion sets the APIVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the APIVersion field is set to the value of the last call.
func (b *ProcessInstanceApplyConfiguration) WithAPIVersion(value string) *ProcessInstanceApplyConfiguration {
	b.TypeMetaApplyConfiguration.APIVersion = &value
	return b
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ProcessInstanceApplyConfiguration) WithName(value string) *ProcessInstanceApplyConfiguration {
	b.ensureObjectMetaApplyConfigurationExists()
	b.ObjectMetaApplyConfiguration.Name = &value
	return b
}

// WithGenerateName sets the GenerateName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GenerateName field is set to the value of the last call.
func (b *ProcessInstanceApplyConfiguration) WithGenerateName(value string) *ProcessInstanceApplyConfiguration {
	b.ensureObjectMetaApplyConfigurationExists()
	b.ObjectMetaApplyConfiguration.GenerateName = &value
	return b
}

// WithNamespace sets the Namespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Namespace field is set to the value of the last call.
func (b *ProcessInstanceApplyConfiguration) WithNamespace(value string) *ProcessInstanceApplyConfiguration {
	b.ensureObjectMetaApplyConfigurationExists()
	b.ObjectMetaApplyConfiguration.Namespace = &value
	return b
}

// WithUID sets the UID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UID field is set to the value of the last call.
func (b *ProcessInstanceApplyConfiguration) WithUID(value types.UID) *ProcessInstanceApplyConfiguration {
	b.ensureObjectMetaApplyConfigurationExists()
	b.ObjectMetaApplyConfiguration.UID = &value
	return b
}

// WithResourceVersion sets the ResourceVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ResourceVersion field is set to the value of the last call.
func (b *ProcessInstanceApplyConfiguration) WithResourceVersion(value string) *ProcessInstanceApplyConfiguration {
	b.ensureObjectMetaApplyConfigurationExists()
	b.ObjectMetaApplyConfiguration.ResourceVersion = &value
	return b
}

// WithGeneration sets the Generation field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Generation field is set to the value of the last call.
func (b *ProcessInstanceApplyConfiguration) WithGeneration(value int64) *ProcessInstanceApplyConfiguration {
	b.ensureObjectMetaApplyConfigurationExists()
	b.ObjectMetaApplyConfiguration.Generation = &value
	return b
}

// WithCreationTimestamp sets the CreationTimestamp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CreationTimestamp field is set to the value of the last call.
func (b *ProcessInstanceApplyConfiguration) WithCreationTimestamp(value apismetav1.Time) *ProcessInstanceApplyConfiguration {
	b.ensureObjectMetaApplyConfigurationExists()
	b.ObjectMetaApplyConfiguration.CreationTimestamp = &value
	return b
}

// WithDeletionTimestamp sets the DeletionTimestamp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DeletionTimestamp field is set to the value of the last call.
func (b *ProcessInstanceApplyConfiguration) WithDeletionTimestamp(value apismetav1.Time) *ProcessInstanceApplyConfiguration {
	b.ensureObjectMetaApplyConfigurationExists()
	b.ObjectMetaApplyConfiguration.DeletionTimestamp = &value
	return b
}

// WithDeletionGracePeriodSeconds sets the DeletionGracePeriodSeconds field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DeletionGracePeriodSeconds field is set to the value of the last call.
func (b *ProcessInstanceApplyConfiguration) WithDeletionGracePeriodSeconds(value int64) *ProcessInstanceApplyConfiguration {
	b.ensureObjectMetaApplyConfigurationExists()
	b.ObjectMetaApplyConfiguration.DeletionGracePeriodSeconds = &value
	return b
}

// WithLabels puts the entries into the Labels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Labels field,
// overwriting an existing map entries in Labels field with the same key.
func (b *ProcessInstanceApplyConfiguration) WithLabels(entries map[string]string) *ProcessInstanceApplyConfiguration {
	b.ensureObjectMetaApplyConfigurationExists()
	if b.ObjectMetaApplyConfiguration.Labels == nil && len(entries) > 0 {
		b.ObjectMetaApplyConfiguration.Labels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.ObjectMetaApplyConfiguration.Labels[k] = v
	}
	return b
}

// WithAnnotations puts the entries into the Annotations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Annotations field,
// overwriting an existing map entries in Annotations field with the same key.
func (b *ProcessInstanceApplyConfiguration) WithAnnotations(entries map[string]string) *ProcessInstanceApplyConfiguration {
	b.ensureObjectMetaApplyConfigurationExists()
	if b.ObjectMetaApplyConfiguration.Annotations == nil && len(entries) > 0 {
		b.ObjectMetaApplyConfiguration.Annotations = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.ObjectMetaApplyConfiguration.Annotations[k] = v
	}
	return b
}

// WithOwnerReferences adds the given value to the OwnerReferences field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the OwnerReferences field.
func (b *ProcessInstanceApplyConfiguration) WithOwnerReferences(values ...*metav1.OwnerReferenceApplyConfiguration) *ProcessInstanceApplyConfiguration {
	b.ensureObjectMetaApplyConfigurationExists()
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithOwnerReferences")
		}
		b.ObjectMetaApplyConfiguration.OwnerReferences = append(b.ObjectMetaApplyConfiguration.OwnerReferences, *values[i])
	}
	return b
}

// WithFinalizers adds the given value to the Finalizers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Finalizers field.
func (b *ProcessInstanceApplyConfiguration) WithFinalizers(values ...string) *ProcessInstanceApplyConfiguration {
	b.ensureObjectMetaApplyConfigurationExists()
	for i := range values {
		b.ObjectMetaApplyConfiguration.Finalizers = append(b.ObjectMetaApplyConfiguration.Finalizers, values[i])
	}
	return b
}

func (b *ProcessInstanceApplyConfiguration) ensureObjectMetaApplyConfigurationExists() {
	if b.ObjectMetaApplyConfiguration == nil {
		b.ObjectMetaApplyConfiguration = &metav1.ObjectMetaApplyConfiguration{}
	}
}

// WithArgs sets the Args field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Args field is set to the value of the last call.
func (b *ProcessInstanceApplyConfiguration) WithArgs(value *BpmnArgsApplyConfiguration) *ProcessInstanceApplyConfiguration {
	b.Args = value
	return b
}

// WithDefinitionsName sets the DefinitionsName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DefinitionsName field is set to the value of the last call.
func (b *ProcessInstanceApplyConfiguration) WithDefinitionsName(value string) *ProcessInstanceApplyConfiguration {
	b.DefinitionsName = &value
	return b
}

// WithDefinitionsVersion sets the DefinitionsVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DefinitionsVersion field is set to the value of the last call.
func (b *ProcessInstanceApplyConfiguration) WithDefinitionsVersion(value int64) *ProcessInstanceApplyConfiguration {
	b.DefinitionsVersion = &value
	return b
}

// WithDefinitionsProcess sets the DefinitionsProcess field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DefinitionsProcess field is set to the value of the last call.
func (b *ProcessInstanceApplyConfiguration) WithDefinitionsProcess(value string) *ProcessInstanceApplyConfiguration {
	b.DefinitionsProcess = &value
	return b
}

// WithDefinitionsContent sets the DefinitionsContent field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DefinitionsContent field is set to the value of the last call.
func (b *ProcessInstanceApplyConfiguration) WithDefinitionsContent(value string) *ProcessInstanceApplyConfiguration {
	b.DefinitionsContent = &value
	return b
}

// WithContext sets the Context field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Context field is set to the value of the last call.
func (b *ProcessInstanceApplyConfiguration) WithContext(value *ProcessContextApplyConfiguration) *ProcessInstanceApplyConfiguration {
	b.Context = value
	return b
}

// WithFlowNodes adds the given value to the FlowNodes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the FlowNodes field.
func (b *ProcessInstanceApplyConfiguration) WithFlowNodes(values ...*FlowNodeApplyConfiguration) *ProcessInstanceApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithFlowNodes")
		}
		b.FlowNodes = append(b.FlowNodes, *values[i])
	}
	return b
}

// WithFlowNodeStatMap puts the entries into the FlowNodeStatMap field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the FlowNodeStatMap field,
// overwriting an existing map entries in FlowNodeStatMap field with the same key.
func (b *ProcessInstanceApplyConfiguration) WithFlowNodeStatMap(entries map[string]FlowNodeStatApplyConfiguration) *ProcessInstanceApplyConfiguration {
	if b.FlowNodeStatMap == nil && len(entries) > 0 {
		b.FlowNodeStatMap = make(map[string]FlowNodeStatApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.FlowNodeStatMap[k] = v
	}
	return b
}

// WithAttempts sets the Attempts field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Attempts field is set to the value of the last call.
func (b *ProcessInstanceApplyConfiguration) WithAttempts(value int32) *ProcessInstanceApplyConfiguration {
	b.Attempts = &value
	return b
}

// WithStartTimestamp sets the StartTimestamp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StartTimestamp field is set to the value of the last call.
func (b *ProcessInstanceApplyConfiguration) WithStartTimestamp(value int64) *ProcessInstanceApplyConfiguration {
	b.StartTimestamp = &value
	return b
}

// WithEndTimestamp sets the EndTimestamp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EndTimestamp field is set to the value of the last call.
func (b *ProcessInstanceApplyConfiguration) WithEndTimestamp(value int64) *ProcessInstanceApplyConfiguration {
	b.EndTimestamp = &value
	return b
}

// WithPhase sets the Phase field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Phase field is set to the value of the last call.
func (b *ProcessInstanceApplyConfiguration) WithPhase(value corev1.ProcessPhase) *ProcessInstanceApplyConfiguration {
	b.Phase = &value
	return b
}

// WithMessage sets the Message field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Message field is set to the value of the last call.
func (b *ProcessInstanceApplyConfiguration) WithMessage(value string) *ProcessInstanceApplyConfiguration {
	b.Message = &value
	return b
}

// GetName retrieves the value of the Name field in the declarative configuration.
func (b *ProcessInstanceApplyConfiguration) GetName() *string {
	b.ensureObjectMetaApplyConfigurationExists()
	return b.ObjectMetaApplyConfiguration.Name
}
