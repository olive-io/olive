/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// BpmnArgsApplyConfiguration represents a declarative configuration of the BpmnArgs type for use
// with apply.
type BpmnArgsApplyConfiguration struct {
	Headers     map[string]string `json:"headers,omitempty"`
	Properties  map[string][]byte `json:"properties,omitempty"`
	DataObjects map[string][]byte `json:"dataObjects,omitempty"`
}

// BpmnArgsApplyConfiguration constructs a declarative configuration of the BpmnArgs type for use with
// apply.
func BpmnArgs() *BpmnArgsApplyConfiguration {
	return &BpmnArgsApplyConfiguration{}
}

// WithHeaders puts the entries into the Headers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Headers field,
// overwriting an existing map entries in Headers field with the same key.
func (b *BpmnArgsApplyConfiguration) WithHeaders(entries map[string]string) *BpmnArgsApplyConfiguration {
	if b.Headers == nil && len(entries) > 0 {
		b.Headers = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Headers[k] = v
	}
	return b
}

// WithProperties puts the entries into the Properties field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Properties field,
// overwriting an existing map entries in Properties field with the same key.
func (b *BpmnArgsApplyConfiguration) WithProperties(entries map[string][]byte) *BpmnArgsApplyConfiguration {
	if b.Properties == nil && len(entries) > 0 {
		b.Properties = make(map[string][]byte, len(entries))
	}
	for k, v := range entries {
		b.Properties[k] = v
	}
	return b
}

// WithDataObjects puts the entries into the DataObjects field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the DataObjects field,
// overwriting an existing map entries in DataObjects field with the same key.
func (b *BpmnArgsApplyConfiguration) WithDataObjects(entries map[string][]byte) *BpmnArgsApplyConfiguration {
	if b.DataObjects == nil && len(entries) > 0 {
		b.DataObjects = make(map[string][]byte, len(entries))
	}
	for k, v := range entries {
		b.DataObjects[k] = v
	}
	return b
}
