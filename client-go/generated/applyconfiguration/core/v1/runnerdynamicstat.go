/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// RunnerDynamicStatApplyConfiguration represents an declarative configuration of the RunnerDynamicStat type for use
// with apply.
type RunnerDynamicStatApplyConfiguration struct {
	CpuUsed    *float64 `json:"cpuUsed,omitempty"`
	MemoryUsed *float64 `json:"memoryUsed,omitempty"`
	Timestamp  *int64   `json:"timestamp,omitempty"`
}

// RunnerDynamicStatApplyConfiguration constructs an declarative configuration of the RunnerDynamicStat type for use with
// apply.
func RunnerDynamicStat() *RunnerDynamicStatApplyConfiguration {
	return &RunnerDynamicStatApplyConfiguration{}
}

// WithCpuUsed sets the CpuUsed field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CpuUsed field is set to the value of the last call.
func (b *RunnerDynamicStatApplyConfiguration) WithCpuUsed(value float64) *RunnerDynamicStatApplyConfiguration {
	b.CpuUsed = &value
	return b
}

// WithMemoryUsed sets the MemoryUsed field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MemoryUsed field is set to the value of the last call.
func (b *RunnerDynamicStatApplyConfiguration) WithMemoryUsed(value float64) *RunnerDynamicStatApplyConfiguration {
	b.MemoryUsed = &value
	return b
}

// WithTimestamp sets the Timestamp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Timestamp field is set to the value of the last call.
func (b *RunnerDynamicStatApplyConfiguration) WithTimestamp(value int64) *RunnerDynamicStatApplyConfiguration {
	b.Timestamp = &value
	return b
}
