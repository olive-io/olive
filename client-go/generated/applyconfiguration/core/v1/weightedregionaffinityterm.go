/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// WeightedRegionAffinityTermApplyConfiguration represents an declarative configuration of the WeightedRegionAffinityTerm type for use
// with apply.
type WeightedRegionAffinityTermApplyConfiguration struct {
	Weight             *int32                                `json:"weight,omitempty"`
	RegionAffinityTerm *RegionAffinityTermApplyConfiguration `json:"regionAffinityTerm,omitempty"`
}

// WeightedRegionAffinityTermApplyConfiguration constructs an declarative configuration of the WeightedRegionAffinityTerm type for use with
// apply.
func WeightedRegionAffinityTerm() *WeightedRegionAffinityTermApplyConfiguration {
	return &WeightedRegionAffinityTermApplyConfiguration{}
}

// WithWeight sets the Weight field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Weight field is set to the value of the last call.
func (b *WeightedRegionAffinityTermApplyConfiguration) WithWeight(value int32) *WeightedRegionAffinityTermApplyConfiguration {
	b.Weight = &value
	return b
}

// WithRegionAffinityTerm sets the RegionAffinityTerm field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RegionAffinityTerm field is set to the value of the last call.
func (b *WeightedRegionAffinityTermApplyConfiguration) WithRegionAffinityTerm(value *RegionAffinityTermApplyConfiguration) *WeightedRegionAffinityTermApplyConfiguration {
	b.RegionAffinityTerm = value
	return b
}
