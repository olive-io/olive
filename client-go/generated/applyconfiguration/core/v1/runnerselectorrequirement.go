/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/olive-io/olive/apis/core/v1"
)

// RunnerSelectorRequirementApplyConfiguration represents an declarative configuration of the RunnerSelectorRequirement type for use
// with apply.
type RunnerSelectorRequirementApplyConfiguration struct {
	Key      *string                    `json:"key,omitempty"`
	Operator *v1.RunnerSelectorOperator `json:"operator,omitempty"`
	Values   []string                   `json:"values,omitempty"`
}

// RunnerSelectorRequirementApplyConfiguration constructs an declarative configuration of the RunnerSelectorRequirement type for use with
// apply.
func RunnerSelectorRequirement() *RunnerSelectorRequirementApplyConfiguration {
	return &RunnerSelectorRequirementApplyConfiguration{}
}

// WithKey sets the Key field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Key field is set to the value of the last call.
func (b *RunnerSelectorRequirementApplyConfiguration) WithKey(value string) *RunnerSelectorRequirementApplyConfiguration {
	b.Key = &value
	return b
}

// WithOperator sets the Operator field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Operator field is set to the value of the last call.
func (b *RunnerSelectorRequirementApplyConfiguration) WithOperator(value v1.RunnerSelectorOperator) *RunnerSelectorRequirementApplyConfiguration {
	b.Operator = &value
	return b
}

// WithValues adds the given value to the Values field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Values field.
func (b *RunnerSelectorRequirementApplyConfiguration) WithValues(values ...string) *RunnerSelectorRequirementApplyConfiguration {
	for i := range values {
		b.Values = append(b.Values, values[i])
	}
	return b
}
