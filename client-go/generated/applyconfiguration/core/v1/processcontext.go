/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// ProcessContextApplyConfiguration represents a declarative configuration of the ProcessContext type for use
// with apply.
type ProcessContextApplyConfiguration struct {
	Variables   map[string][]byte `json:"variables,omitempty"`
	DataObjects map[string][]byte `json:"dataObjects,omitempty"`
}

// ProcessContextApplyConfiguration constructs a declarative configuration of the ProcessContext type for use with
// apply.
func ProcessContext() *ProcessContextApplyConfiguration {
	return &ProcessContextApplyConfiguration{}
}

// WithVariables puts the entries into the Variables field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Variables field,
// overwriting an existing map entries in Variables field with the same key.
func (b *ProcessContextApplyConfiguration) WithVariables(entries map[string][]byte) *ProcessContextApplyConfiguration {
	if b.Variables == nil && len(entries) > 0 {
		b.Variables = make(map[string][]byte, len(entries))
	}
	for k, v := range entries {
		b.Variables[k] = v
	}
	return b
}

// WithDataObjects puts the entries into the DataObjects field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the DataObjects field,
// overwriting an existing map entries in DataObjects field with the same key.
func (b *ProcessContextApplyConfiguration) WithDataObjects(entries map[string][]byte) *ProcessContextApplyConfiguration {
	if b.DataObjects == nil && len(entries) > 0 {
		b.DataObjects = make(map[string][]byte, len(entries))
	}
	for k, v := range entries {
		b.DataObjects[k] = v
	}
	return b
}
