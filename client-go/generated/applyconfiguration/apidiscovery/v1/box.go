/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/olive-io/olive/apis/apidiscovery/v1"
)

// BoxApplyConfiguration represents an declarative configuration of the Box type for use
// with apply.
type BoxApplyConfiguration struct {
	Type       *v1.BoxType                      `json:"type,omitempty"`
	Data       *string                          `json:"data,omitempty"`
	Ref        *string                          `json:"ref,omitempty"`
	Parameters map[string]BoxApplyConfiguration `json:"parameters,omitempty"`
}

// BoxApplyConfiguration constructs an declarative configuration of the Box type for use with
// apply.
func Box() *BoxApplyConfiguration {
	return &BoxApplyConfiguration{}
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *BoxApplyConfiguration) WithType(value v1.BoxType) *BoxApplyConfiguration {
	b.Type = &value
	return b
}

// WithData sets the Data field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Data field is set to the value of the last call.
func (b *BoxApplyConfiguration) WithData(value string) *BoxApplyConfiguration {
	b.Data = &value
	return b
}

// WithRef sets the Ref field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Ref field is set to the value of the last call.
func (b *BoxApplyConfiguration) WithRef(value string) *BoxApplyConfiguration {
	b.Ref = &value
	return b
}

// WithParameters puts the entries into the Parameters field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Parameters field,
// overwriting an existing map entries in Parameters field with the same key.
func (b *BoxApplyConfiguration) WithParameters(entries map[string]BoxApplyConfiguration) *BoxApplyConfiguration {
	if b.Parameters == nil && len(entries) > 0 {
		b.Parameters = make(map[string]BoxApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.Parameters[k] = v
	}
	return b
}
