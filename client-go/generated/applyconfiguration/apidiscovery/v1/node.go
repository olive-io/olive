/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// NodeApplyConfiguration represents an declarative configuration of the Node type for use
// with apply.
type NodeApplyConfiguration struct {
	v1.TypeMetaApplyConfiguration `json:",inline"`
	Id                            *string           `json:"id,omitempty"`
	Metadata                      map[string]string `json:"metadata,omitempty"`
	Address                       *string           `json:"address,omitempty"`
	Port                          *int64            `json:"port,omitempty"`
}

// NodeApplyConfiguration constructs an declarative configuration of the Node type for use with
// apply.
func Node() *NodeApplyConfiguration {
	b := &NodeApplyConfiguration{}
	b.WithKind("Node")
	b.WithAPIVersion("apidiscovery.olive.io/v1")
	return b
}

// WithKind sets the Kind field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Kind field is set to the value of the last call.
func (b *NodeApplyConfiguration) WithKind(value string) *NodeApplyConfiguration {
	b.Kind = &value
	return b
}

// WithAPIVersion sets the APIVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the APIVersion field is set to the value of the last call.
func (b *NodeApplyConfiguration) WithAPIVersion(value string) *NodeApplyConfiguration {
	b.APIVersion = &value
	return b
}

// WithId sets the Id field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Id field is set to the value of the last call.
func (b *NodeApplyConfiguration) WithId(value string) *NodeApplyConfiguration {
	b.Id = &value
	return b
}

// WithMetadata puts the entries into the Metadata field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Metadata field,
// overwriting an existing map entries in Metadata field with the same key.
func (b *NodeApplyConfiguration) WithMetadata(entries map[string]string) *NodeApplyConfiguration {
	if b.Metadata == nil && len(entries) > 0 {
		b.Metadata = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Metadata[k] = v
	}
	return b
}

// WithAddress sets the Address field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Address field is set to the value of the last call.
func (b *NodeApplyConfiguration) WithAddress(value string) *NodeApplyConfiguration {
	b.Address = &value
	return b
}

// WithPort sets the Port field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Port field is set to the value of the last call.
func (b *NodeApplyConfiguration) WithPort(value int64) *NodeApplyConfiguration {
	b.Port = &value
	return b
}
