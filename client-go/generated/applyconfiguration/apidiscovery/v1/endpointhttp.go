/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// EndpointHttpApplyConfiguration represents a declarative configuration of the EndpointHttp type for use
// with apply.
type EndpointHttpApplyConfiguration struct {
	URL      *string                `json:"url,omitempty"`
	Method   *string                `json:"method,omitempty"`
	Request  *BoxApplyConfiguration `json:"request,omitempty"`
	Response *BoxApplyConfiguration `json:"response,omitempty"`
}

// EndpointHttpApplyConfiguration constructs a declarative configuration of the EndpointHttp type for use with
// apply.
func EndpointHttp() *EndpointHttpApplyConfiguration {
	return &EndpointHttpApplyConfiguration{}
}

// WithURL sets the URL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the URL field is set to the value of the last call.
func (b *EndpointHttpApplyConfiguration) WithURL(value string) *EndpointHttpApplyConfiguration {
	b.URL = &value
	return b
}

// WithMethod sets the Method field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Method field is set to the value of the last call.
func (b *EndpointHttpApplyConfiguration) WithMethod(value string) *EndpointHttpApplyConfiguration {
	b.Method = &value
	return b
}

// WithRequest sets the Request field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Request field is set to the value of the last call.
func (b *EndpointHttpApplyConfiguration) WithRequest(value *BoxApplyConfiguration) *EndpointHttpApplyConfiguration {
	b.Request = value
	return b
}

// WithResponse sets the Response field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Response field is set to the value of the last call.
func (b *EndpointHttpApplyConfiguration) WithResponse(value *BoxApplyConfiguration) *EndpointHttpApplyConfiguration {
	b.Response = value
	return b
}
