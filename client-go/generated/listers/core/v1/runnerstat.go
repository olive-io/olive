/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/olive-io/olive/apis/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RunnerStatLister helps list RunnerStats.
// All objects returned here must be treated as read-only.
type RunnerStatLister interface {
	// List lists all RunnerStats in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.RunnerStat, err error)
	// Get retrieves the RunnerStat from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.RunnerStat, error)
	RunnerStatListerExpansion
}

// runnerStatLister implements the RunnerStatLister interface.
type runnerStatLister struct {
	indexer cache.Indexer
}

// NewRunnerStatLister returns a new RunnerStatLister.
func NewRunnerStatLister(indexer cache.Indexer) RunnerStatLister {
	return &runnerStatLister{indexer: indexer}
}

// List lists all RunnerStats in the indexer.
func (s *runnerStatLister) List(selector labels.Selector) (ret []*v1.RunnerStat, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.RunnerStat))
	})
	return ret, err
}

// Get retrieves the RunnerStat from the index for a given name.
func (s *runnerStatLister) Get(name string) (*v1.RunnerStat, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("runnerstat"), name)
	}
	return obj.(*v1.RunnerStat), nil
}
