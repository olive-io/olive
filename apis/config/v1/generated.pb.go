/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/olive-io/olive/apis/config/v1/generated.proto

package v1

import (
	encoding_binary "encoding/binary"
	fmt "fmt"

	io "io"

	proto "github.com/gogo/protobuf/proto"
	v11 "github.com/olive-io/olive/apis/core/v1"

	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func (m *DefaultPreemptionArgs) Reset()      { *m = DefaultPreemptionArgs{} }
func (*DefaultPreemptionArgs) ProtoMessage() {}
func (*DefaultPreemptionArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf86ed98d981db4e, []int{0}
}
func (m *DefaultPreemptionArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefaultPreemptionArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DefaultPreemptionArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefaultPreemptionArgs.Merge(m, src)
}
func (m *DefaultPreemptionArgs) XXX_Size() int {
	return m.Size()
}
func (m *DefaultPreemptionArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_DefaultPreemptionArgs.DiscardUnknown(m)
}

var xxx_messageInfo_DefaultPreemptionArgs proto.InternalMessageInfo

func (m *Extender) Reset()      { *m = Extender{} }
func (*Extender) ProtoMessage() {}
func (*Extender) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf86ed98d981db4e, []int{1}
}
func (m *Extender) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Extender) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Extender) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Extender.Merge(m, src)
}
func (m *Extender) XXX_Size() int {
	return m.Size()
}
func (m *Extender) XXX_DiscardUnknown() {
	xxx_messageInfo_Extender.DiscardUnknown(m)
}

var xxx_messageInfo_Extender proto.InternalMessageInfo

func (m *ExtenderManagedResource) Reset()      { *m = ExtenderManagedResource{} }
func (*ExtenderManagedResource) ProtoMessage() {}
func (*ExtenderManagedResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf86ed98d981db4e, []int{2}
}
func (m *ExtenderManagedResource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtenderManagedResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExtenderManagedResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtenderManagedResource.Merge(m, src)
}
func (m *ExtenderManagedResource) XXX_Size() int {
	return m.Size()
}
func (m *ExtenderManagedResource) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtenderManagedResource.DiscardUnknown(m)
}

var xxx_messageInfo_ExtenderManagedResource proto.InternalMessageInfo

func (m *ExtenderTLSConfig) Reset()      { *m = ExtenderTLSConfig{} }
func (*ExtenderTLSConfig) ProtoMessage() {}
func (*ExtenderTLSConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf86ed98d981db4e, []int{3}
}
func (m *ExtenderTLSConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtenderTLSConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExtenderTLSConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtenderTLSConfig.Merge(m, src)
}
func (m *ExtenderTLSConfig) XXX_Size() int {
	return m.Size()
}
func (m *ExtenderTLSConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtenderTLSConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ExtenderTLSConfig proto.InternalMessageInfo

func (m *InterRegionAffinityArgs) Reset()      { *m = InterRegionAffinityArgs{} }
func (*InterRegionAffinityArgs) ProtoMessage() {}
func (*InterRegionAffinityArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf86ed98d981db4e, []int{4}
}
func (m *InterRegionAffinityArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterRegionAffinityArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *InterRegionAffinityArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterRegionAffinityArgs.Merge(m, src)
}
func (m *InterRegionAffinityArgs) XXX_Size() int {
	return m.Size()
}
func (m *InterRegionAffinityArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_InterRegionAffinityArgs.DiscardUnknown(m)
}

var xxx_messageInfo_InterRegionAffinityArgs proto.InternalMessageInfo

func (m *Plugin) Reset()      { *m = Plugin{} }
func (*Plugin) ProtoMessage() {}
func (*Plugin) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf86ed98d981db4e, []int{5}
}
func (m *Plugin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Plugin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Plugin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Plugin.Merge(m, src)
}
func (m *Plugin) XXX_Size() int {
	return m.Size()
}
func (m *Plugin) XXX_DiscardUnknown() {
	xxx_messageInfo_Plugin.DiscardUnknown(m)
}

var xxx_messageInfo_Plugin proto.InternalMessageInfo

func (m *PluginConfig) Reset()      { *m = PluginConfig{} }
func (*PluginConfig) ProtoMessage() {}
func (*PluginConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf86ed98d981db4e, []int{6}
}
func (m *PluginConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PluginConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PluginConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginConfig.Merge(m, src)
}
func (m *PluginConfig) XXX_Size() int {
	return m.Size()
}
func (m *PluginConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PluginConfig proto.InternalMessageInfo

func (m *PluginSet) Reset()      { *m = PluginSet{} }
func (*PluginSet) ProtoMessage() {}
func (*PluginSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf86ed98d981db4e, []int{7}
}
func (m *PluginSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PluginSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PluginSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginSet.Merge(m, src)
}
func (m *PluginSet) XXX_Size() int {
	return m.Size()
}
func (m *PluginSet) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginSet.DiscardUnknown(m)
}

var xxx_messageInfo_PluginSet proto.InternalMessageInfo

func (m *Plugins) Reset()      { *m = Plugins{} }
func (*Plugins) ProtoMessage() {}
func (*Plugins) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf86ed98d981db4e, []int{8}
}
func (m *Plugins) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Plugins) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Plugins) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Plugins.Merge(m, src)
}
func (m *Plugins) XXX_Size() int {
	return m.Size()
}
func (m *Plugins) XXX_DiscardUnknown() {
	xxx_messageInfo_Plugins.DiscardUnknown(m)
}

var xxx_messageInfo_Plugins proto.InternalMessageInfo

func (m *RegionTopologySpreadArgs) Reset()      { *m = RegionTopologySpreadArgs{} }
func (*RegionTopologySpreadArgs) ProtoMessage() {}
func (*RegionTopologySpreadArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf86ed98d981db4e, []int{9}
}
func (m *RegionTopologySpreadArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegionTopologySpreadArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RegionTopologySpreadArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionTopologySpreadArgs.Merge(m, src)
}
func (m *RegionTopologySpreadArgs) XXX_Size() int {
	return m.Size()
}
func (m *RegionTopologySpreadArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionTopologySpreadArgs.DiscardUnknown(m)
}

var xxx_messageInfo_RegionTopologySpreadArgs proto.InternalMessageInfo

func (m *RequestedToCapacityRatioParam) Reset()      { *m = RequestedToCapacityRatioParam{} }
func (*RequestedToCapacityRatioParam) ProtoMessage() {}
func (*RequestedToCapacityRatioParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf86ed98d981db4e, []int{10}
}
func (m *RequestedToCapacityRatioParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestedToCapacityRatioParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RequestedToCapacityRatioParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestedToCapacityRatioParam.Merge(m, src)
}
func (m *RequestedToCapacityRatioParam) XXX_Size() int {
	return m.Size()
}
func (m *RequestedToCapacityRatioParam) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestedToCapacityRatioParam.DiscardUnknown(m)
}

var xxx_messageInfo_RequestedToCapacityRatioParam proto.InternalMessageInfo

func (m *ResourceSpec) Reset()      { *m = ResourceSpec{} }
func (*ResourceSpec) ProtoMessage() {}
func (*ResourceSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf86ed98d981db4e, []int{11}
}
func (m *ResourceSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ResourceSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceSpec.Merge(m, src)
}
func (m *ResourceSpec) XXX_Size() int {
	return m.Size()
}
func (m *ResourceSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceSpec proto.InternalMessageInfo

func (m *RunnerAffinityArgs) Reset()      { *m = RunnerAffinityArgs{} }
func (*RunnerAffinityArgs) ProtoMessage() {}
func (*RunnerAffinityArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf86ed98d981db4e, []int{12}
}
func (m *RunnerAffinityArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunnerAffinityArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RunnerAffinityArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunnerAffinityArgs.Merge(m, src)
}
func (m *RunnerAffinityArgs) XXX_Size() int {
	return m.Size()
}
func (m *RunnerAffinityArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_RunnerAffinityArgs.DiscardUnknown(m)
}

var xxx_messageInfo_RunnerAffinityArgs proto.InternalMessageInfo

func (m *RunnerResourcesBalancedAllocationArgs) Reset()      { *m = RunnerResourcesBalancedAllocationArgs{} }
func (*RunnerResourcesBalancedAllocationArgs) ProtoMessage() {}
func (*RunnerResourcesBalancedAllocationArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf86ed98d981db4e, []int{13}
}
func (m *RunnerResourcesBalancedAllocationArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunnerResourcesBalancedAllocationArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RunnerResourcesBalancedAllocationArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunnerResourcesBalancedAllocationArgs.Merge(m, src)
}
func (m *RunnerResourcesBalancedAllocationArgs) XXX_Size() int {
	return m.Size()
}
func (m *RunnerResourcesBalancedAllocationArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_RunnerResourcesBalancedAllocationArgs.DiscardUnknown(m)
}

var xxx_messageInfo_RunnerResourcesBalancedAllocationArgs proto.InternalMessageInfo

func (m *RunnerResourcesFitArgs) Reset()      { *m = RunnerResourcesFitArgs{} }
func (*RunnerResourcesFitArgs) ProtoMessage() {}
func (*RunnerResourcesFitArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf86ed98d981db4e, []int{14}
}
func (m *RunnerResourcesFitArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunnerResourcesFitArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RunnerResourcesFitArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunnerResourcesFitArgs.Merge(m, src)
}
func (m *RunnerResourcesFitArgs) XXX_Size() int {
	return m.Size()
}
func (m *RunnerResourcesFitArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_RunnerResourcesFitArgs.DiscardUnknown(m)
}

var xxx_messageInfo_RunnerResourcesFitArgs proto.InternalMessageInfo

func (m *SchedulerConfiguration) Reset()      { *m = SchedulerConfiguration{} }
func (*SchedulerConfiguration) ProtoMessage() {}
func (*SchedulerConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf86ed98d981db4e, []int{15}
}
func (m *SchedulerConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchedulerConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SchedulerConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulerConfiguration.Merge(m, src)
}
func (m *SchedulerConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *SchedulerConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulerConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulerConfiguration proto.InternalMessageInfo

func (m *SchedulerProfile) Reset()      { *m = SchedulerProfile{} }
func (*SchedulerProfile) ProtoMessage() {}
func (*SchedulerProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf86ed98d981db4e, []int{16}
}
func (m *SchedulerProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchedulerProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SchedulerProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulerProfile.Merge(m, src)
}
func (m *SchedulerProfile) XXX_Size() int {
	return m.Size()
}
func (m *SchedulerProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulerProfile.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulerProfile proto.InternalMessageInfo

func (m *ScoringStrategy) Reset()      { *m = ScoringStrategy{} }
func (*ScoringStrategy) ProtoMessage() {}
func (*ScoringStrategy) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf86ed98d981db4e, []int{17}
}
func (m *ScoringStrategy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScoringStrategy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ScoringStrategy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScoringStrategy.Merge(m, src)
}
func (m *ScoringStrategy) XXX_Size() int {
	return m.Size()
}
func (m *ScoringStrategy) XXX_DiscardUnknown() {
	xxx_messageInfo_ScoringStrategy.DiscardUnknown(m)
}

var xxx_messageInfo_ScoringStrategy proto.InternalMessageInfo

func (m *UtilizationShapePoint) Reset()      { *m = UtilizationShapePoint{} }
func (*UtilizationShapePoint) ProtoMessage() {}
func (*UtilizationShapePoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf86ed98d981db4e, []int{18}
}
func (m *UtilizationShapePoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UtilizationShapePoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UtilizationShapePoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UtilizationShapePoint.Merge(m, src)
}
func (m *UtilizationShapePoint) XXX_Size() int {
	return m.Size()
}
func (m *UtilizationShapePoint) XXX_DiscardUnknown() {
	xxx_messageInfo_UtilizationShapePoint.DiscardUnknown(m)
}

var xxx_messageInfo_UtilizationShapePoint proto.InternalMessageInfo

func (m *VolumeBindingArgs) Reset()      { *m = VolumeBindingArgs{} }
func (*VolumeBindingArgs) ProtoMessage() {}
func (*VolumeBindingArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf86ed98d981db4e, []int{19}
}
func (m *VolumeBindingArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VolumeBindingArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VolumeBindingArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeBindingArgs.Merge(m, src)
}
func (m *VolumeBindingArgs) XXX_Size() int {
	return m.Size()
}
func (m *VolumeBindingArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeBindingArgs.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeBindingArgs proto.InternalMessageInfo

func (m *ClientConnectionConfiguration) Reset()      { *m = ClientConnectionConfiguration{} }
func (*ClientConnectionConfiguration) ProtoMessage() {}
func (*ClientConnectionConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf86ed98d981db4e, []int{20}
}
func (m *ClientConnectionConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientConnectionConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClientConnectionConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientConnectionConfiguration.Merge(m, src)
}
func (m *ClientConnectionConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ClientConnectionConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientConnectionConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ClientConnectionConfiguration proto.InternalMessageInfo

func (m *DebuggingConfiguration) Reset()      { *m = DebuggingConfiguration{} }
func (*DebuggingConfiguration) ProtoMessage() {}
func (*DebuggingConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf86ed98d981db4e, []int{21}
}
func (m *DebuggingConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebuggingConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DebuggingConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebuggingConfiguration.Merge(m, src)
}
func (m *DebuggingConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *DebuggingConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_DebuggingConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_DebuggingConfiguration proto.InternalMessageInfo

func (m *LeaderElectionConfiguration) Reset()      { *m = LeaderElectionConfiguration{} }
func (*LeaderElectionConfiguration) ProtoMessage() {}
func (*LeaderElectionConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf86ed98d981db4e, []int{22}
}
func (m *LeaderElectionConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaderElectionConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LeaderElectionConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaderElectionConfiguration.Merge(m, src)
}
func (m *LeaderElectionConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *LeaderElectionConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaderElectionConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_LeaderElectionConfiguration proto.InternalMessageInfo

func init() {
	proto.RegisterType((*DefaultPreemptionArgs)(nil), "github.com.olive_io.olive.apis.config.v1.DefaultPreemptionArgs")
	proto.RegisterType((*Extender)(nil), "github.com.olive_io.olive.apis.config.v1.Extender")
	proto.RegisterType((*ExtenderManagedResource)(nil), "github.com.olive_io.olive.apis.config.v1.ExtenderManagedResource")
	proto.RegisterType((*ExtenderTLSConfig)(nil), "github.com.olive_io.olive.apis.config.v1.ExtenderTLSConfig")
	proto.RegisterType((*InterRegionAffinityArgs)(nil), "github.com.olive_io.olive.apis.config.v1.InterRegionAffinityArgs")
	proto.RegisterType((*Plugin)(nil), "github.com.olive_io.olive.apis.config.v1.Plugin")
	proto.RegisterType((*PluginConfig)(nil), "github.com.olive_io.olive.apis.config.v1.PluginConfig")
	proto.RegisterType((*PluginSet)(nil), "github.com.olive_io.olive.apis.config.v1.PluginSet")
	proto.RegisterType((*Plugins)(nil), "github.com.olive_io.olive.apis.config.v1.Plugins")
	proto.RegisterType((*RegionTopologySpreadArgs)(nil), "github.com.olive_io.olive.apis.config.v1.RegionTopologySpreadArgs")
	proto.RegisterType((*RequestedToCapacityRatioParam)(nil), "github.com.olive_io.olive.apis.config.v1.RequestedToCapacityRatioParam")
	proto.RegisterType((*ResourceSpec)(nil), "github.com.olive_io.olive.apis.config.v1.ResourceSpec")
	proto.RegisterType((*RunnerAffinityArgs)(nil), "github.com.olive_io.olive.apis.config.v1.RunnerAffinityArgs")
	proto.RegisterType((*RunnerResourcesBalancedAllocationArgs)(nil), "github.com.olive_io.olive.apis.config.v1.RunnerResourcesBalancedAllocationArgs")
	proto.RegisterType((*RunnerResourcesFitArgs)(nil), "github.com.olive_io.olive.apis.config.v1.RunnerResourcesFitArgs")
	proto.RegisterType((*SchedulerConfiguration)(nil), "github.com.olive_io.olive.apis.config.v1.SchedulerConfiguration")
	proto.RegisterType((*SchedulerProfile)(nil), "github.com.olive_io.olive.apis.config.v1.SchedulerProfile")
	proto.RegisterType((*ScoringStrategy)(nil), "github.com.olive_io.olive.apis.config.v1.ScoringStrategy")
	proto.RegisterType((*UtilizationShapePoint)(nil), "github.com.olive_io.olive.apis.config.v1.UtilizationShapePoint")
	proto.RegisterType((*VolumeBindingArgs)(nil), "github.com.olive_io.olive.apis.config.v1.VolumeBindingArgs")
	proto.RegisterType((*ClientConnectionConfiguration)(nil), "github.com.olive_io.olive.apis.config.v1.ClientConnectionConfiguration")
	proto.RegisterType((*DebuggingConfiguration)(nil), "github.com.olive_io.olive.apis.config.v1.DebuggingConfiguration")
	proto.RegisterType((*LeaderElectionConfiguration)(nil), "github.com.olive_io.olive.apis.config.v1.LeaderElectionConfiguration")
}

func init() {
	proto.RegisterFile("github.com/olive-io/olive/apis/config/v1/generated.proto", fileDescriptor_bf86ed98d981db4e)
}

var fileDescriptor_bf86ed98d981db4e = []byte{
	// 2432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x5a, 0x49, 0x6f, 0x1c, 0xc7,
	0x15, 0x56, 0x0f, 0xd7, 0xa9, 0x21, 0x25, 0xb2, 0x64, 0x52, 0x23, 0x2a, 0x5c, 0xd2, 0x86, 0x02,
	0x1a, 0x88, 0x86, 0x11, 0x93, 0x28, 0x4a, 0x0c, 0x24, 0x62, 0x93, 0x94, 0x4c, 0x5b, 0xcb, 0xb8,
	0x86, 0x72, 0x94, 0x38, 0xb0, 0xd1, 0xec, 0x7e, 0xd3, 0x2c, 0xb0, 0xa7, 0xbb, 0x55, 0x5d, 0x2d,
	0x89, 0x3e, 0xc5, 0x08, 0x0c, 0x5f, 0x12, 0xc0, 0xa7, 0x20, 0xc8, 0x2d, 0x87, 0xfc, 0x8b, 0x5c,
	0x72, 0x13, 0x90, 0x1c, 0x8c, 0x5c, 0xe2, 0x13, 0x11, 0x31, 0x47, 0xff, 0x83, 0x00, 0x41, 0x82,
	0x5a, 0x7a, 0x9b, 0x85, 0x1a, 0x52, 0xf2, 0x8d, 0x5d, 0xef, 0x7b, 0xdf, 0x7b, 0xb5, 0xbc, 0xa5,
	0x6a, 0x88, 0x6e, 0x7a, 0x94, 0xef, 0x27, 0x7b, 0x0d, 0x27, 0xec, 0xac, 0x85, 0x3e, 0x7d, 0x02,
	0xd7, 0x68, 0xa8, 0xfe, 0x58, 0xb3, 0x23, 0x1a, 0xaf, 0x39, 0x61, 0xd0, 0xa6, 0xde, 0xda, 0x93,
	0xeb, 0x6b, 0x1e, 0x04, 0xc0, 0x6c, 0x0e, 0x6e, 0x23, 0x62, 0x21, 0x0f, 0xf1, 0x6a, 0xae, 0xd9,
	0x90, 0x0a, 0x1f, 0xd3, 0x50, 0xfd, 0xd1, 0x10, 0x9a, 0x0d, 0xa5, 0xd9, 0x78, 0x72, 0x7d, 0xe1,
	0x5a, 0xc1, 0x86, 0x17, 0x7a, 0xe1, 0x9a, 0x24, 0xd8, 0x4b, 0xda, 0xf2, 0x4b, 0x7e, 0xc8, 0xbf,
	0x14, 0xf1, 0xc2, 0x8d, 0x97, 0xba, 0xc4, 0xa0, 0x8f, 0x43, 0x0b, 0x3f, 0x38, 0xb8, 0x19, 0x37,
	0x68, 0x28, 0x40, 0x1d, 0xdb, 0xd9, 0xa7, 0x01, 0xb0, 0xc3, 0xb5, 0xe8, 0xc0, 0x53, 0x5a, 0x1d,
	0xe0, 0x76, 0x3f, 0xad, 0xb5, 0x41, 0x5a, 0x2c, 0x09, 0x38, 0xed, 0x40, 0x8f, 0xc2, 0x8d, 0x97,
	0x29, 0xc4, 0xce, 0x3e, 0x74, 0xec, 0x6e, 0x3d, 0xf3, 0x6b, 0x03, 0xcd, 0x6d, 0x41, 0xdb, 0x4e,
	0x7c, 0xde, 0x64, 0x00, 0x9d, 0x88, 0xd3, 0x30, 0xd8, 0x60, 0x5e, 0x8c, 0x0f, 0xd0, 0x62, 0x87,
	0x06, 0x9b, 0x76, 0xe0, 0x52, 0xd7, 0xe6, 0x40, 0x92, 0x20, 0x00, 0x16, 0x37, 0x81, 0x39, 0x10,
	0x70, 0xdb, 0x83, 0xba, 0xb1, 0x62, 0xac, 0x8e, 0x59, 0x57, 0x9f, 0x1f, 0x2d, 0x9f, 0x3b, 0x3e,
	0x5a, 0x5e, 0xbc, 0x77, 0x12, 0x98, 0x9c, 0xcc, 0x85, 0x01, 0x5d, 0xe9, 0x03, 0xd8, 0xd8, 0x8b,
	0x43, 0x3f, 0xe1, 0x50, 0xaf, 0x48, 0x53, 0x6f, 0x6a, 0x53, 0x57, 0xee, 0x0d, 0x86, 0x92, 0x93,
	0x78, 0xcc, 0xbf, 0x8d, 0xa3, 0xc9, 0xed, 0x67, 0x1c, 0x02, 0x17, 0x18, 0x5e, 0x43, 0xd5, 0x84,
	0xf9, 0x4d, 0x06, 0x6d, 0xfa, 0x4c, 0x4e, 0xa6, 0x6a, 0xcd, 0x6a, 0x0b, 0xd5, 0x87, 0xe4, 0xae,
	0x12, 0x90, 0x1c, 0x83, 0xd7, 0x11, 0x6a, 0x53, 0x9f, 0x03, 0xfb, 0x00, 0xd8, 0x9e, 0xf4, 0xa9,
	0x6a, 0x61, 0xad, 0x81, 0x6e, 0x67, 0x12, 0x52, 0x40, 0xe1, 0x1f, 0xa2, 0x5a, 0xa4, 0xd6, 0x55,
	0x2a, 0x8d, 0x48, 0xa5, 0x8b, 0x5a, 0xa9, 0xd6, 0xcc, 0x45, 0xa4, 0x88, 0xc3, 0x3f, 0x45, 0xe7,
	0x23, 0x46, 0x43, 0x46, 0x39, 0xfd, 0x04, 0xa4, 0xe6, 0xa8, 0xd4, 0x9c, 0xd7, 0x9a, 0xe7, 0x9b,
	0x25, 0x29, 0xe9, 0x42, 0xe3, 0xef, 0xa0, 0xf1, 0xa7, 0x40, 0xbd, 0x7d, 0x5e, 0x1f, 0x5b, 0x31,
	0x56, 0x47, 0xac, 0xf3, 0x5a, 0x6f, 0xfc, 0xe7, 0x72, 0x94, 0x68, 0x29, 0xfe, 0x2e, 0x9a, 0xdc,
	0xa3, 0x81, 0x2b, 0x2d, 0x8c, 0x4b, 0x0b, 0x33, 0x1a, 0x39, 0x69, 0xe9, 0x71, 0x92, 0x21, 0xc4,
	0x64, 0x20, 0xb0, 0xf7, 0x7c, 0x78, 0x67, 0x77, 0xb7, 0xd9, 0xaa, 0x4f, 0xac, 0x18, 0xab, 0x93,
	0xf9, 0x64, 0xb6, 0x73, 0x11, 0x29, 0xe2, 0xf0, 0x3e, 0xaa, 0x72, 0x3f, 0xde, 0x94, 0x91, 0x57,
	0x9f, 0x5c, 0x31, 0x56, 0x6b, 0xeb, 0x6f, 0x37, 0x86, 0x8d, 0xd3, 0x46, 0xba, 0x5f, 0xbb, 0x77,
	0x5b, 0x8a, 0xc2, 0x9a, 0x16, 0x3b, 0x94, 0x7d, 0x92, 0x9c, 0x1c, 0x03, 0xaa, 0xed, 0x73, 0x1e,
	0xed, 0xd2, 0x0e, 0x84, 0x09, 0xaf, 0x57, 0xa5, 0xad, 0x46, 0x43, 0xc5, 0x46, 0xa3, 0x18, 0x1b,
	0x8d, 0xe8, 0xc0, 0x53, 0x96, 0x44, 0x08, 0x0a, 0x3b, 0x5b, 0x09, 0xb3, 0xc5, 0xe1, 0xcf, 0x27,
	0x24, 0xbc, 0xd7, 0x54, 0xa4, 0xc8, 0x8b, 0xdf, 0x45, 0x98, 0xc9, 0x93, 0xb5, 0x69, 0x3b, 0xfb,
	0xb0, 0x69, 0x47, 0x62, 0xae, 0x75, 0x24, 0x97, 0x63, 0x41, 0x6b, 0x63, 0xd2, 0x83, 0x20, 0x7d,
	0xb4, 0xf0, 0xe7, 0x06, 0x9a, 0xe9, 0xd8, 0x81, 0xed, 0x81, 0x4b, 0x20, 0x0e, 0x13, 0xe6, 0x40,
	0x5c, 0xaf, 0xad, 0x8c, 0xac, 0xd6, 0xd6, 0x37, 0x4e, 0xbf, 0x48, 0xf7, 0xca, 0x4c, 0x56, 0x5d,
	0x7b, 0x33, 0xd3, 0x25, 0x88, 0x49, 0x8f, 0x51, 0x11, 0x0f, 0xd4, 0x0b, 0x42, 0x26, 0x27, 0x33,
	0x25, 0x27, 0x93, 0xc5, 0xc3, 0x4e, 0x2a, 0x20, 0x39, 0xc6, 0xfc, 0xdc, 0x40, 0x97, 0x06, 0x18,
	0xc6, 0x2b, 0x68, 0x34, 0xb0, 0x3b, 0xa0, 0xe3, 0x6a, 0x4a, 0xf3, 0x8c, 0xde, 0xb7, 0x3b, 0x40,
	0xa4, 0x44, 0x2c, 0xa2, 0xa4, 0x02, 0xd7, 0x3a, 0x6c, 0x39, 0xfb, 0xe0, 0x26, 0x3e, 0x30, 0x19,
	0x55, 0x85, 0x45, 0xdc, 0xe9, 0x41, 0x90, 0x3e, 0x5a, 0xe6, 0xd7, 0x15, 0x34, 0xdb, 0x73, 0x4e,
	0xc4, 0xe1, 0xa6, 0x41, 0x0c, 0x4e, 0xc2, 0x94, 0x1f, 0x93, 0xf9, 0xe1, 0xde, 0xd1, 0xe3, 0x24,
	0x43, 0x88, 0xe8, 0x8e, 0x81, 0x3d, 0x01, 0x26, 0x7c, 0xec, 0x8e, 0xee, 0x56, 0x26, 0x21, 0x05,
	0x94, 0xb0, 0xe0, 0x00, 0xe3, 0xb7, 0xa9, 0x0f, 0x3a, 0xb4, 0x33, 0x0b, 0x9b, 0x7a, 0x9c, 0x64,
	0x08, 0xfc, 0x16, 0x9a, 0x38, 0x80, 0x43, 0x09, 0x56, 0xd1, 0x7c, 0x41, 0x83, 0x27, 0xde, 0x53,
	0xc3, 0x24, 0x95, 0x8b, 0xf8, 0x75, 0x6c, 0x89, 0x1c, 0x93, 0xc8, 0x2c, 0x7e, 0x37, 0x37, 0x24,
	0x50, 0x4b, 0xf1, 0xaa, 0x72, 0x60, 0xcb, 0xe6, 0xb6, 0x8c, 0xdf, 0x29, 0x6b, 0x2a, 0x35, 0x2e,
	0xc6, 0x48, 0x26, 0xc5, 0x57, 0xa5, 0x71, 0x09, 0x9c, 0x90, 0xc0, 0x9a, 0x36, 0x2c, 0x71, 0xa9,
	0x0c, 0x9b, 0xc2, 0xb0, 0x44, 0x4d, 0x4a, 0x14, 0x52, 0x46, 0x25, 0x48, 0x4b, 0xcc, 0xff, 0x1a,
	0xe8, 0xd2, 0x4e, 0xc0, 0x81, 0x11, 0xf0, 0x44, 0xb5, 0x68, 0xb7, 0x69, 0x40, 0xf9, 0xa1, 0xac,
	0x1a, 0xbf, 0x42, 0xf5, 0x7d, 0x9b, 0xb9, 0x65, 0x89, 0x4a, 0x3a, 0xba, 0x60, 0xac, 0xe8, 0xa9,
	0xd4, 0xdf, 0x19, 0x80, 0x23, 0x03, 0x19, 0xf0, 0x6f, 0x0c, 0x74, 0x55, 0x6d, 0xbf, 0x48, 0xc9,
	0xc0, 0x18, 0xb8, 0xbb, 0xc0, 0x3a, 0xf1, 0x83, 0xf6, 0xf6, 0x33, 0x1a, 0x73, 0x1a, 0x78, 0x4a,
	0x2d, 0xd6, 0xe7, 0xe8, 0x9a, 0xb6, 0x75, 0x75, 0x67, 0x18, 0x25, 0x32, 0x1c, 0xb7, 0x49, 0xd0,
	0x78, 0xd3, 0x4f, 0x3c, 0x1a, 0x0c, 0x71, 0xca, 0xf3, 0x44, 0xac, 0x6a, 0xd8, 0x80, 0x44, 0x6c,
	0x7e, 0x6a, 0xa0, 0x29, 0x45, 0xaa, 0x0f, 0xef, 0xcb, 0xa9, 0x1f, 0xa0, 0x51, 0x9b, 0x79, 0x6a,
	0xaa, 0xb5, 0xf5, 0x6b, 0x03, 0xb3, 0x9c, 0xee, 0x00, 0x1a, 0xc4, 0x7e, 0x2a, 0x63, 0x24, 0x16,
	0x49, 0x2e, 0x23, 0x14, 0xbb, 0x46, 0x24, 0x91, 0xf9, 0xdc, 0x40, 0x55, 0xe5, 0x43, 0x0b, 0x38,
	0xfe, 0x10, 0x4d, 0xa8, 0x24, 0xee, 0xd6, 0x0d, 0x99, 0x8e, 0xbe, 0x37, 0x7c, 0x3a, 0x52, 0x2c,
	0xf9, 0xf9, 0x56, 0xa5, 0xc1, 0x25, 0x29, 0x23, 0xfe, 0x08, 0x4d, 0xba, 0x34, 0x56, 0xec, 0x95,
	0x33, 0xb2, 0x67, 0xa1, 0xb6, 0xa5, 0x99, 0x48, 0xc6, 0x69, 0x7e, 0x8a, 0xd0, 0x84, 0x82, 0xc5,
	0xd8, 0x43, 0x28, 0x62, 0xb0, 0x1d, 0x3c, 0x4e, 0x20, 0x51, 0xeb, 0x59, 0x5b, 0xff, 0xfe, 0x69,
	0xad, 0xb5, 0x80, 0xe7, 0xd9, 0xa0, 0x99, 0xd1, 0x91, 0x02, 0x35, 0x76, 0x51, 0x55, 0xfe, 0xd1,
	0x0a, 0x19, 0xd7, 0xbb, 0x72, 0x26, 0x3b, 0x59, 0xd6, 0x7d, 0x3f, 0x65, 0x23, 0x39, 0xb1, 0xb0,
	0x12, 0x31, 0x50, 0xed, 0x86, 0x4c, 0x3a, 0xaf, 0x6a, 0xa5, 0x99, 0xb2, 0x91, 0x9c, 0x18, 0x7f,
	0x88, 0xc6, 0x55, 0x17, 0x23, 0x53, 0xd5, 0x19, 0x4d, 0x64, 0x87, 0x5d, 0xf3, 0x6b, 0x4a, 0xb9,
	0x23, 0x61, 0xcc, 0xf5, 0x1c, 0xc6, 0x5e, 0xc7, 0x8e, 0x64, 0x74, 0xa4, 0x40, 0x8d, 0x6d, 0x34,
	0x19, 0x31, 0x68, 0x89, 0xde, 0x5c, 0xa6, 0xc7, 0x33, 0x9a, 0xc9, 0x4e, 0x5a, 0x53, 0x93, 0x91,
	0x8c, 0x16, 0x3f, 0x42, 0x63, 0xb1, 0xe4, 0x9f, 0x38, 0x3b, 0xff, 0xb4, 0xe6, 0x1f, 0x53, 0xe4,
	0x8a, 0x10, 0x7f, 0x84, 0x26, 0x18, 0xc8, 0x62, 0xa3, 0x9b, 0xa6, 0x33, 0x71, 0x67, 0x31, 0x48,
	0x14, 0x17, 0x49, 0x49, 0xc5, 0x16, 0x47, 0xc0, 0x3a, 0x34, 0xed, 0x93, 0x5e, 0x6d, 0x8b, 0x9b,
	0x92, 0x8a, 0x68, 0x4a, 0xe1, 0x7c, 0xc4, 0x40, 0xf4, 0x90, 0xb2, 0x2f, 0x7a, 0x55, 0xe7, 0x9b,
	0x8a, 0x8b, 0xa4, 0xa4, 0xf8, 0x21, 0x1a, 0x15, 0x6d, 0x69, 0xbd, 0x76, 0x76, 0xf2, 0x2c, 0x05,
	0x4a, 0x66, 0x49, 0x27, 0x0f, 0x4c, 0x18, 0x73, 0xe9, 0xf7, 0xd4, 0xeb, 0x38, 0x30, 0x9a, 0x8c,
	0x64, 0xb4, 0xe2, 0xf0, 0x77, 0x12, 0x9f, 0xd3, 0x66, 0x48, 0x03, 0x5e, 0x9f, 0x7e, 0x0d, 0x87,
	0xff, 0x5e, 0x46, 0x47, 0x0a, 0xd4, 0xe6, 0xef, 0x2b, 0xa8, 0xae, 0x4a, 0xd6, 0x6e, 0x18, 0x85,
	0x7e, 0xe8, 0x1d, 0xb6, 0x22, 0x06, 0xb6, 0x2b, 0xeb, 0xf4, 0x6f, 0x0d, 0x84, 0x5d, 0x75, 0xef,
	0xdb, 0x0c, 0x83, 0x98, 0x33, 0x9b, 0x06, 0x3c, 0xd6, 0x99, 0xfe, 0xd6, 0xcb, 0xdd, 0x61, 0x20,
	0x9c, 0x29, 0x13, 0xe7, 0x44, 0x79, 0x03, 0xb7, 0xd5, 0x63, 0x83, 0xf4, 0xb1, 0x8b, 0x0f, 0xd0,
	0x79, 0x3d, 0x4a, 0x03, 0x6f, 0xf7, 0x30, 0x4a, 0x1b, 0xb0, 0xcd, 0xf4, 0xbe, 0xb3, 0x55, 0x92,
	0xfe, 0xe7, 0x68, 0xf9, 0xad, 0x7e, 0x53, 0x2b, 0x50, 0xe6, 0x0a, 0xa4, 0x8b, 0xda, 0xfc, 0xcc,
	0x40, 0x8b, 0x04, 0x1e, 0x27, 0x10, 0x73, 0x70, 0x77, 0x43, 0xd1, 0x89, 0x3b, 0x94, 0x1f, 0x12,
	0xd1, 0xfe, 0x37, 0x6d, 0x66, 0x77, 0xb0, 0x8b, 0xc6, 0xe2, 0x7d, 0x3b, 0x02, 0xbd, 0x1e, 0x3f,
	0x1b, 0x7e, 0x7b, 0x1e, 0x72, 0xea, 0xd3, 0x4f, 0xe4, 0x45, 0xa2, 0x25, 0x18, 0xe4, 0x56, 0x14,
	0x02, 0x5c, 0x8c, 0x11, 0x45, 0x6e, 0x3e, 0x42, 0x53, 0x69, 0xbf, 0xdc, 0x8a, 0xc0, 0x39, 0x75,
	0x37, 0x31, 0xf0, 0x5a, 0x27, 0x66, 0xa8, 0xef, 0x1f, 0xa5, 0xe6, 0x2c, 0x44, 0xd3, 0xb6, 0xeb,
	0x82, 0x9b, 0x0e, 0xea, 0x62, 0x78, 0x63, 0xd8, 0xed, 0x2e, 0x53, 0x5a, 0xb3, 0xc7, 0x47, 0xcb,
	0xd3, 0x1b, 0x45, 0x42, 0x52, 0xe6, 0x37, 0xbf, 0x30, 0xd0, 0x55, 0xa5, 0x94, 0x5d, 0x33, 0x2c,
	0xdb, 0xb7, 0x03, 0x07, 0xdc, 0x0d, 0xdf, 0x0f, 0x1d, 0x3b, 0x7b, 0x6d, 0xf0, 0x50, 0x95, 0x65,
	0xd7, 0x1f, 0xb5, 0xea, 0x37, 0x86, 0x5f, 0xf5, 0xe2, 0x32, 0xe6, 0x85, 0x2d, 0xbf, 0xec, 0xe4,
	0xdc, 0xe6, 0x9f, 0x2b, 0x68, 0xbe, 0xcb, 0xa5, 0xdb, 0x94, 0x4b, 0x1f, 0x6e, 0xa1, 0x19, 0x7d,
	0xb7, 0x20, 0x25, 0x57, 0xaa, 0xd6, 0x1b, 0xe2, 0x0a, 0xb5, 0xd3, 0x25, 0x23, 0x3d, 0x68, 0xfc,
	0x00, 0xcd, 0x75, 0x8d, 0xdd, 0x61, 0x61, 0x12, 0xc5, 0xb2, 0xc7, 0xa9, 0x5a, 0x97, 0x8f, 0x8f,
	0x96, 0xe7, 0x76, 0xfa, 0x01, 0x48, 0x7f, 0x3d, 0xfc, 0x0c, 0x5d, 0x10, 0xc5, 0x80, 0x06, 0x5e,
	0x8b, 0x33, 0x9b, 0x83, 0x77, 0xa8, 0x4b, 0xfe, 0x8f, 0x87, 0x5f, 0x9c, 0x56, 0x99, 0xc0, 0xba,
	0x78, 0x7c, 0xb4, 0x7c, 0xa1, 0x6b, 0x90, 0x74, 0x9b, 0x31, 0xff, 0x3e, 0x89, 0xe6, 0xb3, 0x0b,
	0x96, 0xea, 0x49, 0xf5, 0x05, 0x59, 0xbe, 0x69, 0xd8, 0xcc, 0xf6, 0x7d, 0xf0, 0x69, 0xdc, 0xd1,
	0x6d, 0x7d, 0xfe, 0xa6, 0x91, 0x8b, 0x48, 0x11, 0x87, 0x3f, 0x33, 0xd0, 0x79, 0x1f, 0x6c, 0x17,
	0xd8, 0xb6, 0x0f, 0x8e, 0x60, 0xd2, 0x4d, 0xd2, 0xf6, 0xf0, 0x73, 0xb9, 0x5b, 0xd2, 0x2f, 0xb9,
	0x95, 0xbf, 0x8d, 0x94, 0x41, 0xa4, 0xcb, 0x28, 0xfe, 0x9d, 0x81, 0x66, 0x1c, 0x9f, 0x42, 0x20,
	0x32, 0x50, 0xa0, 0x3d, 0x51, 0xab, 0x7a, 0x67, 0x78, 0x4f, 0x36, 0xbb, 0x18, 0xca, 0xbe, 0x64,
	0xf7, 0xee, 0x6e, 0x18, 0xe9, 0x31, 0x8d, 0xff, 0x60, 0xa0, 0x79, 0x17, 0xf6, 0x12, 0xcf, 0xa3,
	0x81, 0x57, 0xa2, 0xd1, 0xbd, 0xd7, 0xad, 0xe1, 0xbd, 0xda, 0xea, 0xcb, 0x63, 0x2d, 0x69, 0x77,
	0xe6, 0xfb, 0xcb, 0xc9, 0x00, 0xfb, 0x78, 0x0f, 0x2d, 0x44, 0xd9, 0x23, 0xdd, 0x83, 0xb6, 0x7e,
	0x4e, 0xdb, 0x0d, 0x55, 0x47, 0x35, 0x26, 0x37, 0xde, 0xd4, 0xdc, 0x0b, 0xcd, 0x81, 0x48, 0x72,
	0x02, 0x0b, 0x06, 0x74, 0x85, 0xc9, 0x54, 0xbe, 0x13, 0x50, 0x4e, 0x6d, 0xdf, 0xb2, 0x9d, 0x83,
	0xb0, 0xdd, 0x6e, 0x81, 0x13, 0x06, 0x6e, 0x2c, 0xdb, 0xb6, 0x91, 0xfc, 0xe9, 0x8f, 0x0c, 0x86,
	0x92, 0x93, 0x78, 0xf0, 0x2f, 0xd0, 0x25, 0x25, 0xbe, 0x67, 0x3f, 0xeb, 0x32, 0x31, 0x21, 0x4d,
	0x2c, 0x6b, 0x13, 0x97, 0x48, 0x7f, 0x18, 0x19, 0xa4, 0x8f, 0xf7, 0x45, 0x97, 0x19, 0xb6, 0xa9,
	0x0f, 0x71, 0x7d, 0x52, 0xa6, 0xae, 0x9f, 0x9c, 0x26, 0x3a, 0x75, 0x8c, 0x35, 0x15, 0x45, 0xb1,
	0xd9, 0x54, 0x9c, 0x24, 0x63, 0xc7, 0x0e, 0xaa, 0x82, 0x7e, 0xe6, 0x88, 0xeb, 0x55, 0x69, 0x6a,
	0xfd, 0xf4, 0x8f, 0x44, 0x79, 0x86, 0x4c, 0x47, 0x62, 0x92, 0xf3, 0xe2, 0x16, 0x9a, 0x73, 0xc1,
	0xb7, 0x0f, 0xe5, 0x33, 0xd5, 0xc3, 0x80, 0x53, 0x7f, 0xc3, 0xe1, 0xf4, 0x49, 0xfa, 0xc0, 0xb5,
	0xa8, 0x95, 0xe7, 0xb6, 0xfa, 0x81, 0x48, 0x7f, 0x5d, 0xf3, 0x7f, 0x15, 0x34, 0xd3, 0x3d, 0x55,
	0xfc, 0x36, 0x9a, 0x8e, 0xd3, 0xb1, 0xfb, 0x79, 0xe5, 0x9b, 0xd3, 0x16, 0xa6, 0x5b, 0x45, 0x21,
	0x29, 0x63, 0x5f, 0x72, 0x36, 0x2b, 0xaf, 0xe5, 0x6c, 0x3e, 0x42, 0x13, 0x91, 0xba, 0x45, 0xea,
	0x04, 0x71, 0xfd, 0xb4, 0x8d, 0x5a, 0xac, 0xde, 0x59, 0xf4, 0x07, 0x49, 0xe9, 0x70, 0x84, 0xa6,
	0xa2, 0xc2, 0x75, 0xbf, 0x3e, 0x7a, 0xda, 0x92, 0x57, 0x7c, 0x2c, 0xb0, 0xde, 0xd0, 0xf3, 0x2c,
	0x3d, 0x21, 0x90, 0x92, 0x05, 0xf3, 0x9f, 0x15, 0xd4, 0x9d, 0xf5, 0xf1, 0x8f, 0xd0, 0x28, 0x3f,
	0x8c, 0xd2, 0x75, 0x4f, 0x83, 0x6c, 0x54, 0xb7, 0x58, 0x17, 0xbb, 0xe0, 0x62, 0x98, 0x48, 0x85,
	0x72, 0xb9, 0xae, 0x7c, 0x73, 0xe5, 0x1a, 0xff, 0xc9, 0x40, 0x75, 0x36, 0xa0, 0x57, 0x3b, 0x7d,
	0xd2, 0x3e, 0xb1, 0xeb, 0xb3, 0xbe, 0x75, 0x7c, 0xb4, 0x5c, 0x1f, 0x04, 0x21, 0x03, 0xdd, 0x30,
	0x63, 0x34, 0xd7, 0xb7, 0xed, 0x13, 0x85, 0x32, 0xc9, 0x05, 0xdd, 0x85, 0xb2, 0xa0, 0x43, 0x8a,
	0x38, 0xfc, 0x66, 0x7a, 0xa5, 0x54, 0x87, 0xb8, 0xef, 0xed, 0xd0, 0xfc, 0xab, 0x81, 0x66, 0x3f,
	0x08, 0xfd, 0xa4, 0x23, 0xef, 0x43, 0x34, 0xf0, 0x64, 0x0b, 0x73, 0x1b, 0x61, 0x71, 0x8f, 0xd1,
	0x0f, 0xd5, 0x69, 0x82, 0x33, 0x64, 0x82, 0x9b, 0x17, 0xfd, 0xb8, 0xd5, 0x23, 0x25, 0x7d, 0x34,
	0xf2, 0x06, 0xb8, 0xf2, 0x4d, 0x36, 0xc0, 0x7f, 0xac, 0xa0, 0xc5, 0x13, 0xeb, 0x28, 0x5e, 0x47,
	0xe8, 0x20, 0xd9, 0x03, 0x45, 0xaf, 0x8f, 0x69, 0x76, 0xef, 0x79, 0x2f, 0x93, 0x90, 0x02, 0x0a,
	0xbf, 0x8b, 0xb0, 0xed, 0x38, 0x10, 0x09, 0x52, 0x0e, 0x01, 0x17, 0xc7, 0x36, 0xd6, 0xf7, 0x89,
	0xec, 0x5e, 0xb2, 0xd1, 0x83, 0x20, 0x7d, 0xb4, 0xc4, 0x0e, 0x3a, 0xf9, 0x77, 0xf7, 0xcf, 0x37,
	0x05, 0x28, 0x29, 0xe2, 0xf0, 0x22, 0x1a, 0x79, 0xdc, 0x6c, 0xc9, 0xf2, 0x5d, 0xb1, 0x6a, 0x1a,
	0x3e, 0xf2, 0x7e, 0xb3, 0x45, 0xc4, 0xb8, 0xd8, 0xe0, 0xbd, 0x84, 0xc5, 0x5c, 0x57, 0xd0, 0x6c,
	0x71, 0x2c, 0x31, 0x48, 0x94, 0xcc, 0xfc, 0x8b, 0x81, 0x06, 0x94, 0x6b, 0xbc, 0x81, 0x2e, 0xa8,
	0x87, 0x34, 0x95, 0x48, 0x69, 0xe0, 0xe9, 0xf7, 0xed, 0x4b, 0x9a, 0xe9, 0xc2, 0x76, 0x59, 0x4c,
	0xba, 0xf1, 0xf8, 0x63, 0x74, 0x59, 0x0d, 0xe9, 0x39, 0xd0, 0x30, 0xc8, 0xc9, 0xd4, 0xe3, 0xe9,
	0xb7, 0x35, 0xd9, 0xe5, 0xed, 0x41, 0x40, 0x32, 0x98, 0xc3, 0xfc, 0xc7, 0x28, 0xba, 0x72, 0x42,
	0xb7, 0x26, 0x56, 0xb6, 0xd0, 0x97, 0x69, 0xff, 0xb3, 0x95, 0x2d, 0x68, 0x92, 0x22, 0x0e, 0x1f,
	0xa0, 0x69, 0x1f, 0xec, 0x18, 0xd2, 0x5f, 0x6b, 0x74, 0x0b, 0x79, 0xda, 0xdf, 0x78, 0xb2, 0x12,
	0x73, 0xb7, 0x48, 0x46, 0xca, 0xdc, 0xc2, 0x18, 0x83, 0x00, 0x9e, 0x6e, 0x81, 0xed, 0xfa, 0x34,
	0x00, 0x9d, 0x70, 0xce, 0x6c, 0x8c, 0x14, 0xc9, 0x48, 0x99, 0x1b, 0x03, 0xaa, 0x31, 0xe0, 0xec,
	0xb0, 0x09, 0x8c, 0x86, 0xae, 0x6e, 0xfd, 0xce, 0xfc, 0xdb, 0x15, 0xc9, 0xa9, 0x48, 0x91, 0x17,
	0xdf, 0x44, 0x53, 0x69, 0x76, 0xbd, 0x1b, 0x3a, 0x07, 0xfa, 0xf7, 0x85, 0xac, 0x80, 0x90, 0x82,
	0x8c, 0x94, 0x90, 0x45, 0x4d, 0x59, 0xac, 0xc7, 0xfb, 0x6b, 0xca, 0x5a, 0x5d, 0x42, 0xe2, 0x3b,
	0x68, 0xb6, 0xf8, 0x1d, 0x47, 0xb6, 0xa3, 0xde, 0xcb, 0xaa, 0xd6, 0x65, 0xad, 0x3e, 0x4b, 0xba,
	0x01, 0xa4, 0x57, 0xc7, 0xba, 0xff, 0xfc, 0xc5, 0xd2, 0xb9, 0x2f, 0x5f, 0x2c, 0x9d, 0xfb, 0xea,
	0xc5, 0xd2, 0xb9, 0x5f, 0x1f, 0x2f, 0x19, 0xcf, 0x8f, 0x97, 0x8c, 0x2f, 0x8f, 0x97, 0x8c, 0xaf,
	0x8e, 0x97, 0x8c, 0x7f, 0x1d, 0x2f, 0x19, 0x5f, 0xfc, 0x7b, 0xe9, 0xdc, 0x2f, 0x57, 0x87, 0xfd,
	0xef, 0x81, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x6a, 0xbe, 0x5a, 0x40, 0x68, 0x20, 0x00, 0x00,
}

func (m *DefaultPreemptionArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefaultPreemptionArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultPreemptionArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.MinCandidateRunnersAbsolute))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGenerated(dAtA, i, uint64(m.MinCandidateRunnersPercentage))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Extender) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Extender) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Extender) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Ignorable {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x60
	if len(m.ManagedResources) > 0 {
		for iNdEx := len(m.ManagedResources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ManagedResources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	i--
	if m.RunnerCacheCapable {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x50
	{
		size, err := m.HTTPTimeout.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.TLSConfig != nil {
		{
			size, err := m.TLSConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	i--
	if m.EnableHTTPS {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x38
	i -= len(m.BindVerb)
	copy(dAtA[i:], m.BindVerb)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.BindVerb)))
	i--
	dAtA[i] = 0x32
	i = encodeVarintGenerated(dAtA, i, uint64(m.Weight))
	i--
	dAtA[i] = 0x28
	i -= len(m.PrioritizeVerb)
	copy(dAtA[i:], m.PrioritizeVerb)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PrioritizeVerb)))
	i--
	dAtA[i] = 0x22
	i -= len(m.PreemptVerb)
	copy(dAtA[i:], m.PreemptVerb)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PreemptVerb)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.FilterVerb)
	copy(dAtA[i:], m.FilterVerb)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FilterVerb)))
	i--
	dAtA[i] = 0x12
	i -= len(m.URLPrefix)
	copy(dAtA[i:], m.URLPrefix)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.URLPrefix)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ExtenderManagedResource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtenderManagedResource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtenderManagedResource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.IgnoredByScheduler {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ExtenderTLSConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtenderTLSConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtenderTLSConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CAData != nil {
		i -= len(m.CAData)
		copy(dAtA[i:], m.CAData)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.CAData)))
		i--
		dAtA[i] = 0x42
	}
	if m.KeyData != nil {
		i -= len(m.KeyData)
		copy(dAtA[i:], m.KeyData)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.KeyData)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CertData != nil {
		i -= len(m.CertData)
		copy(dAtA[i:], m.CertData)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.CertData)))
		i--
		dAtA[i] = 0x32
	}
	i -= len(m.CAFile)
	copy(dAtA[i:], m.CAFile)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CAFile)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.KeyFile)
	copy(dAtA[i:], m.KeyFile)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.KeyFile)))
	i--
	dAtA[i] = 0x22
	i -= len(m.CertFile)
	copy(dAtA[i:], m.CertFile)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CertFile)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.ServerName)
	copy(dAtA[i:], m.ServerName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ServerName)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Insecure {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *InterRegionAffinityArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterRegionAffinityArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterRegionAffinityArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.IgnorePreferredTermsOfExistingRegions {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i = encodeVarintGenerated(dAtA, i, uint64(m.HardRegionAffinityWeight))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Plugin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Plugin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Plugin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.Weight))
	i--
	dAtA[i] = 0x10
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PluginConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PluginConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PluginConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Args.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PluginSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PluginSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PluginSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Disabled) > 0 {
		for iNdEx := len(m.Disabled) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Disabled[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Enabled) > 0 {
		for iNdEx := len(m.Enabled) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Enabled[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Plugins) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Plugins) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Plugins) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MultiPoint.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size, err := m.PostBind.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size, err := m.Bind.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size, err := m.PreBind.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size, err := m.Permit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.Reserve.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.Score.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.PreScore.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.PostFilter.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.PreFilter.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.QueueSort.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.PreEnqueue.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RegionTopologySpreadArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionTopologySpreadArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegionTopologySpreadArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.DefaultingType)
	copy(dAtA[i:], m.DefaultingType)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DefaultingType)))
	i--
	dAtA[i] = 0x12
	if len(m.DefaultConstraints) > 0 {
		for iNdEx := len(m.DefaultConstraints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DefaultConstraints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestedToCapacityRatioParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestedToCapacityRatioParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestedToCapacityRatioParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Shape) > 0 {
		for iNdEx := len(m.Shape) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shape[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResourceSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.Weight))
	i--
	dAtA[i] = 0x10
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RunnerAffinityArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunnerAffinityArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunnerAffinityArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddedAffinity != nil {
		{
			size, err := m.AddedAffinity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RunnerResourcesBalancedAllocationArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunnerResourcesBalancedAllocationArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunnerResourcesBalancedAllocationArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Resources) > 0 {
		for iNdEx := len(m.Resources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Resources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RunnerResourcesFitArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunnerResourcesFitArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RunnerResourcesFitArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScoringStrategy != nil {
		{
			size, err := m.ScoringStrategy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IgnoredResourceGroups) > 0 {
		for iNdEx := len(m.IgnoredResourceGroups) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IgnoredResourceGroups[iNdEx])
			copy(dAtA[i:], m.IgnoredResourceGroups[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.IgnoredResourceGroups[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.IgnoredResources) > 0 {
		for iNdEx := len(m.IgnoredResources) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IgnoredResources[iNdEx])
			copy(dAtA[i:], m.IgnoredResources[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.IgnoredResources[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SchedulerConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchedulerConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchedulerConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.DelayCacheUntilActive {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x50
	if len(m.Extenders) > 0 {
		for iNdEx := len(m.Extenders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Extenders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Profiles) > 0 {
		for iNdEx := len(m.Profiles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Profiles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.RegionMaxBackoffSeconds))
	i--
	dAtA[i] = 0x38
	i = encodeVarintGenerated(dAtA, i, uint64(m.RegionInitialBackoffSeconds))
	i--
	dAtA[i] = 0x30
	i = encodeVarintGenerated(dAtA, i, uint64(m.PercentageOfRunnersToScore))
	i--
	dAtA[i] = 0x28
	{
		size, err := m.DebuggingConfiguration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.ClientConnection.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.LeaderElection.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	i = encodeVarintGenerated(dAtA, i, uint64(m.Parallelism))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *SchedulerProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchedulerProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchedulerProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PluginConfig) > 0 {
		for iNdEx := len(m.PluginConfig) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PluginConfig[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Plugins != nil {
		{
			size, err := m.Plugins.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.PercentageOfRunnersToScore))
	i--
	dAtA[i] = 0x10
	i -= len(m.SchedulerName)
	copy(dAtA[i:], m.SchedulerName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SchedulerName)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ScoringStrategy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScoringStrategy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScoringStrategy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestedToCapacityRatio != nil {
		{
			size, err := m.RequestedToCapacityRatio.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Resources) > 0 {
		for iNdEx := len(m.Resources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Resources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UtilizationShapePoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UtilizationShapePoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UtilizationShapePoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.Score))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGenerated(dAtA, i, uint64(m.Utilization))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *VolumeBindingArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VolumeBindingArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VolumeBindingArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Shape) > 0 {
		for iNdEx := len(m.Shape) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shape[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BindTimeoutSeconds != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.BindTimeoutSeconds))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClientConnectionConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientConnectionConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientConnectionConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.Burst))
	i--
	dAtA[i] = 0x28
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.QPS))))
	i--
	dAtA[i] = 0x25
	i -= len(m.ContentType)
	copy(dAtA[i:], m.ContentType)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ContentType)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.AcceptContentTypes)
	copy(dAtA[i:], m.AcceptContentTypes)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AcceptContentTypes)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Kubeconfig)
	copy(dAtA[i:], m.Kubeconfig)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Kubeconfig)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DebuggingConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebuggingConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DebuggingConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.EnableContentionProfiling {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i--
	if m.EnableProfiling {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *LeaderElectionConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaderElectionConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaderElectionConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.ResourceNamespace)
	copy(dAtA[i:], m.ResourceNamespace)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ResourceNamespace)))
	i--
	dAtA[i] = 0x3a
	i -= len(m.ResourceName)
	copy(dAtA[i:], m.ResourceName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ResourceName)))
	i--
	dAtA[i] = 0x32
	i -= len(m.ResourceLock)
	copy(dAtA[i:], m.ResourceLock)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ResourceLock)))
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.RetryPeriod.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.RenewDeadline.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.LeaseDuration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	i--
	if m.LeaderElect {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenerated(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DefaultPreemptionArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.MinCandidateRunnersPercentage))
	n += 1 + sovGenerated(uint64(m.MinCandidateRunnersAbsolute))
	return n
}

func (m *Extender) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.URLPrefix)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.FilterVerb)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.PreemptVerb)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.PrioritizeVerb)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.Weight))
	l = len(m.BindVerb)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	if m.TLSConfig != nil {
		l = m.TLSConfig.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = m.HTTPTimeout.Size()
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	if len(m.ManagedResources) > 0 {
		for _, e := range m.ManagedResources {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	n += 2
	return n
}

func (m *ExtenderManagedResource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	return n
}

func (m *ExtenderTLSConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.ServerName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.CertFile)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.KeyFile)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.CAFile)
	n += 1 + l + sovGenerated(uint64(l))
	if m.CertData != nil {
		l = len(m.CertData)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.KeyData != nil {
		l = len(m.KeyData)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.CAData != nil {
		l = len(m.CAData)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *InterRegionAffinityArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.HardRegionAffinityWeight))
	n += 2
	return n
}

func (m *Plugin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.Weight))
	return n
}

func (m *PluginConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Args.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *PluginSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Enabled) > 0 {
		for _, e := range m.Enabled {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Disabled) > 0 {
		for _, e := range m.Disabled {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *Plugins) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PreEnqueue.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.QueueSort.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.PreFilter.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Filter.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.PostFilter.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.PreScore.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Score.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Reserve.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Permit.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.PreBind.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Bind.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.PostBind.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.MultiPoint.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *RegionTopologySpreadArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DefaultConstraints) > 0 {
		for _, e := range m.DefaultConstraints {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.DefaultingType)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *RequestedToCapacityRatioParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Shape) > 0 {
		for _, e := range m.Shape {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ResourceSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.Weight))
	return n
}

func (m *RunnerAffinityArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddedAffinity != nil {
		l = m.AddedAffinity.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *RunnerResourcesBalancedAllocationArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Resources) > 0 {
		for _, e := range m.Resources {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *RunnerResourcesFitArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IgnoredResources) > 0 {
		for _, s := range m.IgnoredResources {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.IgnoredResourceGroups) > 0 {
		for _, s := range m.IgnoredResourceGroups {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.ScoringStrategy != nil {
		l = m.ScoringStrategy.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *SchedulerConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.Parallelism))
	l = m.LeaderElection.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ClientConnection.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.DebuggingConfiguration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.PercentageOfRunnersToScore))
	n += 1 + sovGenerated(uint64(m.RegionInitialBackoffSeconds))
	n += 1 + sovGenerated(uint64(m.RegionMaxBackoffSeconds))
	if len(m.Profiles) > 0 {
		for _, e := range m.Profiles {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Extenders) > 0 {
		for _, e := range m.Extenders {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	n += 2
	return n
}

func (m *SchedulerProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SchedulerName)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.PercentageOfRunnersToScore))
	if m.Plugins != nil {
		l = m.Plugins.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.PluginConfig) > 0 {
		for _, e := range m.PluginConfig {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ScoringStrategy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Resources) > 0 {
		for _, e := range m.Resources {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.RequestedToCapacityRatio != nil {
		l = m.RequestedToCapacityRatio.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *UtilizationShapePoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.Utilization))
	n += 1 + sovGenerated(uint64(m.Score))
	return n
}

func (m *VolumeBindingArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BindTimeoutSeconds != nil {
		n += 1 + sovGenerated(uint64(*m.BindTimeoutSeconds))
	}
	if len(m.Shape) > 0 {
		for _, e := range m.Shape {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ClientConnectionConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Kubeconfig)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.AcceptContentTypes)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ContentType)
	n += 1 + l + sovGenerated(uint64(l))
	n += 5
	n += 1 + sovGenerated(uint64(m.Burst))
	return n
}

func (m *DebuggingConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	n += 2
	return n
}

func (m *LeaderElectionConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = m.LeaseDuration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.RenewDeadline.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.RetryPeriod.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ResourceLock)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ResourceName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ResourceNamespace)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func sovGenerated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DefaultPreemptionArgs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DefaultPreemptionArgs{`,
		`MinCandidateRunnersPercentage:` + fmt.Sprintf("%v", this.MinCandidateRunnersPercentage) + `,`,
		`MinCandidateRunnersAbsolute:` + fmt.Sprintf("%v", this.MinCandidateRunnersAbsolute) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Extender) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForManagedResources := "[]ExtenderManagedResource{"
	for _, f := range this.ManagedResources {
		repeatedStringForManagedResources += strings.Replace(strings.Replace(f.String(), "ExtenderManagedResource", "ExtenderManagedResource", 1), `&`, ``, 1) + ","
	}
	repeatedStringForManagedResources += "}"
	s := strings.Join([]string{`&Extender{`,
		`URLPrefix:` + fmt.Sprintf("%v", this.URLPrefix) + `,`,
		`FilterVerb:` + fmt.Sprintf("%v", this.FilterVerb) + `,`,
		`PreemptVerb:` + fmt.Sprintf("%v", this.PreemptVerb) + `,`,
		`PrioritizeVerb:` + fmt.Sprintf("%v", this.PrioritizeVerb) + `,`,
		`Weight:` + fmt.Sprintf("%v", this.Weight) + `,`,
		`BindVerb:` + fmt.Sprintf("%v", this.BindVerb) + `,`,
		`EnableHTTPS:` + fmt.Sprintf("%v", this.EnableHTTPS) + `,`,
		`TLSConfig:` + strings.Replace(this.TLSConfig.String(), "ExtenderTLSConfig", "ExtenderTLSConfig", 1) + `,`,
		`HTTPTimeout:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.HTTPTimeout), "Duration", "v1.Duration", 1), `&`, ``, 1) + `,`,
		`RunnerCacheCapable:` + fmt.Sprintf("%v", this.RunnerCacheCapable) + `,`,
		`ManagedResources:` + repeatedStringForManagedResources + `,`,
		`Ignorable:` + fmt.Sprintf("%v", this.Ignorable) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExtenderManagedResource) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExtenderManagedResource{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`IgnoredByScheduler:` + fmt.Sprintf("%v", this.IgnoredByScheduler) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExtenderTLSConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExtenderTLSConfig{`,
		`Insecure:` + fmt.Sprintf("%v", this.Insecure) + `,`,
		`ServerName:` + fmt.Sprintf("%v", this.ServerName) + `,`,
		`CertFile:` + fmt.Sprintf("%v", this.CertFile) + `,`,
		`KeyFile:` + fmt.Sprintf("%v", this.KeyFile) + `,`,
		`CAFile:` + fmt.Sprintf("%v", this.CAFile) + `,`,
		`CertData:` + valueToStringGenerated(this.CertData) + `,`,
		`KeyData:` + valueToStringGenerated(this.KeyData) + `,`,
		`CAData:` + valueToStringGenerated(this.CAData) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InterRegionAffinityArgs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InterRegionAffinityArgs{`,
		`HardRegionAffinityWeight:` + fmt.Sprintf("%v", this.HardRegionAffinityWeight) + `,`,
		`IgnorePreferredTermsOfExistingRegions:` + fmt.Sprintf("%v", this.IgnorePreferredTermsOfExistingRegions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Plugin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Plugin{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Weight:` + fmt.Sprintf("%v", this.Weight) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PluginConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PluginConfig{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Args:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Args), "RawExtension", "runtime.RawExtension", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PluginSet) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEnabled := "[]Plugin{"
	for _, f := range this.Enabled {
		repeatedStringForEnabled += strings.Replace(strings.Replace(f.String(), "Plugin", "Plugin", 1), `&`, ``, 1) + ","
	}
	repeatedStringForEnabled += "}"
	repeatedStringForDisabled := "[]Plugin{"
	for _, f := range this.Disabled {
		repeatedStringForDisabled += strings.Replace(strings.Replace(f.String(), "Plugin", "Plugin", 1), `&`, ``, 1) + ","
	}
	repeatedStringForDisabled += "}"
	s := strings.Join([]string{`&PluginSet{`,
		`Enabled:` + repeatedStringForEnabled + `,`,
		`Disabled:` + repeatedStringForDisabled + `,`,
		`}`,
	}, "")
	return s
}
func (this *Plugins) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Plugins{`,
		`PreEnqueue:` + strings.Replace(strings.Replace(this.PreEnqueue.String(), "PluginSet", "PluginSet", 1), `&`, ``, 1) + `,`,
		`QueueSort:` + strings.Replace(strings.Replace(this.QueueSort.String(), "PluginSet", "PluginSet", 1), `&`, ``, 1) + `,`,
		`PreFilter:` + strings.Replace(strings.Replace(this.PreFilter.String(), "PluginSet", "PluginSet", 1), `&`, ``, 1) + `,`,
		`Filter:` + strings.Replace(strings.Replace(this.Filter.String(), "PluginSet", "PluginSet", 1), `&`, ``, 1) + `,`,
		`PostFilter:` + strings.Replace(strings.Replace(this.PostFilter.String(), "PluginSet", "PluginSet", 1), `&`, ``, 1) + `,`,
		`PreScore:` + strings.Replace(strings.Replace(this.PreScore.String(), "PluginSet", "PluginSet", 1), `&`, ``, 1) + `,`,
		`Score:` + strings.Replace(strings.Replace(this.Score.String(), "PluginSet", "PluginSet", 1), `&`, ``, 1) + `,`,
		`Reserve:` + strings.Replace(strings.Replace(this.Reserve.String(), "PluginSet", "PluginSet", 1), `&`, ``, 1) + `,`,
		`Permit:` + strings.Replace(strings.Replace(this.Permit.String(), "PluginSet", "PluginSet", 1), `&`, ``, 1) + `,`,
		`PreBind:` + strings.Replace(strings.Replace(this.PreBind.String(), "PluginSet", "PluginSet", 1), `&`, ``, 1) + `,`,
		`Bind:` + strings.Replace(strings.Replace(this.Bind.String(), "PluginSet", "PluginSet", 1), `&`, ``, 1) + `,`,
		`PostBind:` + strings.Replace(strings.Replace(this.PostBind.String(), "PluginSet", "PluginSet", 1), `&`, ``, 1) + `,`,
		`MultiPoint:` + strings.Replace(strings.Replace(this.MultiPoint.String(), "PluginSet", "PluginSet", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegionTopologySpreadArgs) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDefaultConstraints := "[]TopologySpreadConstraint{"
	for _, f := range this.DefaultConstraints {
		repeatedStringForDefaultConstraints += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForDefaultConstraints += "}"
	s := strings.Join([]string{`&RegionTopologySpreadArgs{`,
		`DefaultConstraints:` + repeatedStringForDefaultConstraints + `,`,
		`DefaultingType:` + fmt.Sprintf("%v", this.DefaultingType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestedToCapacityRatioParam) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForShape := "[]UtilizationShapePoint{"
	for _, f := range this.Shape {
		repeatedStringForShape += strings.Replace(strings.Replace(f.String(), "UtilizationShapePoint", "UtilizationShapePoint", 1), `&`, ``, 1) + ","
	}
	repeatedStringForShape += "}"
	s := strings.Join([]string{`&RequestedToCapacityRatioParam{`,
		`Shape:` + repeatedStringForShape + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResourceSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResourceSpec{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Weight:` + fmt.Sprintf("%v", this.Weight) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RunnerAffinityArgs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RunnerAffinityArgs{`,
		`AddedAffinity:` + strings.Replace(fmt.Sprintf("%v", this.AddedAffinity), "RunnerAffinity", "v11.RunnerAffinity", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RunnerResourcesBalancedAllocationArgs) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForResources := "[]ResourceSpec{"
	for _, f := range this.Resources {
		repeatedStringForResources += strings.Replace(strings.Replace(f.String(), "ResourceSpec", "ResourceSpec", 1), `&`, ``, 1) + ","
	}
	repeatedStringForResources += "}"
	s := strings.Join([]string{`&RunnerResourcesBalancedAllocationArgs{`,
		`Resources:` + repeatedStringForResources + `,`,
		`}`,
	}, "")
	return s
}
func (this *RunnerResourcesFitArgs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RunnerResourcesFitArgs{`,
		`IgnoredResources:` + fmt.Sprintf("%v", this.IgnoredResources) + `,`,
		`IgnoredResourceGroups:` + fmt.Sprintf("%v", this.IgnoredResourceGroups) + `,`,
		`ScoringStrategy:` + strings.Replace(this.ScoringStrategy.String(), "ScoringStrategy", "ScoringStrategy", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SchedulerConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForProfiles := "[]SchedulerProfile{"
	for _, f := range this.Profiles {
		repeatedStringForProfiles += strings.Replace(strings.Replace(f.String(), "SchedulerProfile", "SchedulerProfile", 1), `&`, ``, 1) + ","
	}
	repeatedStringForProfiles += "}"
	repeatedStringForExtenders := "[]Extender{"
	for _, f := range this.Extenders {
		repeatedStringForExtenders += strings.Replace(strings.Replace(f.String(), "Extender", "Extender", 1), `&`, ``, 1) + ","
	}
	repeatedStringForExtenders += "}"
	s := strings.Join([]string{`&SchedulerConfiguration{`,
		`Parallelism:` + fmt.Sprintf("%v", this.Parallelism) + `,`,
		`LeaderElection:` + strings.Replace(strings.Replace(this.LeaderElection.String(), "LeaderElectionConfiguration", "LeaderElectionConfiguration", 1), `&`, ``, 1) + `,`,
		`ClientConnection:` + strings.Replace(strings.Replace(this.ClientConnection.String(), "ClientConnectionConfiguration", "ClientConnectionConfiguration", 1), `&`, ``, 1) + `,`,
		`DebuggingConfiguration:` + strings.Replace(strings.Replace(this.DebuggingConfiguration.String(), "DebuggingConfiguration", "DebuggingConfiguration", 1), `&`, ``, 1) + `,`,
		`PercentageOfRunnersToScore:` + fmt.Sprintf("%v", this.PercentageOfRunnersToScore) + `,`,
		`RegionInitialBackoffSeconds:` + fmt.Sprintf("%v", this.RegionInitialBackoffSeconds) + `,`,
		`RegionMaxBackoffSeconds:` + fmt.Sprintf("%v", this.RegionMaxBackoffSeconds) + `,`,
		`Profiles:` + repeatedStringForProfiles + `,`,
		`Extenders:` + repeatedStringForExtenders + `,`,
		`DelayCacheUntilActive:` + fmt.Sprintf("%v", this.DelayCacheUntilActive) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SchedulerProfile) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPluginConfig := "[]PluginConfig{"
	for _, f := range this.PluginConfig {
		repeatedStringForPluginConfig += strings.Replace(strings.Replace(f.String(), "PluginConfig", "PluginConfig", 1), `&`, ``, 1) + ","
	}
	repeatedStringForPluginConfig += "}"
	s := strings.Join([]string{`&SchedulerProfile{`,
		`SchedulerName:` + fmt.Sprintf("%v", this.SchedulerName) + `,`,
		`PercentageOfRunnersToScore:` + fmt.Sprintf("%v", this.PercentageOfRunnersToScore) + `,`,
		`Plugins:` + strings.Replace(this.Plugins.String(), "Plugins", "Plugins", 1) + `,`,
		`PluginConfig:` + repeatedStringForPluginConfig + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScoringStrategy) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForResources := "[]ResourceSpec{"
	for _, f := range this.Resources {
		repeatedStringForResources += strings.Replace(strings.Replace(f.String(), "ResourceSpec", "ResourceSpec", 1), `&`, ``, 1) + ","
	}
	repeatedStringForResources += "}"
	s := strings.Join([]string{`&ScoringStrategy{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Resources:` + repeatedStringForResources + `,`,
		`RequestedToCapacityRatio:` + strings.Replace(this.RequestedToCapacityRatio.String(), "RequestedToCapacityRatioParam", "RequestedToCapacityRatioParam", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UtilizationShapePoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UtilizationShapePoint{`,
		`Utilization:` + fmt.Sprintf("%v", this.Utilization) + `,`,
		`Score:` + fmt.Sprintf("%v", this.Score) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VolumeBindingArgs) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForShape := "[]UtilizationShapePoint{"
	for _, f := range this.Shape {
		repeatedStringForShape += strings.Replace(strings.Replace(f.String(), "UtilizationShapePoint", "UtilizationShapePoint", 1), `&`, ``, 1) + ","
	}
	repeatedStringForShape += "}"
	s := strings.Join([]string{`&VolumeBindingArgs{`,
		`BindTimeoutSeconds:` + valueToStringGenerated(this.BindTimeoutSeconds) + `,`,
		`Shape:` + repeatedStringForShape + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientConnectionConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientConnectionConfiguration{`,
		`Kubeconfig:` + fmt.Sprintf("%v", this.Kubeconfig) + `,`,
		`AcceptContentTypes:` + fmt.Sprintf("%v", this.AcceptContentTypes) + `,`,
		`ContentType:` + fmt.Sprintf("%v", this.ContentType) + `,`,
		`QPS:` + fmt.Sprintf("%v", this.QPS) + `,`,
		`Burst:` + fmt.Sprintf("%v", this.Burst) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DebuggingConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DebuggingConfiguration{`,
		`EnableProfiling:` + fmt.Sprintf("%v", this.EnableProfiling) + `,`,
		`EnableContentionProfiling:` + fmt.Sprintf("%v", this.EnableContentionProfiling) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LeaderElectionConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LeaderElectionConfiguration{`,
		`LeaderElect:` + fmt.Sprintf("%v", this.LeaderElect) + `,`,
		`LeaseDuration:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.LeaseDuration), "Duration", "v1.Duration", 1), `&`, ``, 1) + `,`,
		`RenewDeadline:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.RenewDeadline), "Duration", "v1.Duration", 1), `&`, ``, 1) + `,`,
		`RetryPeriod:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.RetryPeriod), "Duration", "v1.Duration", 1), `&`, ``, 1) + `,`,
		`ResourceLock:` + fmt.Sprintf("%v", this.ResourceLock) + `,`,
		`ResourceName:` + fmt.Sprintf("%v", this.ResourceName) + `,`,
		`ResourceNamespace:` + fmt.Sprintf("%v", this.ResourceNamespace) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenerated(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DefaultPreemptionArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefaultPreemptionArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefaultPreemptionArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCandidateRunnersPercentage", wireType)
			}
			m.MinCandidateRunnersPercentage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinCandidateRunnersPercentage |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCandidateRunnersAbsolute", wireType)
			}
			m.MinCandidateRunnersAbsolute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinCandidateRunnersAbsolute |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Extender) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Extender: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Extender: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URLPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URLPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterVerb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilterVerb = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreemptVerb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreemptVerb = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrioritizeVerb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrioritizeVerb = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindVerb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BindVerb = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableHTTPS", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableHTTPS = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TLSConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TLSConfig == nil {
				m.TLSConfig = &ExtenderTLSConfig{}
			}
			if err := m.TLSConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HTTPTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HTTPTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunnerCacheCapable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RunnerCacheCapable = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagedResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagedResources = append(m.ManagedResources, ExtenderManagedResource{})
			if err := m.ManagedResources[len(m.ManagedResources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ignorable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ignorable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtenderManagedResource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtenderManagedResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtenderManagedResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnoredByScheduler", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IgnoredByScheduler = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtenderTLSConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtenderTLSConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtenderTLSConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Insecure", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Insecure = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CAFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CAFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertData = append(m.CertData[:0], dAtA[iNdEx:postIndex]...)
			if m.CertData == nil {
				m.CertData = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyData = append(m.KeyData[:0], dAtA[iNdEx:postIndex]...)
			if m.KeyData == nil {
				m.KeyData = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CAData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CAData = append(m.CAData[:0], dAtA[iNdEx:postIndex]...)
			if m.CAData == nil {
				m.CAData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterRegionAffinityArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterRegionAffinityArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterRegionAffinityArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardRegionAffinityWeight", wireType)
			}
			m.HardRegionAffinityWeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HardRegionAffinityWeight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnorePreferredTermsOfExistingRegions", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IgnorePreferredTermsOfExistingRegions = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Plugin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Plugin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Plugin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PluginConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PluginConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PluginConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Args.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PluginSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PluginSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PluginSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Enabled = append(m.Enabled, Plugin{})
			if err := m.Enabled[len(m.Enabled)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Disabled = append(m.Disabled, Plugin{})
			if err := m.Disabled[len(m.Disabled)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Plugins) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Plugins: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Plugins: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreEnqueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PreEnqueue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueSort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.QueueSort.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PreFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PostFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreScore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PreScore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Score.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reserve.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Permit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreBind", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PreBind.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bind", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bind.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostBind", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PostBind.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiPoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MultiPoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionTopologySpreadArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionTopologySpreadArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionTopologySpreadArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultConstraints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultConstraints = append(m.DefaultConstraints, v11.TopologySpreadConstraint{})
			if err := m.DefaultConstraints[len(m.DefaultConstraints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultingType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultingType = RegionTopologySpreadConstraintsDefaulting(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestedToCapacityRatioParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestedToCapacityRatioParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestedToCapacityRatioParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shape = append(m.Shape, UtilizationShapePoint{})
			if err := m.Shape[len(m.Shape)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunnerAffinityArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunnerAffinityArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunnerAffinityArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedAffinity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddedAffinity == nil {
				m.AddedAffinity = &v11.RunnerAffinity{}
			}
			if err := m.AddedAffinity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunnerResourcesBalancedAllocationArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunnerResourcesBalancedAllocationArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunnerResourcesBalancedAllocationArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resources = append(m.Resources, ResourceSpec{})
			if err := m.Resources[len(m.Resources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunnerResourcesFitArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunnerResourcesFitArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunnerResourcesFitArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnoredResources", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IgnoredResources = append(m.IgnoredResources, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnoredResourceGroups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IgnoredResourceGroups = append(m.IgnoredResourceGroups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoringStrategy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScoringStrategy == nil {
				m.ScoringStrategy = &ScoringStrategy{}
			}
			if err := m.ScoringStrategy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchedulerConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchedulerConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchedulerConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parallelism", wireType)
			}
			m.Parallelism = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Parallelism |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderElection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LeaderElection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientConnection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClientConnection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebuggingConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DebuggingConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PercentageOfRunnersToScore", wireType)
			}
			m.PercentageOfRunnersToScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PercentageOfRunnersToScore |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionInitialBackoffSeconds", wireType)
			}
			m.RegionInitialBackoffSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionInitialBackoffSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionMaxBackoffSeconds", wireType)
			}
			m.RegionMaxBackoffSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionMaxBackoffSeconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profiles = append(m.Profiles, SchedulerProfile{})
			if err := m.Profiles[len(m.Profiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extenders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extenders = append(m.Extenders, Extender{})
			if err := m.Extenders[len(m.Extenders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayCacheUntilActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DelayCacheUntilActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchedulerProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchedulerProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchedulerProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchedulerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PercentageOfRunnersToScore", wireType)
			}
			m.PercentageOfRunnersToScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PercentageOfRunnersToScore |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plugins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Plugins == nil {
				m.Plugins = &Plugins{}
			}
			if err := m.Plugins.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PluginConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PluginConfig = append(m.PluginConfig, PluginConfig{})
			if err := m.PluginConfig[len(m.PluginConfig)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScoringStrategy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScoringStrategy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScoringStrategy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = ScoringStrategyType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resources = append(m.Resources, ResourceSpec{})
			if err := m.Resources[len(m.Resources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedToCapacityRatio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestedToCapacityRatio == nil {
				m.RequestedToCapacityRatio = &RequestedToCapacityRatioParam{}
			}
			if err := m.RequestedToCapacityRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UtilizationShapePoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UtilizationShapePoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UtilizationShapePoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Utilization", wireType)
			}
			m.Utilization = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Utilization |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VolumeBindingArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VolumeBindingArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VolumeBindingArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindTimeoutSeconds", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BindTimeoutSeconds = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shape = append(m.Shape, UtilizationShapePoint{})
			if err := m.Shape[len(m.Shape)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientConnectionConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientConnectionConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientConnectionConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kubeconfig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kubeconfig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptContentTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptContentTypes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field QPS", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.QPS = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Burst", wireType)
			}
			m.Burst = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Burst |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebuggingConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebuggingConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebuggingConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableProfiling", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableProfiling = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableContentionProfiling", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableContentionProfiling = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaderElectionConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaderElectionConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaderElectionConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderElect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LeaderElect = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LeaseDuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenewDeadline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RenewDeadline.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RetryPeriod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceLock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceLock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenerated
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenerated
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenerated        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenerated = fmt.Errorf("proto: unexpected end of group")
)
