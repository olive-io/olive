/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/olive-io/olive/apis/config/v1/generated.proto

package v1

import (
	fmt "fmt"

	io "io"

	proto "github.com/gogo/protobuf/proto"

	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func (m *EtcdCluster) Reset()      { *m = EtcdCluster{} }
func (*EtcdCluster) ProtoMessage() {}
func (*EtcdCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf86ed98d981db4e, []int{0}
}
func (m *EtcdCluster) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EtcdCluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EtcdCluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EtcdCluster.Merge(m, src)
}
func (m *EtcdCluster) XXX_Size() int {
	return m.Size()
}
func (m *EtcdCluster) XXX_DiscardUnknown() {
	xxx_messageInfo_EtcdCluster.DiscardUnknown(m)
}

var xxx_messageInfo_EtcdCluster proto.InternalMessageInfo

func init() {
	proto.RegisterType((*EtcdCluster)(nil), "github.com.olive_io.olive.apis.config.v1.EtcdCluster")
}

func init() {
	proto.RegisterFile("github.com/olive-io/olive/apis/config/v1/generated.proto", fileDescriptor_bf86ed98d981db4e)
}

var fileDescriptor_bf86ed98d981db4e = []byte{
	// 327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0x33, 0x7f, 0xf9, 0x29, 0x89, 0x48, 0x21, 0x1b, 0x4b, 0x17, 0xd3, 0xe2, 0x2a, 0x22,
	0x9d, 0xa1, 0x20, 0xd2, 0xad, 0x91, 0x2e, 0x75, 0x11, 0x74, 0xe3, 0x46, 0xa6, 0xe9, 0x34, 0x1d,
	0xda, 0xcc, 0x0d, 0x93, 0x49, 0xb1, 0x3b, 0x1f, 0xc1, 0xc7, 0xf0, 0x51, 0xba, 0xec, 0xb2, 0xab,
	0x62, 0xc7, 0x17, 0x91, 0x64, 0x2c, 0xd5, 0xa2, 0xe0, 0xee, 0xdc, 0x7b, 0xe6, 0x3b, 0xf7, 0xc0,
	0x78, 0xfd, 0x44, 0xe8, 0x49, 0x31, 0x24, 0x31, 0xa4, 0x14, 0x66, 0x62, 0xce, 0xbb, 0x02, 0xac,
	0xa0, 0x2c, 0x13, 0x39, 0x8d, 0x41, 0x8e, 0x45, 0x42, 0xe7, 0x3d, 0x9a, 0x70, 0xc9, 0x15, 0xd3,
	0x7c, 0x44, 0x32, 0x05, 0x1a, 0xfc, 0x60, 0x4f, 0x92, 0x0a, 0x78, 0x14, 0x60, 0x05, 0x29, 0x49,
	0x62, 0x49, 0x32, 0xef, 0xb5, 0xba, 0x5f, 0x6e, 0x24, 0x90, 0x00, 0xad, 0x02, 0x86, 0xc5, 0xb8,
	0x9a, 0xaa, 0xa1, 0x52, 0x36, 0xb8, 0x75, 0x31, 0xed, 0xe7, 0x44, 0x40, 0x79, 0x3f, 0x65, 0xf1,
	0x44, 0x48, 0xae, 0x16, 0x34, 0x9b, 0x26, 0xb6, 0x50, 0xca, 0x35, 0xfb, 0xa1, 0x4e, 0xeb, 0xf2,
	0x37, 0x4a, 0x15, 0x52, 0x8b, 0x94, 0xd3, 0x3c, 0x9e, 0xf0, 0x94, 0x1d, 0x72, 0xa7, 0xaf, 0xc8,
	0x3b, 0x1a, 0xe8, 0x78, 0x74, 0x3d, 0x2b, 0x72, 0xcd, 0x95, 0x7f, 0xee, 0xb9, 0x5c, 0x8e, 0x32,
	0x10, 0x52, 0xe7, 0x4d, 0xd4, 0xa9, 0x05, 0x6e, 0x78, 0x6c, 0x36, 0x6d, 0x77, 0xb0, 0x5b, 0x46,
	0x7b, 0xdf, 0x3f, 0xf3, 0xea, 0x65, 0x36, 0x14, 0xba, 0xf9, 0xaf, 0x83, 0x02, 0x37, 0x6c, 0x2c,
	0x37, 0x6d, 0xc7, 0x6c, 0xda, 0xf5, 0x3b, 0xbb, 0x8e, 0x76, 0xbe, 0x7f, 0xe5, 0x35, 0x52, 0xf6,
	0x74, 0x2f, 0x99, 0x5a, 0x44, 0x5c, 0x2b, 0xc1, 0xf3, 0x66, 0xad, 0x83, 0x82, 0xff, 0xe1, 0xc9,
	0x27, 0xd2, 0xb8, 0xf9, 0x6e, 0x47, 0x87, 0xef, 0xc3, 0xdb, 0xe5, 0x16, 0x3b, 0xab, 0x2d, 0x76,
	0xd6, 0x5b, 0xec, 0x3c, 0x1b, 0x8c, 0x96, 0x06, 0xa3, 0x95, 0xc1, 0x68, 0x6d, 0x30, 0x7a, 0x33,
	0x18, 0xbd, 0xbc, 0x63, 0xe7, 0x21, 0xf8, 0xeb, 0x8f, 0x7e, 0x04, 0x00, 0x00, 0xff, 0xff, 0x50,
	0x2e, 0xe0, 0xec, 0xfc, 0x01, 0x00, 0x00,
}

func (m *EtcdCluster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EtcdCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EtcdCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.MaxUnaryRetries))
	i--
	dAtA[i] = 0x18
	i -= len(m.Timeout)
	copy(dAtA[i:], m.Timeout)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Timeout)))
	i--
	dAtA[i] = 0x12
	if len(m.Endpoints) > 0 {
		for iNdEx := len(m.Endpoints) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Endpoints[iNdEx])
			copy(dAtA[i:], m.Endpoints[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Endpoints[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenerated(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EtcdCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Endpoints) > 0 {
		for _, s := range m.Endpoints {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.Timeout)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.MaxUnaryRetries))
	return n
}

func sovGenerated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *EtcdCluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EtcdCluster{`,
		`Endpoints:` + fmt.Sprintf("%v", this.Endpoints) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`MaxUnaryRetries:` + fmt.Sprintf("%v", this.MaxUnaryRetries) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenerated(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *EtcdCluster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EtcdCluster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EtcdCluster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoints = append(m.Endpoints, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timeout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUnaryRetries", wireType)
			}
			m.MaxUnaryRetries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUnaryRetries |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenerated
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenerated
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenerated        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenerated = fmt.Errorf("proto: unexpected end of group")
)
