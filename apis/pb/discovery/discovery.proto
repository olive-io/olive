/*
   Copyright 2023 The olive Authors

   This program is offered under a commercial and under the AGPL license.
   For AGPL licensing, see below.

   AGPL licensing:
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Affero General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Affero General Public License for more details.

   You should have received a copy of the GNU Affero General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

syntax = "proto3";

package discoverypb;

option go_package = "github.com/olive-io/olive/apis/pb/discovery;discoverypb";

enum BoxType {
  string = 0;
  integer = 1;
  float = 2;
  boolean = 3;
  array = 4;
  object = 5;
  map = 6;
}

// Box is an opaque value for a request or response
message Box {
  BoxType type = 1;
  // Box Value by json.Marshal
  string data = 2;
  // the reference, points to OpenAPI Component when type is Object
  string ref = 3;
  map<string, Box> parameters = 4;
}

// Endpoint is a endpoint provided by a service
message Endpoint {
  string name = 1;

  Box request = 2;

  Box response = 3;

  map<string, string> metadata = 4;
}

// Event is registry event
message Event {
  // Event Id
  string id = 1;

  // type of event
  string type = 2;

  // unix timestamp of event
  int64 timestamp = 3;

  // service entry
  Service service = 4;
}

// Node represents the node the service is on
message Node {
  string id = 1;

  string address = 2;

  int64 port = 3;

  map<string, string> metadata = 4;
}

// Result is returns by the watcher
message Result {
  string action = 1;

  Service service = 2;

  Endpoint endpoint = 3;

  int64 timestamp = 4;
}

// Service represents a olive service
message Service {
  string name = 1;

  string version = 2;

  string namespace = 3;

  map<string, string> metadata = 4;

  repeated Endpoint endpoints = 5;

  repeated Node nodes = 6;

  int64 ttl = 7;
}

message Hook {
  string name = 1;
  string url = 2;
}

message GlobalConfig {

}