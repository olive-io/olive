/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.olive_io.olive.apis.core.v1;

import "github.com/olive-io/olive/apis/apidiscovery/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/olive-io/olive/apis/core/v1";

// Definition is bpmn definitions
message Definition {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional DefinitionSpec spec = 2;

  optional DefinitionStatus status = 3;
}

// DefinitionList is a list of Definition objects.
message DefinitionList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of Definition
  repeated Definition items = 2;
}

message DefinitionSpec {
  optional string content = 1;

  optional int64 version = 2;

  // the id of olive region
  optional int64 region = 3;
}

message DefinitionStatus {
  optional string phase = 1;
}

message FlowNodeStat {
  optional string id = 1;

  optional string name = 2;

  map<string, string> headers = 3;

  map<string, string> properties = 4;

  map<string, string> dataObjects = 5;

  optional int64 startTime = 6;

  optional int64 endTime = 7;
}

// Namespace provides a scope for Names.
// Use of multiple namespaces is optional
message Namespace {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Spec defines the behavior of the Namespace.
  // +optional
  optional NamespaceSpec spec = 2;

  // Status describes the current status of a Namespace
  // +optional
  optional NamespaceStatus status = 3;
}

// NamespaceCondition contains details about state of namespace.
message NamespaceCondition {
  // Type of namespace controller condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 3;

  // +optional
  optional string reason = 4;

  // +optional
  optional string message = 5;
}

// NamespaceList is a list of Namespaces.
message NamespaceList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Namespace items = 2;
}

// NamespaceSpec describes the attributes on a Namespace
message NamespaceSpec {
  // Finalizers is an opaque list of values that must be empty to permanently remove object from storage
  repeated string finalizers = 1;
}

// NamespaceStatus is information about the current status of a Namespace.
message NamespaceStatus {
  // Phase is the current lifecycle phase of the namespace.
  // +optional
  optional string phase = 1;

  // +optional
  repeated NamespaceCondition conditions = 2;
}

// Process is bpmn process instance
message Process {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ProcessSpec spec = 2;

  optional ProcessStatus status = 3;
}

// ProcessList is a list of Process objects.
message ProcessList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of Process
  repeated Process items = 2;
}

message ProcessRunningState {
  map<string, string> properties = 1;

  map<string, string> dataObjects = 2;

  map<string, string> variables = 3;
}

message ProcessSpec {
  // the id of Definition
  optional string definition = 1;

  // the version if Definition
  optional int64 version = 2;

  // the process id of bpmn Process Element in Definition
  optional string bpmnProcess = 3;

  map<string, string> headers = 4;

  map<string, github.com.olive_io.olive.apis.apidiscovery.v1.Box> properties = 5;

  map<string, string> dataObjects = 6;
}

// ProcessStat is stat information of Process
message ProcessStat {
  // The id of Process
  optional string id = 1;

  optional string definitionContent = 2;

  optional ProcessRunningState processState = 3;

  optional int64 attempts = 4;

  map<string, FlowNodeStat> flowNodes = 5;

  optional int64 startTime = 6;

  optional int64 endTime = 7;
}

message ProcessStatus {
  optional string phase = 1;

  optional string message = 2;

  // the id of olive region
  optional int64 region = 3;
}

