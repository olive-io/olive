/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.olive_io.olive.apis.mon.v1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/olive-io/olive/apis/mon/v1";

message NodeConfig {
  repeated string endpoints = 1;
}

// Region the olive node
message Region {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional RegionSpec spec = 2;

  optional RegionStatus status = 3;
}

// RegionList is a list of Region objects.
message RegionList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of Region
  repeated Region items = 2;
}

message RegionReplica {
  optional uint64 id = 1;

  optional uint64 runner = 2;

  optional uint64 region = 3;

  optional string raftAddress = 4;

  optional bool isNonVoting = 5;

  optional bool isWitness = 6;

  optional bool isJoin = 7;
}

// RegionSpec is the specification of a Region.
message RegionSpec {
  optional uint64 id = 1;

  optional uint64 deploymentId = 2;

  repeated RegionReplica replicas = 3;

  optional uint64 electionRTT = 4;

  optional uint64 heartbeatRTT = 5;

  optional uint64 leader = 6;

  optional uint64 definitions = 7;

  optional uint64 definitionsLimit = 8;
}

// RegionStat is the stat information of Region
message RegionStat {
  optional uint64 id = 1;

  optional uint64 leader = 2;

  optional uint64 term = 3;

  optional int32 replicas = 4;

  optional uint64 definitions = 5;

  optional uint64 runningDefinitions = 6;

  optional uint64 bpmnProcesses = 7;

  optional uint64 bpmnEvents = 8;

  optional uint64 bpmnTasks = 9;

  optional string message = 10;

  optional int64 timestamp = 11;
}

message RegionStatus {
  optional string phase = 1;
}

// Runner the olive node
message Runner {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional RunnerSpec spec = 2;

  optional RunnerStatus status = 3;
}

// RunnerList is a list of Runner objects.
message RunnerList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of Runner
  repeated Runner items = 2;
}

// RunnerSpec is the specification of a Runner.
message RunnerSpec {
  // ID is the member ID for this member.
  optional int64 id = 1;

  // name is the human-readable name of the member. If the member is not started, the name will be an empty string.
  optional string name = 2;

  // peerURLs is the list of URLs the member exposes to the cluster for communication.
  repeated string peerURLs = 3;

  // clientURLs is the list of URLs the member exposes to clients for communication. If the member is not started, clientURLs will be empty.
  repeated string clientURLs = 4;

  // isLearner indicates if the member is raft learner.
  optional bool isLearner = 5;
}

// RunnerStat is the stat information of Runner
message RunnerStat {
  optional uint64 id = 1;

  optional double cpuPer = 2;

  optional double memoryPer = 3;

  repeated uint64 regions = 4;

  repeated string leaders = 5;

  optional uint64 definitions = 6;

  optional uint64 bpmnProcesses = 7;

  optional uint64 bpmnEvents = 8;

  optional uint64 bpmnTasks = 9;

  optional string message = 10;

  optional int64 timestamp = 11;
}

message RunnerStatus {
  optional string phase = 1;
}

