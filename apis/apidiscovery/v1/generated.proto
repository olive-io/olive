/*
   Copyright 2024 The olive Authors

   This program is offered under a commercial and under the AGPL license.
   For AGPL licensing, see below.

   AGPL licensing:
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Affero General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Affero General Public License for more details.

   You should have received a copy of the GNU Affero General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.olive_io.olive.apis.apidiscovery.v1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/olive-io/olive/apis/apidiscovery/v1";

// Activity defines bpmn Activity of specification
message Activity {
  // the type of activity node, etc ServiceTask, ScriptTask
  optional string type = 1;

  // the id of activity node
  optional string id = 2;

  // the name of activity node
  optional string name = 3;

  // the type of activity node, defines in activity TaskDefinition
  optional string taskType = 4;

  // the id of bpmn definitions
  optional string definitions = 5;

  // the version of bpmn definitions
  optional uint64 definitionsVersion = 6;

  // the id if bpmn process
  optional string process = 7;
}

// Box is an opaque value for a request or response
message Box {
  optional string type = 1;

  // Box Value by json.Marshal
  optional string data = 2;

  // the reference, points to OpenAPI Component when type is Object
  optional string ref = 3;

  map<string, Box> parameters = 4;
}

// Consumer represents a gateway External interfaces
message Consumer {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ConsumerSpec spec = 2;
}

// ConsumerList is a list of Consumer objects.
message ConsumerList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of Consumer
  repeated Consumer items = 2;
}

message ConsumerSpec {
  optional string activity = 1;

  optional string action = 2;

  optional Box request = 3;

  optional Box response = 4;
}

// Endpoint is an endpoint provided by a service
message Endpoint {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional EndpointSpec spec = 2;
}

// EndpointList is a list of Endpoint objects.
message EndpointList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of Endpoint
  repeated Endpoint items = 2;
}

message EndpointSpec {
  optional Box request = 1;

  optional Box response = 2;
}

// Node represents the node the service is on
message Node {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional NodeSpec spec = 2;
}

// NodeList is a list of Node objects.
message NodeList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of Node
  repeated Node items = 2;
}

message NodeSpec {
  optional string address = 1;

  optional int64 port = 2;
}

// Service represents a olive service
message Service {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ServiceSpec spec = 2;
}

// ServiceList is a list of Service objects.
message ServiceList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of Service
  repeated Service items = 2;
}

message ServiceSpec {
  optional string version = 1;

  repeated Endpoint endpoints = 2;

  repeated Node nodes = 3;

  optional int64 ttl = 4;
}

// Yard defines the sets of Consumer
message Yard {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional YardSpec spec = 2;
}

// YardList is a list of Yard objects.
message YardList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of Yard
  repeated Yard items = 2;
}

message YardSpec {
  optional string address = 1;

  map<string, Consumer> consumers = 2;
}

