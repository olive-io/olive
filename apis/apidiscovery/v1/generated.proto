/*
Copyright 2024 The olive Authors

This program is offered under a commercial and under the AGPL license.
For AGPL licensing, see below.

AGPL licensing:
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.olive_io.olive.apis.apidiscovery.v1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/olive-io/olive/apis/apidiscovery/v1";

// Activity defines bpmn Activity of specification
message Activity {
  // the type of activity node, etc ServiceTask, ScriptTask
  optional string type = 1;

  // the id of activity node
  optional string id = 2;

  // the name of activity node
  optional string name = 3;

  // the type of activity node, defines in activity TaskDefinition
  optional string taskType = 4;

  // the id of bpmn definition
  optional string definition = 5;

  // the version of bpmn definitions
  optional uint64 definitionsVersion = 6;

  // the id if bpmn process
  optional string process = 7;
}

// Box is an opaque value for a request or response
message Box {
  optional string type = 1;

  // Box Value by json format
  optional string data = 2;

  // Example Value by json format
  optional string example = 3;

  // Default Value by json format
  optional string default = 4;

  // the reference, points to OpenAPI Component when type is Object
  optional string ref = 5;

  map<string, Box> parameters = 6;
}

// Edge defines the sets of Endpoint
message Edge {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional EdgeSpec spec = 2;

  optional EdgeStatus status = 3;
}

// EdgeList is a list of Edge objects.
message EdgeList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of Edge
  repeated Edge items = 2;
}

message EdgeSpec {
  optional string address = 1;

  repeated string endpoints = 2;
}

message EdgeStatus {
  optional string phase = 1;
}

// Endpoint is an endpoint provided by a service
message Endpoint {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional EndpointSpec spec = 2;

  optional EndpointStatus status = 3;
}

message EndpointHttp {
  optional string url = 1;

  optional string method = 2;

  optional Box request = 3;

  optional Box response = 4;
}

// EndpointList is a list of Endpoint objects.
message EndpointList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of Endpoint
  repeated Endpoint items = 2;
}

message EndpointSpec {
  optional EndpointHttp http = 1;
}

message EndpointStatus {
  optional string phase = 1;
}

// Node represents the node the service is on
message Node {
  optional string id = 1;

  map<string, string> metadata = 2;

  optional string address = 3;

  optional int64 port = 4;
}

// PluginService represents the pluggable service
message PluginService {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PluginServiceSpec spec = 2;

  optional PluginServiceStatus status = 3;
}

// PluginServiceList is a list of PluginService objects.
message PluginServiceList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of PluginServicePhase
  repeated PluginService items = 2;
}

message PluginServiceSpec {
  optional string runner = 1;

  optional string version = 2;

  repeated string endpoints = 3;

  repeated Node nodes = 4;
}

message PluginServiceStatus {
  optional string phase = 1;
}

