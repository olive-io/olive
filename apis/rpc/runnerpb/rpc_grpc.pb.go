// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.3
// source: github.com/olive-io/olive/apis/rpc/runnerpb/rpc.proto

package runnerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RunnerRPCClient is the client API for RunnerRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunnerRPCClient interface {
	GetRunner(ctx context.Context, in *GetRunnerRequest, opts ...grpc.CallOption) (*GetRunnerResponse, error)
	ListDefinitions(ctx context.Context, in *ListDefinitionsRequest, opts ...grpc.CallOption) (*ListDefinitionsResponse, error)
	GetDefinition(ctx context.Context, in *GetDefinitionRequest, opts ...grpc.CallOption) (*GetDefinitionResponse, error)
	ListProcessInstances(ctx context.Context, in *ListProcessInstancesRequest, opts ...grpc.CallOption) (*ListProcessInstancesResponse, error)
	GetProcessInstance(ctx context.Context, in *GetProcessInstanceRequest, opts ...grpc.CallOption) (*GetProcessInstanceResponse, error)
	RunProcessInstance(ctx context.Context, in *RunProcessInstanceRequest, opts ...grpc.CallOption) (*RunProcessInstanceResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Post(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*PostResponse, error)
	Patch(ctx context.Context, in *PatchRequest, opts ...grpc.CallOption) (*PatchResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type runnerRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRunnerRPCClient(cc grpc.ClientConnInterface) RunnerRPCClient {
	return &runnerRPCClient{cc}
}

func (c *runnerRPCClient) GetRunner(ctx context.Context, in *GetRunnerRequest, opts ...grpc.CallOption) (*GetRunnerResponse, error) {
	out := new(GetRunnerResponse)
	err := c.cc.Invoke(ctx, "/runnerpb.RunnerRPC/GetRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerRPCClient) ListDefinitions(ctx context.Context, in *ListDefinitionsRequest, opts ...grpc.CallOption) (*ListDefinitionsResponse, error) {
	out := new(ListDefinitionsResponse)
	err := c.cc.Invoke(ctx, "/runnerpb.RunnerRPC/ListDefinitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerRPCClient) GetDefinition(ctx context.Context, in *GetDefinitionRequest, opts ...grpc.CallOption) (*GetDefinitionResponse, error) {
	out := new(GetDefinitionResponse)
	err := c.cc.Invoke(ctx, "/runnerpb.RunnerRPC/GetDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerRPCClient) ListProcessInstances(ctx context.Context, in *ListProcessInstancesRequest, opts ...grpc.CallOption) (*ListProcessInstancesResponse, error) {
	out := new(ListProcessInstancesResponse)
	err := c.cc.Invoke(ctx, "/runnerpb.RunnerRPC/ListProcessInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerRPCClient) GetProcessInstance(ctx context.Context, in *GetProcessInstanceRequest, opts ...grpc.CallOption) (*GetProcessInstanceResponse, error) {
	out := new(GetProcessInstanceResponse)
	err := c.cc.Invoke(ctx, "/runnerpb.RunnerRPC/GetProcessInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerRPCClient) RunProcessInstance(ctx context.Context, in *RunProcessInstanceRequest, opts ...grpc.CallOption) (*RunProcessInstanceResponse, error) {
	out := new(RunProcessInstanceResponse)
	err := c.cc.Invoke(ctx, "/runnerpb.RunnerRPC/RunProcessInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerRPCClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/runnerpb.RunnerRPC/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerRPCClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/runnerpb.RunnerRPC/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerRPCClient) Post(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*PostResponse, error) {
	out := new(PostResponse)
	err := c.cc.Invoke(ctx, "/runnerpb.RunnerRPC/Post", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerRPCClient) Patch(ctx context.Context, in *PatchRequest, opts ...grpc.CallOption) (*PatchResponse, error) {
	out := new(PatchResponse)
	err := c.cc.Invoke(ctx, "/runnerpb.RunnerRPC/Patch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerRPCClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/runnerpb.RunnerRPC/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunnerRPCServer is the server API for RunnerRPC service.
// All implementations must embed UnimplementedRunnerRPCServer
// for forward compatibility
type RunnerRPCServer interface {
	GetRunner(context.Context, *GetRunnerRequest) (*GetRunnerResponse, error)
	ListDefinitions(context.Context, *ListDefinitionsRequest) (*ListDefinitionsResponse, error)
	GetDefinition(context.Context, *GetDefinitionRequest) (*GetDefinitionResponse, error)
	ListProcessInstances(context.Context, *ListProcessInstancesRequest) (*ListProcessInstancesResponse, error)
	GetProcessInstance(context.Context, *GetProcessInstanceRequest) (*GetProcessInstanceResponse, error)
	RunProcessInstance(context.Context, *RunProcessInstanceRequest) (*RunProcessInstanceResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Post(context.Context, *PostRequest) (*PostResponse, error)
	Patch(context.Context, *PatchRequest) (*PatchResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedRunnerRPCServer()
}

// UnimplementedRunnerRPCServer must be embedded to have forward compatible implementations.
type UnimplementedRunnerRPCServer struct {
}

func (UnimplementedRunnerRPCServer) GetRunner(context.Context, *GetRunnerRequest) (*GetRunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunner not implemented")
}
func (UnimplementedRunnerRPCServer) ListDefinitions(context.Context, *ListDefinitionsRequest) (*ListDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDefinitions not implemented")
}
func (UnimplementedRunnerRPCServer) GetDefinition(context.Context, *GetDefinitionRequest) (*GetDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefinition not implemented")
}
func (UnimplementedRunnerRPCServer) ListProcessInstances(context.Context, *ListProcessInstancesRequest) (*ListProcessInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProcessInstances not implemented")
}
func (UnimplementedRunnerRPCServer) GetProcessInstance(context.Context, *GetProcessInstanceRequest) (*GetProcessInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessInstance not implemented")
}
func (UnimplementedRunnerRPCServer) RunProcessInstance(context.Context, *RunProcessInstanceRequest) (*RunProcessInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunProcessInstance not implemented")
}
func (UnimplementedRunnerRPCServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRunnerRPCServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRunnerRPCServer) Post(context.Context, *PostRequest) (*PostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Post not implemented")
}
func (UnimplementedRunnerRPCServer) Patch(context.Context, *PatchRequest) (*PatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Patch not implemented")
}
func (UnimplementedRunnerRPCServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRunnerRPCServer) mustEmbedUnimplementedRunnerRPCServer() {}

// UnsafeRunnerRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunnerRPCServer will
// result in compilation errors.
type UnsafeRunnerRPCServer interface {
	mustEmbedUnimplementedRunnerRPCServer()
}

func RegisterRunnerRPCServer(s grpc.ServiceRegistrar, srv RunnerRPCServer) {
	s.RegisterService(&RunnerRPC_ServiceDesc, srv)
}

func _RunnerRPC_GetRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerRPCServer).GetRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runnerpb.RunnerRPC/GetRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerRPCServer).GetRunner(ctx, req.(*GetRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerRPC_ListDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDefinitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerRPCServer).ListDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runnerpb.RunnerRPC/ListDefinitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerRPCServer).ListDefinitions(ctx, req.(*ListDefinitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerRPC_GetDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerRPCServer).GetDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runnerpb.RunnerRPC/GetDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerRPCServer).GetDefinition(ctx, req.(*GetDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerRPC_ListProcessInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProcessInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerRPCServer).ListProcessInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runnerpb.RunnerRPC/ListProcessInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerRPCServer).ListProcessInstances(ctx, req.(*ListProcessInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerRPC_GetProcessInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerRPCServer).GetProcessInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runnerpb.RunnerRPC/GetProcessInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerRPCServer).GetProcessInstance(ctx, req.(*GetProcessInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerRPC_RunProcessInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunProcessInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerRPCServer).RunProcessInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runnerpb.RunnerRPC/RunProcessInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerRPCServer).RunProcessInstance(ctx, req.(*RunProcessInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerRPC_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerRPCServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runnerpb.RunnerRPC/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerRPCServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerRPC_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerRPCServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runnerpb.RunnerRPC/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerRPCServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerRPC_Post_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerRPCServer).Post(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runnerpb.RunnerRPC/Post",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerRPCServer).Post(ctx, req.(*PostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerRPC_Patch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerRPCServer).Patch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runnerpb.RunnerRPC/Patch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerRPCServer).Patch(ctx, req.(*PatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerRPC_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerRPCServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runnerpb.RunnerRPC/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerRPCServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RunnerRPC_ServiceDesc is the grpc.ServiceDesc for RunnerRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RunnerRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runnerpb.RunnerRPC",
	HandlerType: (*RunnerRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRunner",
			Handler:    _RunnerRPC_GetRunner_Handler,
		},
		{
			MethodName: "ListDefinitions",
			Handler:    _RunnerRPC_ListDefinitions_Handler,
		},
		{
			MethodName: "GetDefinition",
			Handler:    _RunnerRPC_GetDefinition_Handler,
		},
		{
			MethodName: "ListProcessInstances",
			Handler:    _RunnerRPC_ListProcessInstances_Handler,
		},
		{
			MethodName: "GetProcessInstance",
			Handler:    _RunnerRPC_GetProcessInstance_Handler,
		},
		{
			MethodName: "RunProcessInstance",
			Handler:    _RunnerRPC_RunProcessInstance_Handler,
		},
		{
			MethodName: "List",
			Handler:    _RunnerRPC_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RunnerRPC_Get_Handler,
		},
		{
			MethodName: "Post",
			Handler:    _RunnerRPC_Post_Handler,
		},
		{
			MethodName: "Patch",
			Handler:    _RunnerRPC_Patch_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RunnerRPC_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/olive-io/olive/apis/rpc/runnerpb/rpc.proto",
}
